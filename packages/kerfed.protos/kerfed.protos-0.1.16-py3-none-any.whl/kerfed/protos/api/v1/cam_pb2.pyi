"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
cam.proto
Contains RPC definitions for analysis
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import kerfed.protos.common.v1.fab_pb2
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.mill_pb2
import kerfed.protos.common.v1.stock_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _GpuDetail:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _GpuDetailEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_GpuDetail.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    GPU_DETAIL_UNSPECIFIED: _GpuDetail.ValueType  # 0
    """Defaults to STANDARD"""
    GPU_DETAIL_DRAFT: _GpuDetail.ValueType  # 1
    """Targeted to take less than 1.0 seconds."""
    GPU_DETAIL_STANDARD: _GpuDetail.ValueType  # 2
    """Targeted to take approximately 2.0 seconds"""
    GPU_DETAIL_HIGH: _GpuDetail.ValueType  # 3
    """Targeted to take less than 1 minute."""

class GpuDetail(_GpuDetail, metaclass=_GpuDetailEnumTypeWrapper):
    """What voxel and toolplane resolution strategy should be
    used when computing milled carving columes.
    """

GPU_DETAIL_UNSPECIFIED: GpuDetail.ValueType  # 0
"""Defaults to STANDARD"""
GPU_DETAIL_DRAFT: GpuDetail.ValueType  # 1
"""Targeted to take less than 1.0 seconds."""
GPU_DETAIL_STANDARD: GpuDetail.ValueType  # 2
"""Targeted to take approximately 2.0 seconds"""
GPU_DETAIL_HIGH: GpuDetail.ValueType  # 3
"""Targeted to take less than 1 minute."""
global___GpuDetail = GpuDetail

@typing_extensions.final
class PackRequest(google.protobuf.message.Message):
    """Request flat fabrications to be packed or "nested" onto
    sheets and produce a machine-ready list of DXF or SVG files.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARTS_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    AVAILABLE_FIELD_NUMBER: builtins.int
    UNDERSIZE_DRILL_FIELD_NUMBER: builtins.int
    FORMAT_FIELD_NUMBER: builtins.int
    @property
    def parts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.fab_pb2.FlatFabrication]:
        """The flat parts being packed, with `flattened` populated"""
    @property
    def quantity(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A length-matching"""
    @property
    def available(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.stock_pb2.Stock]:
        """Sheet stock with thickness and extents specified.
        If not passed all parts will be put onto the same sheet.
        """
    undersize_drill: builtins.bool
    """"""
    format: builtins.str
    """Output file format. Acceptable values are 'svg' and 'dxf'
    and the default output format is 'dxf'.
    """
    def __init__(
        self,
        *,
        parts: collections.abc.Iterable[kerfed.protos.common.v1.fab_pb2.FlatFabrication] | None = ...,
        quantity: collections.abc.Iterable[builtins.int] | None = ...,
        available: collections.abc.Iterable[kerfed.protos.common.v1.stock_pb2.Stock] | None = ...,
        undersize_drill: builtins.bool = ...,
        format: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["available", b"available", "format", b"format", "parts", b"parts", "quantity", b"quantity", "undersize_drill", b"undersize_drill"]) -> None: ...

global___PackRequest = PackRequest

@typing_extensions.final
class PackResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PACKED_FIELD_NUMBER: builtins.int
    SHEETS_FIELD_NUMBER: builtins.int
    @property
    def packed(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.fileblob_pb2.FileBlob]:
        """Packed result as a DXF or SVG."""
    @property
    def sheets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.stock_pb2.Stock]:
        """The sheet size for each packed value."""
    def __init__(
        self,
        *,
        packed: collections.abc.Iterable[kerfed.protos.common.v1.fileblob_pb2.FileBlob] | None = ...,
        sheets: collections.abc.Iterable[kerfed.protos.common.v1.stock_pb2.Stock] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["packed", b"packed", "sheets", b"sheets"]) -> None: ...

global___PackResponse = PackResponse

@typing_extensions.final
class MillRequest(google.protobuf.message.Message):
    """Advanced analysis of milled parts including
    generating toolpaths for a part.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MESH_FIELD_NUMBER: builtins.int
    MESH_UNITS_FIELD_NUMBER: builtins.int
    DIAMETERS_FIELD_NUMBER: builtins.int
    MACHINE_FIELD_NUMBER: builtins.int
    RETURN_VOLUME_FIELD_NUMBER: builtins.int
    RETURN_GCODE_FIELD_NUMBER: builtins.int
    FIXTURE_COLLISIONS_FIELD_NUMBER: builtins.int
    INCLUDE_BALL_FIELD_NUMBER: builtins.int
    DETAIL_FIELD_NUMBER: builtins.int
    @property
    def mesh(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The geometry for the part to be milled."""
    mesh_units: builtins.str
    """If the geometry is in a format that doesn't contain units
    like an STL or OBJ file, what units are the file in?
    """
    @property
    def diameters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """These are advanced optional settings.
        Specify the diameters of mills available in meters.
        """
    @property
    def machine(self) -> kerfed.protos.common.v1.mill_pb2.MillMachine:
        """Specify the parameters of the milling machine being used."""
    return_volume: builtins.bool
    """Return a KDC format visualization volume."""
    return_gcode: builtins.bool
    """Generate and return CNC milling toolpaths."""
    fixture_collisions: builtins.bool
    """Check fixture collisions during carving."""
    include_ball: builtins.bool
    """Include a ball mill to enable free-form surfaces."""
    detail: global___GpuDetail.ValueType
    def __init__(
        self,
        *,
        mesh: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        mesh_units: builtins.str = ...,
        diameters: collections.abc.Iterable[builtins.float] | None = ...,
        machine: kerfed.protos.common.v1.mill_pb2.MillMachine | None = ...,
        return_volume: builtins.bool = ...,
        return_gcode: builtins.bool = ...,
        fixture_collisions: builtins.bool = ...,
        include_ball: builtins.bool = ...,
        detail: global___GpuDetail.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["machine", b"machine", "mesh", b"mesh"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["detail", b"detail", "diameters", b"diameters", "fixture_collisions", b"fixture_collisions", "include_ball", b"include_ball", "machine", b"machine", "mesh", b"mesh", "mesh_units", b"mesh_units", "return_gcode", b"return_gcode", "return_volume", b"return_volume"]) -> None: ...

global___MillRequest = MillRequest

@typing_extensions.final
class MillResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FAB_FIELD_NUMBER: builtins.int
    @property
    def fab(self) -> kerfed.protos.common.v1.fab_pb2.PartFabrication:
        """A compressed archive of all toolpath planes in the G-code format."""
    def __init__(
        self,
        *,
        fab: kerfed.protos.common.v1.fab_pb2.PartFabrication | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fab", b"fab"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fab", b"fab"]) -> None: ...

global___MillResponse = MillResponse
