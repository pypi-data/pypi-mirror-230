[tool.poetry]
name = "nocto"
version = "1.1.0"
description = "Simple CLI tool to replace Octopus-style templated variables in file from local environment."
authors = ["Viliam Valent <viliam@valent.email>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/ViliamV/nocto"
homepage = "https://github.com/ViliamV/nocto"
packages = [{ include = "nocto" }]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
nocto = 'nocto.main:app'

[tool.poetry.dependencies]
python = ">=3.11, <3.12"
typer = { version = "^0.9.0", extras = ["all"] }
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
black = ">=22.8"
isort = "^5.11"
ruff = "*"
mypy = "^1.5"
pytest = "^7.1"
pytest-cov = "^4.0"
bumpver = ">=2022.1120"
poethepoet = "^0.18.1"

[tool.poetry.group.docs.dependencies]
portray = "^1.8.0"

[tool.black]
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 120
target-version = ["py311"]
include = '\.py$'
exclude = '''
(
  \.git
  |__pycache__
)
'''

# https://pycqa.github.io/isort/docs/configuration/config_files.html
[tool.isort]
profile = "black"
line_length = 120
lines_between_sections = 1
lines_after_imports = 2
force_sort_within_sections = true
include_trailing_comma = true

# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
python_version = "3.11"
follow_imports = "silent"
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_reexport = true
ignore_missing_imports = true
show_error_codes = true
cache_dir = ".cache/mypy/"

# Don't fuss about missing annotations in tests
# error: Function is missing a return type annotation
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# https://docs.pytest.org/en/latest/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
minversion = "7.1"
testpaths = ["tests/"]
addopts = [
  "-ra",
  "--capture=no",
  "--strict-markers",
  "--cov-report=term-missing:skip-covered",
  "--no-cov-on-fail",
]
markers = [
  "slow: Slow tests",
  "database: Requires a DB connection",
  "integration: Dependent on some external source and may not be suitable to run without setup & supervision",
]
cache_dir = ".cache/pytest/"

# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [".venv/*", "tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "raise NotImplementedError",
  "except DistributionNotFound",
  "TYPE_CHECKING",
]

[tool.ruff]
select = [
  "A",   # flake8-builtins
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "C90", # mccabe
  "E",   # pycodestyle
  "F",   # Pyflakes
  "N",   # pep8-naming
  "NPY", # NumPy
  "PD",  # pandas-vet
  "PIE", # flake8-pie
  "PLE", # Pylint Error
  "PTH", # flake8-use-pathlib
  "RUF", # Ruff
  "S",   # flake8-bandit
  "SIM", # flakes8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
]
cache-dir = ".cache/ruff"
line-length = 120
target-version = "py311"
# Never enforce line length violations
ignore = ["E501"]
format = "grouped"
ignore-init-module-imports = true
[tool.ruff.pyupgrade]
keep-runtime-typing = true
[tool.ruff.per-file-ignores]
"tests/*" = [
  "S101",   # Use of `assert` detected
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "ARG003", # Unused class method argument
]

[tool.poe.tasks]

[tool.poe.tasks.clean]
help = "Remove generated files"
cmd = """
    rm -rf .coverage
           .mypy_cache
           .pytest_cache
           ./**/__pycache__
           dist
           htmlcov
  """

[tool.poe.tasks.format]
help = "Run formating tools on the code base"
sequence = ["isort .", "black ."]
default_item_type = "cmd"

[tool.poe.tasks.test]
help = "Run unit tests"
cmd = "pytest --cov=nocto -m 'not integration and not database'"

[tool.poe.tasks.itest]
help = "Run integration tests"
cmd = "pytest --cov=nocto -m 'integration or database'"

[tool.poe.tasks.test-quick]
help = "Run fast unit tests"
cmd = "pytest --cov=nocto -m 'not slow and not database and not integration'"

[tool.poe.tasks.type]
help = "Run the mypy type checker"
cmd = "mypy ."

[tool.poe.tasks.lint]
help = "Run linter"
cmd = "ruff ."

[tool.poe.tasks.style]
help = "Validate code style"
sequence = ["isort . --check --diff --quiet", "black . --check --diff --quiet"]
default_item_type = "cmd"

[tool.poe.tasks.security]
help = "Validate code security"
sequence = ["bandit -r .", "pip-audit"]
default_item_type = "cmd"

[tool.poe.tasks.docs]
help = "Preview auto-generated documentation in browser"
cmd = "portray in_browser --config_file portray.toml"

[tool.poe.tasks.bumpver]
help = "Update version"
cmd = "bumpver update"
