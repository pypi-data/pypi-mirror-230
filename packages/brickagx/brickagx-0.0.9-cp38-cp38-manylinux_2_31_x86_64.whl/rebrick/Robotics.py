# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RoboticsSwig
else:
    import _RoboticsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _RoboticsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RoboticsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RoboticsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RoboticsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _RoboticsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RoboticsSwig:
_RoboticsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Physics3D
import rebrick.Math
import rebrick.Physics
import rebrick.Physics1D
import rebrick.DriveTrain
import rebrick.Simulation
class Joint(rebrick.Physics3D.System):
    r"""Proxy of C++ Robotics::Joint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joint self) -> Joint"""
        _RoboticsSwig.Joint_swiginit(self, _RoboticsSwig.new_Joint())

    def mate(self):
        r"""mate(Joint self) -> std::shared_ptr< Physics3D::Mate >"""
        return _RoboticsSwig.Joint_mate(self)

    def links(self):
        r"""links(Joint self) -> Robotics_RigidLink_Vector"""
        return _RoboticsSwig.Joint_links(self)

    def actuator(self):
        r"""actuator(Joint self) -> std::shared_ptr< Physics::Interaction >"""
        return _RoboticsSwig.Joint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.Joint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joint self)"""
        return _RoboticsSwig.Joint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joint

# Register Joint in _RoboticsSwig:
_RoboticsSwig.Joint_swigregister(Joint)

class HingeJoint(Joint):
    r"""Proxy of C++ Robotics::HingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HingeJoint self) -> HingeJoint"""
        _RoboticsSwig.HingeJoint_swiginit(self, _RoboticsSwig.new_HingeJoint())

    def mate(self):
        r"""mate(HingeJoint self) -> std::shared_ptr< Physics3D::Hinge >"""
        return _RoboticsSwig.HingeJoint_mate(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(HingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.HingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(HingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.HingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(HingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.HingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(HingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.HingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(HingeJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.HingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(HingeJoint self)"""
        return _RoboticsSwig.HingeJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_HingeJoint

# Register HingeJoint in _RoboticsSwig:
_RoboticsSwig.HingeJoint_swigregister(HingeJoint)

class PositionHingeJoint(HingeJoint):
    r"""Proxy of C++ Robotics::PositionHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PositionHingeJoint self) -> PositionHingeJoint"""
        _RoboticsSwig.PositionHingeJoint_swiginit(self, _RoboticsSwig.new_PositionHingeJoint())

    def actuator(self):
        r"""actuator(PositionHingeJoint self) -> std::shared_ptr< Physics3D::TorsionSpring >"""
        return _RoboticsSwig.PositionHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(PositionHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.PositionHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(PositionHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.PositionHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(PositionHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.PositionHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(PositionHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.PositionHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(PositionHingeJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.PositionHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(PositionHingeJoint self)"""
        return _RoboticsSwig.PositionHingeJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_PositionHingeJoint

# Register PositionHingeJoint in _RoboticsSwig:
_RoboticsSwig.PositionHingeJoint_swigregister(PositionHingeJoint)

class RigidLink(rebrick.Physics3D.RigidBody):
    r"""Proxy of C++ Robotics::RigidLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RigidLink self) -> RigidLink"""
        _RoboticsSwig.RigidLink_swiginit(self, _RoboticsSwig.new_RigidLink())

    def start(self):
        r"""start(RigidLink self) -> std::shared_ptr< Physics3D::MateConnector >"""
        return _RoboticsSwig.RigidLink_start(self)

    def end(self):
        r"""end(RigidLink self) -> std::shared_ptr< Physics3D::MateConnector >"""
        return _RoboticsSwig.RigidLink_end(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RigidLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.RigidLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RigidLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.RigidLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RigidLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.RigidLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RigidLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.RigidLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RigidLink self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.RigidLink_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RigidLink self)"""
        return _RoboticsSwig.RigidLink_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_RigidLink

# Register RigidLink in _RoboticsSwig:
_RoboticsSwig.RigidLink_swigregister(RigidLink)

class RigidBoxLink(RigidLink):
    r"""Proxy of C++ Robotics::RigidBoxLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RigidBoxLink self) -> RigidBoxLink"""
        _RoboticsSwig.RigidBoxLink_swiginit(self, _RoboticsSwig.new_RigidBoxLink())

    def geometry(self):
        r"""geometry(RigidBoxLink self) -> std::shared_ptr< Physics3D::Box >"""
        return _RoboticsSwig.RigidBoxLink_geometry(self)

    def arrow(self):
        r"""arrow(RigidBoxLink self) -> std::shared_ptr< Physics3D::Box >"""
        return _RoboticsSwig.RigidBoxLink_arrow(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RigidBoxLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.RigidBoxLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RigidBoxLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.RigidBoxLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RigidBoxLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.RigidBoxLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RigidBoxLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.RigidBoxLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RigidBoxLink self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.RigidBoxLink_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RigidBoxLink self)"""
        return _RoboticsSwig.RigidBoxLink_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_RigidBoxLink

# Register RigidBoxLink in _RoboticsSwig:
_RoboticsSwig.RigidBoxLink_swigregister(RigidBoxLink)

class Robot(rebrick.Physics3D.System):
    r"""Proxy of C++ Robotics::Robot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robot self) -> Robot"""
        _RoboticsSwig.Robot_swiginit(self, _RoboticsSwig.new_Robot())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robot self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Robot_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robot self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robot_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robot self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.Robot_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robot self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Robot_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robot self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Robot_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Robot self)"""
        return _RoboticsSwig.Robot_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robot

# Register Robot in _RoboticsSwig:
_RoboticsSwig.Robot_swigregister(Robot)

class RobotInput(rebrick.Simulation.Input):
    r"""Proxy of C++ Robotics::RobotInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RobotInput self) -> RobotInput"""
        _RoboticsSwig.RobotInput_swiginit(self, _RoboticsSwig.new_RobotInput())

    def angle_targets(self):
        r"""angle_targets(RobotInput self) -> Simulation_TorsionSpringAngleInput_Vector"""
        return _RoboticsSwig.RobotInput_angle_targets(self)

    def angular_velocity_targets(self):
        r"""angular_velocity_targets(RobotInput self) -> Simulation_RotationalVelocityMotorVelocityInput_Vector"""
        return _RoboticsSwig.RobotInput_angular_velocity_targets(self)

    def process(self, signal):
        r"""
        process(RobotInput self, std::shared_ptr< Simulation::InputSignal > signal) -> Simulation_InputSignal_Vector

        Parameters
        ----------
        signal: std::shared_ptr< Simulation::InputSignal >

        """
        return _RoboticsSwig.RobotInput_process(self, signal)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RobotInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.RobotInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RobotInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.RobotInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RobotInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.RobotInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RobotInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.RobotInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RobotInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.RobotInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RobotInput self)"""
        return _RoboticsSwig.RobotInput_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_RobotInput

# Register RobotInput in _RoboticsSwig:
_RoboticsSwig.RobotInput_swigregister(RobotInput)

class RobotInputSignal(rebrick.Simulation.InputSignal):
    r"""Proxy of C++ Robotics::RobotInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RobotInputSignal self) -> RobotInputSignal"""
        _RoboticsSwig.RobotInputSignal_swiginit(self, _RoboticsSwig.new_RobotInputSignal())

    def angles(self):
        r"""angles(RobotInputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.RobotInputSignal_angles(self)

    def angular_velocities(self):
        r"""angular_velocities(RobotInputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.RobotInputSignal_angular_velocities(self)

    @staticmethod
    def create(angles, angular_velocities, target):
        r"""
        create(std::vector< double,std::allocator< double > > angles, std::vector< double,std::allocator< double > > angular_velocities, std::shared_ptr< Simulation::Input > target) -> std::shared_ptr< Robotics::RobotInputSignal >

        Parameters
        ----------
        angles: std::vector< double,std::allocator< double > >
        angular_velocities: std::vector< double,std::allocator< double > >
        target: std::shared_ptr< Simulation::Input >

        """
        return _RoboticsSwig.RobotInputSignal_create(angles, angular_velocities, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RobotInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.RobotInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RobotInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.RobotInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RobotInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.RobotInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RobotInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.RobotInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RobotInputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.RobotInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RobotInputSignal self)"""
        return _RoboticsSwig.RobotInputSignal_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_RobotInputSignal

# Register RobotInputSignal in _RoboticsSwig:
_RoboticsSwig.RobotInputSignal_swigregister(RobotInputSignal)

def RobotInputSignal_create(angles, angular_velocities, target):
    r"""
    RobotInputSignal_create(std::vector< double,std::allocator< double > > angles, std::vector< double,std::allocator< double > > angular_velocities, std::shared_ptr< Simulation::Input > target) -> std::shared_ptr< Robotics::RobotInputSignal >

    Parameters
    ----------
    angles: std::vector< double,std::allocator< double > >
    angular_velocities: std::vector< double,std::allocator< double > >
    target: std::shared_ptr< Simulation::Input >

    """
    return _RoboticsSwig.RobotInputSignal_create(angles, angular_velocities, target)

class RobotOutput(rebrick.Simulation.Output):
    r"""Proxy of C++ Robotics::RobotOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RobotOutput self) -> RobotOutput"""
        _RoboticsSwig.RobotOutput_swiginit(self, _RoboticsSwig.new_RobotOutput())

    def angle_sources(self):
        r"""angle_sources(RobotOutput self) -> Simulation_HingeAngleOutput_Vector"""
        return _RoboticsSwig.RobotOutput_angle_sources(self)

    def angular_velocity_sources(self):
        r"""angular_velocity_sources(RobotOutput self) -> Simulation_HingeAngularVelocityOutput_Vector"""
        return _RoboticsSwig.RobotOutput_angular_velocity_sources(self)

    def process(self, output, signals):
        r"""
        process(RobotOutput self, std::shared_ptr< Simulation::Output > output, Simulation_OutputSignal_Vector signals) -> std::shared_ptr< Simulation::OutputSignal >

        Parameters
        ----------
        output: std::shared_ptr< Simulation::Output >
        signals: std::vector< std::shared_ptr< Simulation::OutputSignal >,std::allocator< std::shared_ptr< Simulation::OutputSignal > > >

        """
        return _RoboticsSwig.RobotOutput_process(self, output, signals)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RobotOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.RobotOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RobotOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.RobotOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RobotOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.RobotOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RobotOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.RobotOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RobotOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.RobotOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RobotOutput self)"""
        return _RoboticsSwig.RobotOutput_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_RobotOutput

# Register RobotOutput in _RoboticsSwig:
_RoboticsSwig.RobotOutput_swigregister(RobotOutput)

class RobotOutputSignal(rebrick.Simulation.OutputSignal):
    r"""Proxy of C++ Robotics::RobotOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RobotOutputSignal self) -> RobotOutputSignal"""
        _RoboticsSwig.RobotOutputSignal_swiginit(self, _RoboticsSwig.new_RobotOutputSignal())

    def angles(self):
        r"""angles(RobotOutputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.RobotOutputSignal_angles(self)

    def angular_velocities(self):
        r"""angular_velocities(RobotOutputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.RobotOutputSignal_angular_velocities(self)

    @staticmethod
    def create(source_angle_signals, source_angular_velocity_signals, source):
        r"""
        create(Simulation_RealOutputSignal_Vector source_angle_signals, Simulation_RealOutputSignal_Vector source_angular_velocity_signals, std::shared_ptr< Simulation::Output > source) -> std::shared_ptr< Robotics::RobotOutputSignal >

        Parameters
        ----------
        source_angle_signals: std::vector< std::shared_ptr< Simulation::RealOutputSignal >,std::allocator< std::shared_ptr< Simulation::RealOutputSignal > > >
        source_angular_velocity_signals: std::vector< std::shared_ptr< Simulation::RealOutputSignal >,std::allocator< std::shared_ptr< Simulation::RealOutputSignal > > >
        source: std::shared_ptr< Simulation::Output >

        """
        return _RoboticsSwig.RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RobotOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.RobotOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RobotOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.RobotOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RobotOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.RobotOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RobotOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.RobotOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RobotOutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.RobotOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RobotOutputSignal self)"""
        return _RoboticsSwig.RobotOutputSignal_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_RobotOutputSignal

# Register RobotOutputSignal in _RoboticsSwig:
_RoboticsSwig.RobotOutputSignal_swigregister(RobotOutputSignal)

def RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, source):
    r"""
    RobotOutputSignal_create(Simulation_RealOutputSignal_Vector source_angle_signals, Simulation_RealOutputSignal_Vector source_angular_velocity_signals, std::shared_ptr< Simulation::Output > source) -> std::shared_ptr< Robotics::RobotOutputSignal >

    Parameters
    ----------
    source_angle_signals: std::vector< std::shared_ptr< Simulation::RealOutputSignal >,std::allocator< std::shared_ptr< Simulation::RealOutputSignal > > >
    source_angular_velocity_signals: std::vector< std::shared_ptr< Simulation::RealOutputSignal >,std::allocator< std::shared_ptr< Simulation::RealOutputSignal > > >
    source: std::shared_ptr< Simulation::Output >

    """
    return _RoboticsSwig.RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, source)

class VelocityHingeJoint(HingeJoint):
    r"""Proxy of C++ Robotics::VelocityHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VelocityHingeJoint self) -> VelocityHingeJoint"""
        _RoboticsSwig.VelocityHingeJoint_swiginit(self, _RoboticsSwig.new_VelocityHingeJoint())

    def actuator(self):
        r"""actuator(VelocityHingeJoint self) -> std::shared_ptr< Physics3D::RotationalVelocityMotor >"""
        return _RoboticsSwig.VelocityHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(VelocityHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.VelocityHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(VelocityHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.VelocityHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(VelocityHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > &

        """
        return _RoboticsSwig.VelocityHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(VelocityHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.VelocityHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(VelocityHingeJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.VelocityHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(VelocityHingeJoint self)"""
        return _RoboticsSwig.VelocityHingeJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_VelocityHingeJoint

# Register VelocityHingeJoint in _RoboticsSwig:
_RoboticsSwig.VelocityHingeJoint_swigregister(VelocityHingeJoint)

class Robotics_HingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::HingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_HingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type j) -> Robotics_HingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type

        __setslice__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type j, Robotics_HingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::HingeJoint >,std::allocator< std::shared_ptr< Robotics::HingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type

        __delitem__(Robotics_HingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_HingeJoint_Vector self, PySliceObject * slice) -> Robotics_HingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_HingeJoint_Vector self, PySliceObject * slice, Robotics_HingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::HingeJoint >,std::allocator< std::shared_ptr< Robotics::HingeJoint > > > const &

        __setitem__(Robotics_HingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::HingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_HingeJoint_Vector self, Robotics_HingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::HingeJoint > > &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_HingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_HingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator

        erase(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_HingeJoint_Vector self) -> Robotics_HingeJoint_Vector
        __init__(Robotics_HingeJoint_Vector self, Robotics_HingeJoint_Vector other) -> Robotics_HingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::HingeJoint > > const &

        __init__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type size) -> Robotics_HingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type

        __init__(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & value) -> Robotics_HingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_HingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_HingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type

        resize(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        insert(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::HingeJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_HingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_HingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_HingeJoint_Vector

# Register Robotics_HingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_HingeJoint_Vector_swigregister(Robotics_HingeJoint_Vector)

class Robotics_Joint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type j) -> Robotics_Joint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type

        __setslice__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type j, Robotics_Joint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joint >,std::allocator< std::shared_ptr< Robotics::Joint > > > const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type

        __delitem__(Robotics_Joint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joint_Vector self, PySliceObject * slice) -> Robotics_Joint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joint_Vector self, PySliceObject * slice, Robotics_Joint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joint >,std::allocator< std::shared_ptr< Robotics::Joint > > > const &

        __setitem__(Robotics_Joint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::value_type"""
        return _RoboticsSwig.Robotics_Joint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joint_Vector self, Robotics_Joint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joint > > &

        """
        return _RoboticsSwig.Robotics_Joint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::iterator"""
        return _RoboticsSwig.Robotics_Joint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::iterator"""
        return _RoboticsSwig.Robotics_Joint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joint_Vector self)"""
        return _RoboticsSwig.Robotics_Joint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joint_Vector self)"""
        return _RoboticsSwig.Robotics_Joint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joint > >::iterator

        erase(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joint_Vector self) -> Robotics_Joint_Vector
        __init__(Robotics_Joint_Vector self, Robotics_Joint_Vector other) -> Robotics_Joint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joint > > const &

        __init__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::size_type size) -> Robotics_Joint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joint > >::size_type

        __init__(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & value) -> Robotics_Joint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joint > >::size_type

        resize(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        insert(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joint_Vector

# Register Robotics_Joint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joint_Vector_swigregister(Robotics_Joint_Vector)

class Robotics_PositionHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::PositionHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_PositionHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type j) -> Robotics_PositionHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type

        __setslice__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type j, Robotics_PositionHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::PositionHingeJoint >,std::allocator< std::shared_ptr< Robotics::PositionHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type

        __delitem__(Robotics_PositionHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_PositionHingeJoint_Vector self, PySliceObject * slice) -> Robotics_PositionHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_PositionHingeJoint_Vector self, PySliceObject * slice, Robotics_PositionHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::PositionHingeJoint >,std::allocator< std::shared_ptr< Robotics::PositionHingeJoint > > > const &

        __setitem__(Robotics_PositionHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_PositionHingeJoint_Vector self, Robotics_PositionHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_PositionHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_PositionHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator

        erase(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_PositionHingeJoint_Vector self) -> Robotics_PositionHingeJoint_Vector
        __init__(Robotics_PositionHingeJoint_Vector self, Robotics_PositionHingeJoint_Vector other) -> Robotics_PositionHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > > const &

        __init__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type size) -> Robotics_PositionHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type

        __init__(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & value) -> Robotics_PositionHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_PositionHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_PositionHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type

        resize(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        insert(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_PositionHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_PositionHingeJoint_Vector

# Register Robotics_PositionHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_PositionHingeJoint_Vector_swigregister(Robotics_PositionHingeJoint_Vector)

class Robotics_RigidBoxLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::RigidBoxLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_RigidBoxLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type j) -> Robotics_RigidBoxLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type

        __setslice__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type j, Robotics_RigidBoxLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::RigidBoxLink >,std::allocator< std::shared_ptr< Robotics::RigidBoxLink > > > const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type

        __delitem__(Robotics_RigidBoxLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_RigidBoxLink_Vector self, PySliceObject * slice) -> Robotics_RigidBoxLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_RigidBoxLink_Vector self, PySliceObject * slice, Robotics_RigidBoxLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::RigidBoxLink >,std::allocator< std::shared_ptr< Robotics::RigidBoxLink > > > const &

        __setitem__(Robotics_RigidBoxLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_RigidBoxLink_Vector self, Robotics_RigidBoxLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::RigidBoxLink > > &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_RigidBoxLink_Vector self)"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_RigidBoxLink_Vector self)"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator

        erase(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator first, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator last) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator
        last: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_RigidBoxLink_Vector self) -> Robotics_RigidBoxLink_Vector
        __init__(Robotics_RigidBoxLink_Vector self, Robotics_RigidBoxLink_Vector other) -> Robotics_RigidBoxLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::RigidBoxLink > > const &

        __init__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type size) -> Robotics_RigidBoxLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type

        __init__(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type size, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & value) -> Robotics_RigidBoxLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type
        value: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_RigidBoxLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_RigidBoxLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type n, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type

        resize(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type new_size, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        insert(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type n, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::iterator
        n: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type

        """
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_RigidBoxLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_RigidBoxLink_Vector

# Register Robotics_RigidBoxLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_RigidBoxLink_Vector_swigregister(Robotics_RigidBoxLink_Vector)

class Robotics_RigidLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::RigidLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_RigidLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RigidLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RigidLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_RigidLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type j) -> Robotics_RigidLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type

        __setslice__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type j, Robotics_RigidLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::RigidLink >,std::allocator< std::shared_ptr< Robotics::RigidLink > > > const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type

        __delitem__(Robotics_RigidLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_RigidLink_Vector self, PySliceObject * slice) -> Robotics_RigidLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_RigidLink_Vector self, PySliceObject * slice, Robotics_RigidLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::RigidLink >,std::allocator< std::shared_ptr< Robotics::RigidLink > > > const &

        __setitem__(Robotics_RigidLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RigidLink > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_RigidLink_Vector self, Robotics_RigidLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::RigidLink > > &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_RigidLink_Vector self)"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_RigidLink_Vector self)"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator

        erase(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator first, std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator last) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator
        last: std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_RigidLink_Vector self) -> Robotics_RigidLink_Vector
        __init__(Robotics_RigidLink_Vector self, Robotics_RigidLink_Vector other) -> Robotics_RigidLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::RigidLink > > const &

        __init__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type size) -> Robotics_RigidLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type

        __init__(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type size, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & value) -> Robotics_RigidLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type
        value: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_RigidLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_RigidLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type n, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type

        resize(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type new_size, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        insert(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type n, std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RigidLink > >::iterator
        n: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type

        """
        return _RoboticsSwig.Robotics_RigidLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_RigidLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_RigidLink_Vector

# Register Robotics_RigidLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_RigidLink_Vector_swigregister(Robotics_RigidLink_Vector)

class Robotics_Robot_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Robot > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robot_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robot_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robot_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robot_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robot_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type j) -> Robotics_Robot_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robot_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type

        __setslice__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type j, Robotics_Robot_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Robot >,std::allocator< std::shared_ptr< Robotics::Robot > > > const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robot_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type

        __delitem__(Robotics_Robot_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robot_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robot_Vector self, PySliceObject * slice) -> Robotics_Robot_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robot_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robot_Vector self, PySliceObject * slice, Robotics_Robot_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Robot >,std::allocator< std::shared_ptr< Robotics::Robot > > > const &

        __setitem__(Robotics_Robot_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robot > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::value_type"""
        return _RoboticsSwig.Robotics_Robot_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robot_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robot_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robot_Vector self, Robotics_Robot_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Robot > > &

        """
        return _RoboticsSwig.Robotics_Robot_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::iterator"""
        return _RoboticsSwig.Robotics_Robot_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::iterator"""
        return _RoboticsSwig.Robotics_Robot_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robot_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robot_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robot_Vector self)"""
        return _RoboticsSwig.Robotics_Robot_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robot_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robot_Vector self)"""
        return _RoboticsSwig.Robotics_Robot_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Robot > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robot > >::iterator

        erase(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::iterator first, std::vector< std::shared_ptr< Robotics::Robot > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Robot > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Robot > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Robot > >::iterator

        """
        return _RoboticsSwig.Robotics_Robot_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robot_Vector self) -> Robotics_Robot_Vector
        __init__(Robotics_Robot_Vector self, Robotics_Robot_Vector other) -> Robotics_Robot_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Robot > > const &

        __init__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::size_type size) -> Robotics_Robot_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robot > >::size_type

        __init__(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::size_type size, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & value) -> Robotics_Robot_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robot > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robot_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robot_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robot_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robot_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::size_type n, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robot > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robot > >::size_type

        resize(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robot > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Robot > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robot > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        insert(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robot > >::size_type n, std::vector< std::shared_ptr< Robotics::Robot > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robot > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Robot > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robot_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robot > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robot > >::size_type

        """
        return _RoboticsSwig.Robotics_Robot_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robot_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robot_Vector

# Register Robotics_Robot_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robot_Vector_swigregister(Robotics_Robot_Vector)

class Robotics_RobotInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::RobotInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_RobotInput_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_RobotInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type j) -> Robotics_RobotInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type

        __setslice__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type j, Robotics_RobotInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::RobotInput >,std::allocator< std::shared_ptr< Robotics::RobotInput > > > const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type

        __delitem__(Robotics_RobotInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_RobotInput_Vector self, PySliceObject * slice) -> Robotics_RobotInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_RobotInput_Vector self, PySliceObject * slice, Robotics_RobotInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::RobotInput >,std::allocator< std::shared_ptr< Robotics::RobotInput > > > const &

        __setitem__(Robotics_RobotInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInput > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_empty(self)

    def size(self):
        r"""size(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_RobotInput_Vector self, Robotics_RobotInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::RobotInput > > &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_begin(self)

    def end(self):
        r"""end(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_RobotInput_Vector self)"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::allocator_type"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_RobotInput_Vector self)"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator

        erase(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator first, std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator last) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator
        last: std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_RobotInput_Vector self) -> Robotics_RobotInput_Vector
        __init__(Robotics_RobotInput_Vector self, Robotics_RobotInput_Vector other) -> Robotics_RobotInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::RobotInput > > const &

        __init__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type size) -> Robotics_RobotInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type

        __init__(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type size, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & value) -> Robotics_RobotInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type
        value: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        _RoboticsSwig.Robotics_RobotInput_Vector_swiginit(self, _RoboticsSwig.new_Robotics_RobotInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_front(self)

    def back(self):
        r"""back(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type

        resize(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type new_size, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        insert(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotInput > >::iterator
        n: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type

        """
        return _RoboticsSwig.Robotics_RobotInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_RobotInput_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_RobotInput_Vector

# Register Robotics_RobotInput_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_RobotInput_Vector_swigregister(Robotics_RobotInput_Vector)

class Robotics_RobotInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::RobotInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_RobotInputSignal_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type j) -> Robotics_RobotInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type

        __setslice__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type j, Robotics_RobotInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::RobotInputSignal >,std::allocator< std::shared_ptr< Robotics::RobotInputSignal > > > const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type

        __delitem__(Robotics_RobotInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_RobotInputSignal_Vector self, PySliceObject * slice) -> Robotics_RobotInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_RobotInputSignal_Vector self, PySliceObject * slice, Robotics_RobotInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::RobotInputSignal >,std::allocator< std::shared_ptr< Robotics::RobotInputSignal > > > const &

        __setitem__(Robotics_RobotInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_RobotInputSignal_Vector self, Robotics_RobotInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::RobotInputSignal > > &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_RobotInputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::allocator_type"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_RobotInputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator

        erase(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator first, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator last) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator
        last: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_RobotInputSignal_Vector self) -> Robotics_RobotInputSignal_Vector
        __init__(Robotics_RobotInputSignal_Vector self, Robotics_RobotInputSignal_Vector other) -> Robotics_RobotInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::RobotInputSignal > > const &

        __init__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type size) -> Robotics_RobotInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type

        __init__(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type size, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & value) -> Robotics_RobotInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type
        value: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        _RoboticsSwig.Robotics_RobotInputSignal_Vector_swiginit(self, _RoboticsSwig.new_Robotics_RobotInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_front(self)

    def back(self):
        r"""back(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type

        resize(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type new_size, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        insert(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::iterator
        n: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type

        """
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_RobotInputSignal_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_RobotInputSignal_Vector

# Register Robotics_RobotInputSignal_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_RobotInputSignal_Vector_swigregister(Robotics_RobotInputSignal_Vector)

class Robotics_RobotOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::RobotOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_RobotOutput_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type j) -> Robotics_RobotOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type

        __setslice__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type j, Robotics_RobotOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::RobotOutput >,std::allocator< std::shared_ptr< Robotics::RobotOutput > > > const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type

        __delitem__(Robotics_RobotOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_RobotOutput_Vector self, PySliceObject * slice) -> Robotics_RobotOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_RobotOutput_Vector self, PySliceObject * slice, Robotics_RobotOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::RobotOutput >,std::allocator< std::shared_ptr< Robotics::RobotOutput > > > const &

        __setitem__(Robotics_RobotOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutput > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_empty(self)

    def size(self):
        r"""size(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_RobotOutput_Vector self, Robotics_RobotOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::RobotOutput > > &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_begin(self)

    def end(self):
        r"""end(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_RobotOutput_Vector self)"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::allocator_type"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_RobotOutput_Vector self)"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator

        erase(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator first, std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator last) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator
        last: std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_RobotOutput_Vector self) -> Robotics_RobotOutput_Vector
        __init__(Robotics_RobotOutput_Vector self, Robotics_RobotOutput_Vector other) -> Robotics_RobotOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::RobotOutput > > const &

        __init__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type size) -> Robotics_RobotOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type

        __init__(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type size, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & value) -> Robotics_RobotOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type
        value: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        _RoboticsSwig.Robotics_RobotOutput_Vector_swiginit(self, _RoboticsSwig.new_Robotics_RobotOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_front(self)

    def back(self):
        r"""back(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type

        resize(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type new_size, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        insert(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotOutput > >::iterator
        n: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type

        """
        return _RoboticsSwig.Robotics_RobotOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_RobotOutput_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_RobotOutput_Vector

# Register Robotics_RobotOutput_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_RobotOutput_Vector_swigregister(Robotics_RobotOutput_Vector)

class Robotics_RobotOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::RobotOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_RobotOutputSignal_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type j) -> Robotics_RobotOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type

        __setslice__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type j, Robotics_RobotOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::RobotOutputSignal >,std::allocator< std::shared_ptr< Robotics::RobotOutputSignal > > > const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type

        __delitem__(Robotics_RobotOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_RobotOutputSignal_Vector self, PySliceObject * slice) -> Robotics_RobotOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_RobotOutputSignal_Vector self, PySliceObject * slice, Robotics_RobotOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::RobotOutputSignal >,std::allocator< std::shared_ptr< Robotics::RobotOutputSignal > > > const &

        __setitem__(Robotics_RobotOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_RobotOutputSignal_Vector self, Robotics_RobotOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > > &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_RobotOutputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::allocator_type"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_RobotOutputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator

        erase(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator first, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_RobotOutputSignal_Vector self) -> Robotics_RobotOutputSignal_Vector
        __init__(Robotics_RobotOutputSignal_Vector self, Robotics_RobotOutputSignal_Vector other) -> Robotics_RobotOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > > const &

        __init__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type size) -> Robotics_RobotOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type

        __init__(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type size, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & value) -> Robotics_RobotOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        _RoboticsSwig.Robotics_RobotOutputSignal_Vector_swiginit(self, _RoboticsSwig.new_Robotics_RobotOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type

        resize(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        insert(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type

        """
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_RobotOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_RobotOutputSignal_Vector

# Register Robotics_RobotOutputSignal_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_RobotOutputSignal_Vector_swigregister(Robotics_RobotOutputSignal_Vector)

class Robotics_VelocityHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_VelocityHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type j) -> Robotics_VelocityHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type

        __setslice__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type j, Robotics_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint >,std::allocator< std::shared_ptr< Robotics::VelocityHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type

        __delitem__(Robotics_VelocityHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_VelocityHingeJoint_Vector self, PySliceObject * slice) -> Robotics_VelocityHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_VelocityHingeJoint_Vector self, PySliceObject * slice, Robotics_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint >,std::allocator< std::shared_ptr< Robotics::VelocityHingeJoint > > > const &

        __setitem__(Robotics_VelocityHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_VelocityHingeJoint_Vector self, Robotics_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_VelocityHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_VelocityHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator

        erase(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_VelocityHingeJoint_Vector self) -> Robotics_VelocityHingeJoint_Vector
        __init__(Robotics_VelocityHingeJoint_Vector self, Robotics_VelocityHingeJoint_Vector other) -> Robotics_VelocityHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > > const &

        __init__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type size) -> Robotics_VelocityHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type

        __init__(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & value) -> Robotics_VelocityHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_VelocityHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type

        resize(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        insert(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_VelocityHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_VelocityHingeJoint_Vector

# Register Robotics_VelocityHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_VelocityHingeJoint_Vector_swigregister(Robotics_VelocityHingeJoint_Vector)



