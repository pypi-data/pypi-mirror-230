"use strict";(self.webpackChunkjupyter_fairly=self.webpackChunkjupyter_fairly||[]).push([[460],{460:(e,t,o)=>{o.r(t),o.d(t,{default:()=>b});var a=o(299),n=o(745),s=o(303),r=o(526),c=o(122),i=o(344),l=o(139);async function d(e="",t={}){const o=l.ServerConnection.makeSettings(),a=i.URLExt.join(o.baseUrl,"jupyter-fairly",e);let n;try{n=await l.ServerConnection.makeRequest(a,t,o)}catch(e){throw new l.ServerConnection.NetworkError(e)}let s=await n.text();if(s.length>0)try{s=JSON.parse(s)}catch(e){console.log("Not a JSON response body.",n)}if(!n.ok)throw new l.ServerConnection.ResponseError(n,s.message||s);return s}var u=o(832);class m extends u.Widget{constructor(){super({node:m.createFormNode()})}getValue(){return this.node.querySelector("input").value.trim()}static createFormNode(){const e=document.createElement("div"),t=document.createElement("label"),o=document.createElement("input"),a=document.createElement("span");return e.className="jp-RedirectForm",a.textContent="Enter URL or DOI: ",o.placeholder="https://doi.org/xx.x/xx.vx",t.appendChild(a),t.appendChild(o),e.appendChild(t),e}}const p={id:"@jupyter-fairly/clone",requires:[c.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{const o=t.tracker.currentWidget.model,a="cloneDataset";e.commands.addCommand(a,{label:"Clone Dataset",isEnabled:()=>!0,isVisible:()=>!0,icon:n.downloadIcon,execute:async()=>{const e=await(0,s.showDialog)({title:"Clone Dataset",body:new m,buttons:[s.Dialog.cancelButton({label:"Cancel"}),s.Dialog.okButton({label:"Clone"})],checkbox:{label:"Extract compressed files",caption:"Uncompress zip and tar.gz files",checked:!1}});if(e.button.accept&&e.value)try{!function(e,t,o=!1,a){let n=JSON.stringify({source:e,destination:"./".concat(t),extract:o,client:"4tu"});console.log("./".concat(t));const c=new r.PromiseDelegate;d("clone",{method:"POST",body:n}).then((e=>{console.log(e),c.resolve({complete:"complete"})})).catch((e=>{c.reject({failed:"failed"}),(0,s.showErrorMessage)("Error when cloning dataset",e)})),s.Notification.promise(c.promise,{pending:{message:"Cloning dataset...",options:{autoClose:!1}},success:{message:e=>`Clonning ${e.complete}.`,options:{autoClose:3e3}},error:{message:()=>"Cloning failed."}})}(e.value,o.path,e.isChecked),console.log("accepted"),await o.refresh()}catch(e){console.error("Encontered an error when cloning the dataset: ",e)}else console.log("rejected")}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:103})}},g={id:"@jupyter-fairly/create-dataset",requires:[c.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{const o=t.tracker.currentWidget.model,a="createDatasetCommand";e.commands.addCommand(a,{label:"Create Fairly Dataset",isEnabled:()=>!0,isVisible:()=>!0,icon:n.addIcon,execute:async()=>{console.log(`the path is: ${o.path}`);let e=await s.InputDialog.getItem({title:"Select template for dataset's metadata",items:["","Default","4TU.Research","Zenodo","Figshare"],okLabel:"Create"});e.button.accept&&e.value?(console.log(`the path is: ${o.path}`),function(e,t){let o="";"4TU.Research"===t||"Figshare"===t?o="figshare":"Zenodo"===t?o="zenodo":null!=t&&"Default"!==t||(o="default"),console.log("./".concat(e)),d("newdataset",{method:"POST",body:JSON.stringify({path:"./".concat(e),template:o})}).then((e=>{console.log(e)})).catch((e=>{console.error(`${e}`),(0,s.showErrorMessage)("Error: Has the dataset been initilized already?",e)}))}(o.path,e.value),await o.refresh()):console.log("rejected")}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:100})}},h={id:"@jupyter-fairly/metadata",requires:[c.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{const o=t.tracker.currentWidget.model,a="openManifestCommand";e.commands.addCommand(a,{label:"Edit Dataset Metadata",isEnabled:()=>!0,isVisible:()=>!0,icon:n.editIcon,execute:()=>{const e="./".concat(o.path).concat("/manifest.yaml");try{o.manager.open(e)}catch(e){(0,s.showErrorMessage)("Error Opening manifest.yalm",e)}}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:101})}},y={id:"@jupyter-fairly/upload",requires:[c.IFileBrowserFactory],autoStart:!0,activate:(e,t)=>{console.log("uploadDatasetPlugin activated!!");const o=t.tracker.currentWidget.model,a="uploadDataset";e.commands.addCommand(a,{label:"Upload Dataset",isEnabled:()=>!0,isVisible:()=>!0,icon:n.fileUploadIcon,execute:async()=>{let e=await s.InputDialog.getItem({title:"Select Data Repository",items:["4TU.ResearchData","Zenodo","Figshare"],okLabel:"Continue"});if(e.button.accept&&e.value){if(!(await s.InputDialog.getBoolean({title:"Do you want to upload the dataset?",label:`Yes, upload metadata and files to ${e.value}`})).button.accept)return void console.log("do not archive");console.log("uploading dataset"),function(e,t){var o;"4TU.ResearchData"===t?o="4tu":"Zenodo"===t?o="zenodo":"Figshare"===t&&(o="figshare");let a=JSON.stringify({directory:"./".concat(e),client:o});const n=new r.PromiseDelegate;d("upload",{method:"POST",body:a}).then((e=>{console.log(e),n.resolve({complete:"complete"})})).catch((e=>{n.reject({failed:"failed"}),(0,s.showErrorMessage)("Error when uploading dataset",e)})),s.Notification.promise(n.promise,{pending:{message:"Uploading dataset...",options:{autoClose:!1}},success:{message:e=>`Dataset upload ${e.complete}.`,options:{autoClose:3e3}},error:{message:()=>"Upload failed."}})}(o.path,e.value)}else console.log("rejected")}});const c="pushDataset";e.commands.addCommand(c,{label:"Push",isEnabled:()=>!0,isVisible:()=>!0,icon:n.redoIcon,execute:async()=>{(await(0,s.showDialog)({title:"Push changes",body:"This will update the data repository using changes made here.",host:document.body,buttons:[s.Dialog.cancelButton(),s.Dialog.okButton({label:"Push"})]})).button.accept?await function(e){let t=JSON.stringify({localdataset:"./".concat(e)});const o=new r.PromiseDelegate;d("push",{method:"PATCH",body:t}).then((e=>{console.log(e),o.resolve({complete:"complete"})})).catch((e=>{o.reject({failed:"failed"}),(0,s.showErrorMessage)("Error when updating remote dataset",e)})),s.Notification.promise(o.promise,{pending:{message:"Pushing dataset to repository ...",options:{autoClose:!1}},success:{message:e=>`Remote dataset update ${e.complete}.`,options:{autoClose:3e3}},error:{message:()=>"Pushing has failed."}})}(o.path):console.log("rejected")}}),e.contextMenu.addItem({command:a,selector:".jp-DirListing-content",rank:104}),e.contextMenu.addItem({command:c,selector:".jp-DirListing-content",rank:105})}},f={id:"@jupyter-fairly/mainmenu",requires:[c.IFileBrowserFactory],autoStart:!0,activate:e=>{console.log("registerTokenPlugin activated!!"),e.commands.addCommand("registerAccessToken",{label:"Add Repository Token",isEnabled:()=>!0,isVisible:()=>!0,icon:n.settingsIcon,execute:async()=>{let e=await s.InputDialog.getItem({title:"Register Access Token. Select Data Repository",items:["4TU.ResearchData","Zenodo","Figshare"],okLabel:"Continue"});var t,o,a;if(e.button.accept&&e.value){let n=await s.InputDialog.getText({title:"Enter Access Token for: ".concat(e.value),placeholder:"Access Token",okLabel:"Add Token"});if(!n.button.accept)return void console.log("operation was canceled by the user");console.log("registering token"),t=e.value,o=n.value,"4TU.ResearchData"===t?a="4tu":"Zenodo"===t?a="zenodo":"Figshare"===t&&(a="figshare"),d("repo-token",{method:"POST",body:JSON.stringify({client:a,token:o})}).then((e=>{console.log(e),s.Notification.success("Access Token registered successfully.",{autoClose:3e3})})).catch((e=>{(0,s.showErrorMessage)("Error when registering access token",e)}))}else console.log("canceled")}}),e.commands.addCommand("fairly:openURL",{label:"Fairly Documentation",caption:"Fairly Documentation",execute:e=>{window.open(`${e.url}`,"_blank")}})}},b=[{id:"@jupyter-fairly:plugin",autoStart:!0,requires:[],optional:[a.ISettingRegistry],activate:e=>{console.log("JupyterLab extension jupyter-fairly is activated!")}},g,h,y,p,f]}}]);