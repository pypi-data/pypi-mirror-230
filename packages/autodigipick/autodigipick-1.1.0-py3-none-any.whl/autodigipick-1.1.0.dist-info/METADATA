Metadata-Version: 2.1
Name: autodigipick
Version: 1.1.0
Summary: Automatically solve Starfield Digipick puzzles with the press of a button.
Author-email: ReggX <dev@reggx.eu>
License: MIT License
        
        Copyright (c) 2023 dev@reggx.eu
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/reggx/autodigipick
Keywords: Starfield,solver,OpenCV
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: Topic :: Games/Entertainment
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: opencv-python
Requires-Dist: keyboard
Requires-Dist: mss
Requires-Dist: numpy
Requires-Dist: pytesseract

# AutoDigipick

Digipick puzzles in Bethesda's Starfield are fun to solve, but they can be tedious to solve manually. This script automates the process of solving them.

Using OpenCV and Tesseract, the script takes a screenshot of the puzzle, identifies the symbols, and solves the puzzle. It then displays the solution in an extra window which you can display on a second monitor for quick reference.


![Example image showing the game on top screen and the solution on secondary monitor](example.jpg)

# Installation

You will need to install [Tesseract](https://tesseract-ocr.github.io/tessdoc/Installation.html) and add the path to the tesseract executable to your PATH environment variable.

If you use the packed executable release of AutoDigipick, then you can start it by double-clicking the executable. 

Otherwise, you will need to install [Python](https://www.python.org/downloads/) and install the dependencies listed in requirements.txt. Then you can run the script with `python autodigipick.py`.

Alternatively, you can install the package with pip (Recommended in a virtual environment or using tools like pipx):

```cmd
pip install autodigipick
```

and use `autodigipick.exe` to run the script. The configuration file will be created in the active directory and you can modify it to your needs.



## Usage

Open autodigipick.toml in a text editor and change the configuration to fit your personal setup.

In particular, you will need to change the following values:

```toml
[capture]
monitor_id = 3  # Change to your monitor's ID
```

```toml
[hotkey]
solve = "F13"  # I use macro keys on my keyboard, but you can use any key you want
exit = "F14"  # it also supports combinations with + like "ctrl+shift+alt+q"
```

```toml
[display]
resolution = [1920, 1080]  # Depending on the size of your secondary monitor, you may need to change this
position = [1000, 2300]  # Change this to a position on your secondary monitor
```

Then just run the script and press the solve hotkey while the puzzle is on screen.
