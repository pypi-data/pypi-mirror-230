[package]
name = "wasmtime"
version= "13.0.0"
authors= ["The Wasmtime Project Developers"]
description = "High-level API to expose the Wasmtime runtime"
documentation = "https://docs.rs/wasmtime"
license = "Apache-2.0 WITH LLVM-exception"
repository = "https://github.com/bytecodealliance/wasmtime"
readme = "README.md"
edition= "2021"
rust-version= "1.71.0"
resolver = '2'

[package.metadata.docs.rs]
rustdoc-args = ["--cfg", "nightlydoc"]
# Docs.rs will use the `component-model` feature for documentation;
# so this feature also passed in to the `cargo doc` invocation in CI.
# See .github/workflows/main.yml
features = ["component-model"]

[dependencies]
wasmtime-runtime = { path = "../wasmtime-runtime" }
wasmtime-environ = { path = "../wasmtime-environ" }
wasmtime-jit = { path = "../wasmtime-jit" }
wasmtime-cache = { optional = true , path = "../wasmtime-cache" }
wasmtime-fiber = { optional = true , path = "../wasmtime-fiber" }
wasmtime-cranelift = { optional = true , path = "../wasmtime-cranelift" }
wasmtime-winch = { optional = true , path = "../wasmtime-winch" }
wasmtime-component-macro = { optional = true , path = "../wasmtime-component-macro" }
wasmtime-component-util = { optional = true , path = "../wasmtime-component-util" }
target-lexicon = { version = "0.12.3", default-features = false, features = ["std"] }
wasmparser = "0.112.0"
wasm-encoder = "0.32.0"
anyhow = "1.0.22"
libc = "0.2"
cfg-if = "1.0"
log = { version = "0.4.8", default-features = false }
wat = { version = "1.0.71", optional = true }
serde = "1.0.188"
serde_derive = "1.0.188"
serde_json = "1.0.80"
bincode = "1.2.1"
indexmap = "2.0.0"
paste = "1.0.3"
psm = "0.1.11"
once_cell = "1.12.0"
rayon = { version = "1.0", optional = true }
object = { version = "0.32", default-features = false, features = ['read_core', 'elf', 'std'] }
async-trait = { version = "0.1.71", optional = true }
encoding_rs = { version = "0.8.31", optional = true }
bumpalo = "3.11.0"
fxprof-processed-profile = "0.6.0"

[target.'cfg(target_os = "windows")'.dependencies]
windows-sys= { version = "0.48.0", features = [
  "Win32_System_Diagnostics_Debug"] }

[features]
default = [
  'async',
  'cache',
  'wat',
  'jitdump',
  'parallel-compilation',
  'cranelift',
  'pooling-allocator',
  'vtune',
]

# An on-by-default feature enabling runtime compilation of WebAssembly modules
# with the Cranelift compiler. Cranelift is the default compilation backend of
# Wasmtime. If disabled then WebAssembly modules can only be created from
# precompiled WebAssembly modules.
cranelift = ["dep:wasmtime-cranelift"]

# Enables support for winch, the WebAssembly baseline compiler. The Winch compiler
# strategy in `Config` will be available. It is currently in active development
# and shouldn't be used in production applications.
winch = ["dep:wasmtime-winch"]

# Enables support for incremental compilation cache to be enabled in `Config`.
incremental-cache = ["wasmtime-cranelift?/incremental-cache"]

# Enables support for the `perf` jitdump profiler
jitdump = ["wasmtime-jit/jitdump"]

# Enables support for the `VTune` profiler
vtune = ["wasmtime-jit/vtune"]

# Enables parallel compilation of WebAssembly code.
parallel-compilation = ["dep:rayon"]

# Enables support for automatic cache configuration to be enabled in `Config`.
cache = ["dep:wasmtime-cache"]

# Enables support for "async stores" as well as defining host functions as
# `async fn` and calling functions asynchronously.
async = [
  "dep:wasmtime-fiber",
  "wasmtime-runtime/async",
  "dep:async-trait",
  "wasmtime-component-macro?/async",
]

# Enables support for the pooling instance allocation strategy
pooling-allocator = ["wasmtime-runtime/pooling-allocator"]

# Enables support for all architectures in Cranelift, allowing
# cross-compilation using the `wasmtime` crate's API, notably the
# `Engine::precompile_module` function.
all-arch = [
  "wasmtime-cranelift?/all-arch",
  "wasmtime-winch?/all-arch",
]

# Enables in-progress support for the component model. Note that this feature is
# in-progress, buggy, and incomplete. This is primarily here for internal
# testing purposes.
component-model = [
  "wasmtime-environ/component-model",
  "wasmtime-cranelift?/component-model",
  "wasmtime-winch?/component-model",
  "wasmtime-runtime/component-model",
  "dep:wasmtime-component-macro",
  "dep:wasmtime-component-util",
  "dep:encoding_rs",
]

wmemcheck = ["wasmtime-runtime/wmemcheck", "wasmtime-cranelift/wmemcheck"]
