# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from scanoss.api.common.v2 import scanoss_common_pb2 as scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2
from scanoss.api.cryptography.v2 import scanoss_cryptography_pb2 as scanoss_dot_api_dot_cryptography_dot_v2_dot_scanoss__cryptography__pb2


class CryptographyStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "SCANOSS Cryptography Service";
    version: "2.0";
    contact: {
    name: "scanoss-cryptography";
    url: "https://github.com/scanoss/crpytography";
    email: "support@scanoss.com";
    };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
    key: "404";
    value: {
    description: "Returned when the resource does not exist.";
    schema: {
    json_schema: {
    type: STRING;
    }
    }
    }
    }
    };


    Expose all of the SCANOSS Cryptography RPCs here
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Echo = channel.unary_unary(
                '/scanoss.api.cryptography.v2.Cryptography/Echo',
                request_serializer=scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.EchoRequest.SerializeToString,
                response_deserializer=scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.EchoResponse.FromString,
                )
        self.GetAlgorithms = channel.unary_unary(
                '/scanoss.api.cryptography.v2.Cryptography/GetAlgorithms',
                request_serializer=scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.PurlRequest.SerializeToString,
                response_deserializer=scanoss_dot_api_dot_cryptography_dot_v2_dot_scanoss__cryptography__pb2.AlgorithmResponse.FromString,
                )


class CryptographyServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "SCANOSS Cryptography Service";
    version: "2.0";
    contact: {
    name: "scanoss-cryptography";
    url: "https://github.com/scanoss/crpytography";
    email: "support@scanoss.com";
    };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
    key: "404";
    value: {
    description: "Returned when the resource does not exist.";
    schema: {
    json_schema: {
    type: STRING;
    }
    }
    }
    }
    };


    Expose all of the SCANOSS Cryptography RPCs here
    """

    def Echo(self, request, context):
        """Standard echo
        option (google.api.http) = {
        post: "/api/v2/cryptography/echo"
        body: "*"
        };
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlgorithms(self, request, context):
        """Get Cryptographic algorithms associated with a list of PURLs
        option (google.api.http) = {
        post: "/api/v2/cryptography/algorithms"
        body: "*"
        };
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CryptographyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.EchoRequest.FromString,
                    response_serializer=scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.EchoResponse.SerializeToString,
            ),
            'GetAlgorithms': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlgorithms,
                    request_deserializer=scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.PurlRequest.FromString,
                    response_serializer=scanoss_dot_api_dot_cryptography_dot_v2_dot_scanoss__cryptography__pb2.AlgorithmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scanoss.api.cryptography.v2.Cryptography', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cryptography(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "SCANOSS Cryptography Service";
    version: "2.0";
    contact: {
    name: "scanoss-cryptography";
    url: "https://github.com/scanoss/crpytography";
    email: "support@scanoss.com";
    };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
    key: "404";
    value: {
    description: "Returned when the resource does not exist.";
    schema: {
    json_schema: {
    type: STRING;
    }
    }
    }
    }
    };


    Expose all of the SCANOSS Cryptography RPCs here
    """

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scanoss.api.cryptography.v2.Cryptography/Echo',
            scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.EchoRequest.SerializeToString,
            scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlgorithms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scanoss.api.cryptography.v2.Cryptography/GetAlgorithms',
            scanoss_dot_api_dot_common_dot_v2_dot_scanoss__common__pb2.PurlRequest.SerializeToString,
            scanoss_dot_api_dot_cryptography_dot_v2_dot_scanoss__cryptography__pb2.AlgorithmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
