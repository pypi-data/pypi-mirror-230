# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['modpoll']

package_data = \
{'': ['*']}

install_requires = \
['paho-mqtt>=1.6.1,<2.0.0',
 'prettytable>=3.6.0,<4.0.0',
 'pymodbus>=3.5.2,<4.0.0',
 'requests>=2.28.1,<3.0.0']

entry_points = \
{'console_scripts': ['modpoll = modpoll:app']}

setup_kwargs = {
    'name': 'modpoll',
    'version': '0.6.1',
    'description': 'A New Command Line Tool for Modbus',
    'long_description': '# modpoll - A New Command Line Tool for Modbus\n\n[![pipeline status](https://gitlab.com/helloysd/modpoll/badges/master/pipeline.svg)](https://gitlab.com/helloysd/modpoll/-/commits/master)\n[![License](https://img.shields.io/pypi/l/modpoll)](https://gitlab.com/helloysd/modpoll/-/blob/master/LICENSE)\n[![Downloads](https://static.pepy.tech/badge/modpoll/week)](https://pepy.tech/project/modpoll)\n\n> Learn more about *modpoll* usage at [documentation](https://helloysd.gitlab.io/modpoll) site.\n\n\n## Motivation\n\nThe initial idea of creating this tool is to help myself debugging new devices during site survey. A site survey usually has limited time and space, working on-site also piles up some pressures. At that time, a portable swiss-knife toolkit is our best friend.\n\nThis program can be easily deployed to Raspberry Pi or similar embedded devices, polling data from modbus devices, users can choose to log data locally or publish to a MQTT broker for further debugging.\n\nThe MQTT broker can be setup on the same Raspberry Pi or on the cloud. Once data successfully published, users can subscribe to a specific MQTT topic to view the data via a smart phone at your fingertip.\n\n\n\n<p align="center">\n  <img src="docs/assets/modpoll-usage.png">\n</p>\n\n\n\nMoreover, you can also run this program continuously on a server as a Modbus-MQTT gateway, i.e. polling from local Modbus devices and forwarding data to a centralized cloud service.\n\nIn fact, *modpoll* helps to bridge between the traditional fieldbus world and the new IoT world.\n\n\n> This program is designed to be a standalone tool, it works out-of-the-box on Linux/macOS/Windows.\n\n> If you are looing for a modbus python library, please consider the following great open source projects, [pymodbus](https://github.com/riptideio/pymodbus) or [minimalmodbus](https://github.com/pyhys/minimalmodbus)\n\n\n\n## Feature\n\n- Support Modbus RTU/TCP/UDP devices\n- Show polling data for local debugging, like a typical modpoll tool\n- Publish polling data to MQTT broker for remote debugging, especially on smart phone\n- Export polling data to local storage for further investigation\n- Provide docker solution for continuous data polling use case\n\n\n\n## Installation\n\nThis program tested on python 3.8+, the package is available in the Python Package Index, users can easily install it using `pip` or `pipx`.\n\n### Using PIP\n\nPython3 is supported by most popular platforms, e.g. Linux/macOS/Windows, on which you can install *modpoll* using `pip` tool,\n\n```bash\npip install modpoll\n```\n\nUpgrade the tool via the following command,\n\n```bash\npip install -U modpoll\n```\n\n### On Windows\n\nIt is recommended to use `pipx` for installing *modpoll* on Windows, refer to [here](https://pypa.github.io/pipx/installation/) for more information about `pipx`.\n\nOnce `pipx` installed, you can run the following command in a Command Prompt termial.\n\n```PowerShell\npipx install modpoll\n```\n\nUpgrade the tool via the following command,\n\n```PowerShell\npipx upgrade modpoll\n```\n\n\n## Quickstart\n\nAs the name tells, *modpoll* is a tool for communicating with Modbus devices, so ideally it makes more sense if you have a real Modbus device on hand for the following test, but it is OK if you don\'t, we provide a virtual Modbus TCP device deployed at `modsim.topmaker.net:502` for your quick testing purpose.\n\nLet\'s start expoloring *modpoll* with *modsim* device, run the following command to get a first glimpse,\n\n```bash\nmodpoll --tcp modsim.topmaker.net --config https://raw.githubusercontent.com/gavinying/modpoll/master/examples/modsim.csv\n```\n\n<p align="center">\n  <img src="docs/assets/screenshot-modpoll.png">\n</p>\n\n\n> the modsim code is also available [here](https://github.com/gavinying/modsim)\n\n\n### Prepare Modbus configure file\n\nThe reason we can magically poll data from the online device *modsim* is because we have already provided the [Modbus configure file](https://raw.githubusercontent.com/gavinying/modpoll/master/examples/modsim.csv) for *modsim* device as following,\n\n```CSV\ndevice,modsim001,1,,\npoll,coil,0,16,BE_BE\nref,coil01-08,0,bool8,rw\nref,coil09-16,1,bool8,rw\npoll,discrete_input,10000,16,BE_BE\nref,di01-08,10000,bool8,rw\nref,di09-16,10001,bool8,rw\npoll,input_register,30000,20,BE_BE\nref,input_reg01,30000,uint16,rw\nref,input_reg02,30001,uint16,rw\nref,input_reg03,30002,uint16,rw\nref,input_reg04,30003,uint16,rw\nref,input_reg05,30004,int16,rw\nref,input_reg06,30005,int16,rw\nref,input_reg07,30006,int16,rw\nref,input_reg08,30007,int16,rw\nref,input_reg09,30008,uint32,rw\nref,input_reg10,30010,uint32,rw\nref,input_reg11,30012,int32,rw\nref,input_reg12,30014,int32,rw\nref,input_reg13,30016,float32,rw\nref,input_reg14,30018,float32,rw\npoll,holding_register,40000,20,BE_BE\nref,holding_reg01,40000,uint16,rw\nref,holding_reg02,40001,uint16,rw\nref,holding_reg03,40002,uint16,rw\nref,holding_reg04,40003,uint16,rw\nref,holding_reg05,40004,int16,rw\nref,holding_reg06,40005,int16,rw\nref,holding_reg07,40006,int16,rw\nref,holding_reg08,40007,int16,rw\nref,holding_reg09,40008,uint32,rw\nref,holding_reg10,40010,uint32,rw\nref,holding_reg11,40012,int32,rw\nref,holding_reg12,40014,int32,rw\nref,holding_reg13,40016,float32,rw\nref,holding_reg14,40018,float32,rw\n```\n\nThis configuration tells *modpoll* to do the following for each poll,\n\n- Read `16` coils from the address starting from `0` and parse the response as two 8-bits boolean values;\n- Read `16` discrete inputs from the address starting from `10000` and parse the response as two 8-bits boolean values;\n- Read `20` input registers from the address starting from `30000` and parse data accordingly;\n- Read `20` holding registers from the address starting from `40000` and parse data accordingly;\n\nIn practical, you usually need to customize a Modbus configuration file for your own device before running *modpoll* tool, which defines the optimal polling patterns and register mappings according to device vendor\'s documents.\n\nYou can also take a look at [contrib](https://github.com/gavinying/modpoll/tree/master/contrib) folder, which collects a few types of device configuration shared by contributors.\n\nThe configuration can be either a local file or a remote public URL resource.\n\n> *Refer to the [documentation](https://helloysd.gitlab.io/modpoll/configure.html) site for more details.*\n\n### Poll local device (modsim)\n\nIf you are blocked by company firewall for online device or prefer a local test, you can launch your own device simulator by running *modsim* locally,\n\n```bash\ndocker run -p 5020:5020 helloysd/modsim\n```\n\nIt will create a virtual Modbus TCP device running at `localhost:5020`, and then you can poll it using *modpoll* tool,\n\n```bash\nmodpoll --tcp localhost --tcp-port 5020 --config https://raw.githubusercontent.com/gavinying/modpoll/master/examples/modsim.csv\n```\n\n> Use `sudo` before the docker command if you want to use the standard port `502`.\n\n```bash\nsudo docker run -p 502:5020 helloysd/modsim\nmodpoll --tcp localhost --config https://raw.githubusercontent.com/gavinying/modpoll/master/examples/modsim.csv\n```\n\n\n### Publish data to MQTT broker\n\nThis is a useful function of this new *modpoll* tool, which provides a simple way to publish collected modbus data to MQTT broker, so users can view data from a smart phone via a MQTT client.\n\nThe following example uses a public MQTT broker `mqtt.eclipseprojects.io` for test purpose. You can also setup your own MQTT broker locally using [mosquitto](https://mosquitto.org/download/).\n\n```bash\nmodpoll --tcp modsim.topmaker.net --config https://raw.githubusercontent.com/gavinying/modpoll/master/examples/modsim.csv --mqtt-host mqtt.eclipseprojects.io\n```\n\nWith successful data polling and publishing, you can subscribe the topic `modpoll/modsim` on the same MQTT broker `mqtt.eclipseprojects.io` to view the collected data.\n\n> The MQTT topic uses `<mqtt_topic_prefix>/<deviceid>` pattern, <mqtt_topic_prefix> is provided by `--mqtt-topic-prefix` argument, the default value is `modpoll/`  and <deviceid> is provided by the Modbus configure file.\n\n\n\n<p align="center">\n  <img src="docs/assets/screencast-modpoll-mqtt.gif">\n</p>\n\n\n\n### Write registers via MQTT publish\n\nThe *modpoll* tool will subscribe to the topic `<mqtt_topic_prefix>/<deviceid>/set` once it successfully connected to MQTT broker, user can write device register(s) via MQTT publish,\n\n- To write a single holding register (address at `40001`)\n\n  ```json\n  {\n    "object_type": "holding_register",\n    "address": 40001,\n    "value": 12\n  }\n  ```\n\n- To write multiple holding registers (address starting from `40001`)\n\n  ```json\n  {\n    "object_type": "holding_register",\n    "address": 40001,\n    "value": [12, 13, 14, 15]\n  }\n  ```\n\n\n\n## Run in docker\n\nA docker image has been provided for user to directly run the program without local installation,\n\n  ```bash\n  docker run helloysd/modpoll\n  ```\n\nIt shows the version of the program by default.\n\nSimilar to the above *modsim* test, we can poll the first 5 holding registers with `docker run`,\n\n  ```bash\n  docker run helloysd/modpoll modpoll --tcp modsim.topmaker.net --config https://raw.githubusercontent.com/gavinying/modpoll/master/examples/modsim.csv\n  ```\n\nIf you want to load a local configure file, you need to mount a local folder onto container volume,\nfor example, if the child folder `examples` contains the config file `modsim.csv`, we can use it via the following command,\n\n  ```bash\n  docker run -v $(pwd)/examples:/app/examples helloysd/modpoll modpoll --tcp modsim.topmaker.net --config /app/examples/modsim.csv\n  ```\n\n\n\n## Basic Usage\n\n- Connect to Modbus TCP device\n\n  ```bash\n  modpoll --tcp 192.168.1.10 --config examples/modsim.csv\n  ```\n\n- Connect to Modbus RTU device\n\n  ```bash\n  modpoll --rtu /dev/ttyUSB0 --rtu-baud 9600 --config contrib/eniwise/scpms6.csv\n  ```\n\n- Connect to Modbus TCP device and publish data to MQTT broker\n\n  ```bash\n  modpoll --tcp modsim.topmaker.net --tcp-port 5020 --config examples/modsim.csv --mqtt-host mqtt.eclipseprojects.io\n  ```\n\n- Connect to Modbus TCP device and export data to local csv file\n\n  ```bash\n  modpoll --tcp modsim.topmaker.net --tcp-port 5020 --config examples/modsim.csv --export data.csv\n  ```\n\n\n\n> *Refer to the [documentation](https://helloysd.gitlab.io/modpoll) site for more details about the configuration and examples.*\n\n\n\n## Credits\n\nThe implementation of this project is heavily inspired by the following two projects:\n- https://github.com/owagner/modbus2mqtt (MIT license)\n- https://github.com/mbs38/spicierModbus2mqtt (MIT license)\n\nThanks to Max Brueggemann and Oliver Wagner for their great work.\n\n\n\n## License\n\nMIT © [helloysd](helloysd@foxmail.com)\n',
    'author': 'Ying Shaodong',
    'author_email': 'helloysd@foxmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://helloysd.gitlab.io/modpoll',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8.2,<4.0',
}


setup(**setup_kwargs)
