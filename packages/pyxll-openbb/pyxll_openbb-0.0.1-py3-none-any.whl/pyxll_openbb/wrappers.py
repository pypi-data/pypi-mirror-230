
'''
AUTOGENERATED CODE - DO NOT EDIT
'''
from openbb import obb
from pyxll import xl_func, xl_arg, xl_return
from pyxll_openbb import obbject
import datetime



@xl_func(category="OpenBB", name="obb.account.login", disable_function_wizard_calc=True)
def obb_account_login(email=None, password=None, pat=None, remember_me=False):
    """Login to hub.

        Parameters
        ----------
        email : Optional[str], optional
            Email address, by default None
        password : Optional[str], optional
            Password, by default None
        pat : Optional[str], optional
            Personal access token, by default None
        remember_me : bool, optional
            Remember me, by default False

        Returns
        -------
        UserSettings
            User settings: profile, credentials, preferences
        """
    return obb.account.login(email, password, pat, remember_me)

@xl_func(category="OpenBB", name="obb.account.logout", disable_function_wizard_calc=True)
def obb_account_logout():
    """Logout from hub.

        Returns
        -------
        UserSettings
            User settings: profile, credentials, preferences
        """
    return obb.account.logout()

@xl_func(category="OpenBB", name="obb.account.refresh", disable_function_wizard_calc=True)
def obb_account_refresh():
    """Refresh user settings.

        Returns
        -------
        UserSettings
            User settings: profile, credentials, preferences
        """
    return obb.account.refresh()

@xl_func(category="OpenBB", name="obb.account.save", disable_function_wizard_calc=True)
def obb_account_save():
    """Save user settings.

        Returns
        -------
        UserSettings
            User settings: profile, credentials, preferences
        """
    return obb.account.save()



@xl_func(category="OpenBB", name="obb.crypto.load", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_crypto_load(symbol, start_date=None, end_date=None, provider=None):
    """Crypto Historical Price.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fmp', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
timeseries : Optional[pydantic.types.NonNegativeInt]
    Number of days to look back. (provider: fmp)
timespan : Literal['minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']
    Timespan of the data. (provider: polygon)
sort : Literal['asc', 'desc']
    Sort order of the data. (provider: polygon)
limit : PositiveInt
    The number of data entries to return. (provider: polygon)
adjusted : bool
    Whether the data is adjusted. (provider: polygon)
multiplier : PositiveInt
    Multiplier of the timespan. (provider: polygon)

Returns
-------
OBBject
    results : List[CryptoHistorical]
        Serializable results.
    provider : Optional[Literal['fmp', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

CryptoHistorical
----------------
date : Optional[datetime]
    The date of the data. 
open : Optional[PositiveFloat]
    The open price of the symbol. 
high : Optional[PositiveFloat]
    The high price of the symbol. 
low : Optional[PositiveFloat]
    The low price of the symbol. 
close : Optional[PositiveFloat]
    The close price of the symbol. 
volume : Optional[PositiveFloat]
    The volume of the symbol. 
vwap : Optional[PositiveFloat]
    Volume Weighted Average Price of the symbol. 
adj_close : Optional[float]
    Adjusted Close Price of the symbol. (provider: fmp)
unadjusted_volume : Optional[float]
    Unadjusted volume of the symbol. (provider: fmp)
change : Optional[float]
    Change in the price of the symbol from the previous day. (provider: fmp)
change_percent : Optional[float]
    Change \% in the price of the symbol. (provider: fmp)
label : Optional[str]
    Human readable format of the date. (provider: fmp)
change_over_time : Optional[float]
    Change \% in the price of the symbol over a period of time. (provider: fmp)
n : Optional[PositiveInt]
    Number of transactions for the symbol in the time period. (provider: polygon)
"""
    return obb.crypto.load(symbol, start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.economy.available_indices", disable_function_wizard_calc=True)
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_economy_available_indices(provider=None):
    """Lists of available indices from a provider.

Parameters
----------
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[AvailableIndices]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

AvailableIndices
----------------
name : Optional[str]
    Name of the index. 
currency : Optional[str]
    Currency the index is traded in. 
stock_exchange : Optional[str]
    Stock exchange where the index is listed. (provider: fmp)
exchange_short_name : Optional[str]
    Short name of the stock exchange where the index is listed. (provider: fmp)
"""
    return obb.economy.available_indices(provider)

@xl_func(category="OpenBB", name="obb.economy.const", disable_function_wizard_calc=True)
@xl_arg("index", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_economy_const(index='dowjones', provider=None):
    """Get the constituents of an index.

Parameters
----------
index : Literal['nasdaq', 'sp500', 'dowjones']
    Index for which we want to fetch the constituents.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[MajorIndicesConstituents]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

MajorIndicesConstituents
------------------------
symbol : Optional[str]
    Symbol to get data for. 
name : Optional[str]
    Name of the constituent company in the index. 
sector : Optional[str]
    Sector the constituent company in the index belongs to. 
sub_sector : Optional[str]
    Sub-sector the constituent company in the index belongs to. 
headquarter : Optional[str]
    Location of the headquarter of the constituent company in the index. 
date_first_added : Union[date, str, NoneType]
    Date the constituent company was added to the index. 
cik : Optional[int]
    Central Index Key of the constituent company in the index. 
founded : Union[date, str]
    Founding year of the constituent company in the index. 
"""
    return obb.economy.const(index, provider)

@xl_func(category="OpenBB", name="obb.economy.cpi", disable_function_wizard_calc=True)
@xl_arg("countries", "str[]")
@xl_arg("units", "str")
@xl_arg("frequency", "str")
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_economy_cpi(countries, units='growth_same', frequency='monthly', harmonized=False, start_date=None, end_date=None, provider=None):
    """CPI.

Parameters
----------
countries : List[Literal['australia', 'austria', 'belgium', 'brazil', 'bulgaria', 'canada', 'chile', 'china', 'croatia', 'cyprus', 'czech_republic', 'denmark', 'estonia', 'euro_area', 'finland', 'france', 'germany', 'greece', 'hungary', 'iceland', 'india', 'indonesia', 'ireland', 'israel', 'italy', 'japan', 'korea', 'latvia', 'lithuania', 'luxembourg', 'malta', 'mexico', 'netherlands', 'new_zealand', 'norway', 'poland', 'portugal', 'romania', 'russian_federation', 'slovak_republic', 'slovakia', 'slovenia', 'south_africa', 'spain', 'sweden', 'switzerland', 'turkey', 'united_kingdom', 'united_states']]
    The country or countries to get data.
units : Literal['growth_previous', 'growth_same', 'index_2015']
    The data units.
frequency : Literal['monthly', 'quarter', 'annual']
    The data time frequency.
harmonized : bool
    Whether you wish to obtain harmonized data.
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.

Returns
-------
OBBject
    results : List[CPI]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

CPI
---
date : Optional[date]
    The date of the data. 
realtime_start : Optional[date]
    Date the data was updated. 
realtime_end : Optional[date]
    Date the data was updated. 
value : Optional[float]
    Value of the data. 
"""
    return obb.economy.cpi(countries, units, frequency, harmonized, start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.economy.index", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_economy_index(symbol, start_date=None, end_date=None, provider=None):
    """Get historical  levels for an index.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fmp', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
timeseries : Optional[pydantic.types.NonNegativeInt]
    Number of days to look back. (provider: fmp)
interval : Literal['1min', '5min', '15min', '30min', '1hour', '4hour', '1day']
    Interval of the data to fetch. (provider: fmp)
timespan : Literal['minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']
    Timespan of the data. (provider: polygon)
sort : Literal['asc', 'desc']
    Sort order of the data. (provider: polygon)
limit : PositiveInt
    The number of data entries to return. (provider: polygon)
adjusted : bool
    Whether the data is adjusted. (provider: polygon)
multiplier : PositiveInt
    Multiplier of the timespan. (provider: polygon)

Returns
-------
OBBject
    results : List[MajorIndicesHistorical]
        Serializable results.
    provider : Optional[Literal['fmp', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

MajorIndicesHistorical
----------------------
date : Optional[datetime]
    The date of the data. 
open : Optional[PositiveFloat]
    The open price of the symbol. 
high : Optional[PositiveFloat]
    The high price of the symbol. 
low : Optional[PositiveFloat]
    The low price of the symbol. 
close : Optional[PositiveFloat]
    The close price of the symbol. 
volume : Optional[NonNegativeInt]
    The volume of the symbol. 
adj_close : Optional[float]
    Adjusted Close Price of the symbol. (provider: fmp)
unadjusted_volume : Optional[float]
    Unadjusted volume of the symbol. (provider: fmp)
change : Optional[float]
    Change in the price of the symbol from the previous day. (provider: fmp)
change_percent : Optional[float]
    Change \% in the price of the symbol. (provider: fmp)
label : Optional[str]
    Human readable format of the date. (provider: fmp)
change_over_time : Optional[float]
    Change \% in the price of the symbol over a period of time. (provider: fmp)
"""
    return obb.economy.index(symbol, start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.economy.risk", disable_function_wizard_calc=True)
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_economy_risk(provider=None):
    """Market Risk Premium.

Parameters
----------
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[RiskPremium]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

RiskPremium
-----------
country : Optional[str]
    Market country. 
continent : Optional[str]
    Continent of the country. 
total_equity_risk_premium : Optional[PositiveFloat]
    Total equity risk premium for the country. 
country_risk_premium : Optional[NonNegativeFloat]
    Country-specific risk premium. 
"""
    return obb.economy.risk(provider)

@xl_func(category="OpenBB", name="obb.fixedincome.ameribor", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_ameribor(start_date=None, end_date=None, provider=None):
    """
    Ameribor (short for the American interbank offered rate) is a benchmark interest rate that reflects the true cost of
    short-term interbank borrowing. This rate is based on transactions in overnight unsecured loans conducted on the
    American Financial Exchange (AFX).

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.
parameter : Literal['overnight', 'term_30', 'term_90', '1_week_term_structure', '1_month_term_structure', '3_month_term_structure', '6_month_term_structure', '1_year_term_structure', '2_year_term_structure', '30_day_ma', '90_day_ma']
    Period of AMERIBOR rate. (provider: fred)

Returns
-------
OBBject
    results : List[AMERIBOR]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

AMERIBOR
--------
date : Optional[date]
    The date of the data. 
rate : Optional[float]
    AMERIBOR rate. 
"""
    return obb.fixedincome.ameribor(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.estr", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_estr(start_date=None, end_date=None, provider=None):
    """
    The euro short-term rate (€STR) reflects the wholesale euro unsecured overnight borrowing costs of banks located in
    the euro area. The €STR is published on each TARGET2 business day based on transactions conducted and settled on
    the previous TARGET2 business day (the reporting date “T”) with a maturity date of T+1 which are deemed to have been
    executed at arm’s length and thus reflect market rates in an unbiased way.

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.
parameter : Literal['volume_weighted_trimmed_mean_rate', 'number_of_transactions', 'number_of_active_banks', 'total_volume', 'share_of_volume_of_the_5_largest_active_banks', 'rate_at_75th_percentile_of_volume', 'rate_at_25th_percentile_of_volume']
    Period of ESTR rate. (provider: fred)

Returns
-------
OBBject
    results : List[ESTR]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

ESTR
----
date : Optional[date]
    The date of the data. 
rate : Optional[float]
    ESTR rate. 
"""
    return obb.fixedincome.estr(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.fed", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_fed(start_date=None, end_date=None, provider=None):
    """
    Get Effective Federal Funds Rate data. A bank rate is the interest rate a nation's central bank charges to its
    domestic banks to borrow money. The rates central banks charge are set to stabilize the economy. In the
    United States, the Federal Reserve System's Board of Governors set the bank rate, also known as the discount rate.
    

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.
parameter : Literal['monthly', 'daily', 'weekly', 'daily_excl_weekend', 'annual', 'biweekly', 'volume']
    Period of FED rate. (provider: fred)

Returns
-------
OBBject
    results : List[FEDFUNDS]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

FEDFUNDS
--------
date : Optional[date]
    The date of the data. 
rate : Optional[float]
    FED rate. 
"""
    return obb.fixedincome.fed(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.iorb", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_iorb(start_date=None, end_date=None, provider=None):
    """
    Get Interest Rate on Reserve Balances data A bank rate is the interest rate a nation's central bank charges to its
    domestic banks to borrow money. The rates central banks charge are set to stabilize the economy. In the
    United States, the Federal Reserve System's Board of Governors set the bank rate, also known as the discount rate.
    

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.

Returns
-------
OBBject
    results : List[IORB]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

IORB
----
date : Optional[date]
    The date of the data. 
rate : Optional[float]
    IORB rate. 
"""
    return obb.fixedincome.iorb(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.projections", disable_function_wizard_calc=True)
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_projections(provider=None):
    """
    Get Effective Federal Funds Rate data. A bank rate is the interest rate a nation's central bank charges to its
    domestic banks to borrow money. The rates central banks charge are set to stabilize the economy. In the
    United States, the Federal Reserve System's Board of Governors set the bank rate, also known as the discount rate.
    

Parameters
----------
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.
long_run : bool
    Flag to show long run projections (provider: fred)

Returns
-------
OBBject
    results : List[PROJECTIONS]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

PROJECTIONS
-----------
date : Optional[date]
    The date of the data. 
range_high : Optional[float]
    High projection of rates. 
central_tendency_high : Optional[float]
    Central tendency of high projection of rates. 
median : Optional[float]
    Median projection of rates. 
range_midpoint : Optional[float]
    Midpoint projection of rates. 
central_tendency_midpoint : Optional[float]
    Central tendency of midpoint projection of rates. 
range_low : Optional[float]
    Low projection of rates. 
central_tendency_low : Optional[float]
    Central tendency of low projection of rates. 
"""
    return obb.fixedincome.projections(provider)

@xl_func(category="OpenBB", name="obb.fixedincome.sofr", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_sofr(start_date=None, end_date=None, provider=None):
    """Get United States yield curve.

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.
period : Literal['overnight', '30_day', '90_day', '180_day', 'index']
    Period of SOFR rate. (provider: fred)

Returns
-------
OBBject
    results : List[SOFR]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

SOFR
----
date : Optional[date]
    The date of the data. 
rate : Optional[float]
    SOFR rate. 
"""
    return obb.fixedincome.sofr(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.sonia", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_sonia(start_date=None, end_date=None, provider=None):
    """
    SONIA (Sterling Overnight Index Average) is an important interest rate benchmark. SONIA is based on actual
    transactions and reflects the average of the interest rates that banks pay to borrow sterling overnight from other
    financial institutions and other institutional investors.

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.
parameter : Literal['rate', 'index', '10th_percentile', '25th_percentile', '75th_percentile', '90th_percentile', 'total_nominal_value']
    Period of SONIA rate. (provider: fred)

Returns
-------
OBBject
    results : List[SONIA]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

SONIA
-----
date : Optional[date]
    The date of the data. 
rate : Optional[float]
    SONIA rate. 
"""
    return obb.fixedincome.sonia(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.treasury", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_treasury(start_date=None, end_date=None, provider=None):
    """Get treasury rates.

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[TreasuryRates]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

TreasuryRates
-------------
date : Optional[date]
    The date of the data. 
month_1 : Optional[float]
    1 month treasury rate. 
month_2 : Optional[float]
    2 month treasury rate. 
month_3 : Optional[float]
    3 month treasury rate. 
month_6 : Optional[float]
    6 month treasury rate. 
year_1 : Optional[float]
    1 year treasury rate. 
year_2 : Optional[float]
    2 year treasury rate. 
year_3 : Optional[float]
    3 year treasury rate. 
year_5 : Optional[float]
    5 year treasury rate. 
year_7 : Optional[float]
    7 year treasury rate. 
year_10 : Optional[float]
    10 year treasury rate. 
year_20 : Optional[float]
    20 year treasury rate. 
year_30 : Optional[float]
    30 year treasury rate. 
"""
    return obb.fixedincome.treasury(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.fixedincome.ycrv", disable_function_wizard_calc=True)
@xl_arg("date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_fixedincome_ycrv(date=None, inflation_adjusted=False, provider=None):
    """Get United States yield curve.

Parameters
----------
date : Optional[datetime.date]
    Date to get Yield Curve data.  Defaults to the most recent FRED entry.
inflation_adjusted : Optional[bool]
    Get inflation adjusted rates.
provider : Optional[Literal['fred']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fred' if there is
    no default.

Returns
-------
OBBject
    results : List[USYieldCurve]
        Serializable results.
    provider : Optional[Literal['fred']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

USYieldCurve
------------
maturity : Optional[float]
    Maturity of the treasury rate in years. 
rate : Optional[float]
    Associated rate given in decimal form (0.05 is 5%) 
"""
    return obb.fixedincome.ycrv(date, inflation_adjusted, provider)

@xl_func(category="OpenBB", name="obb.forex.load", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_forex_load(symbol, start_date=None, end_date=None, provider=None):
    """Forex Intraday Price.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fmp', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
timespan : Literal['minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']
    Timespan of the data. (provider: polygon)
sort : Literal['asc', 'desc']
    Sort order of the data. (provider: polygon)
limit : PositiveInt
    The number of data entries to return. (provider: polygon)
adjusted : bool
    Whether the data is adjusted. (provider: polygon)
multiplier : PositiveInt
    Multiplier of the timespan. (provider: polygon)

Returns
-------
OBBject
    results : List[ForexHistorical]
        Serializable results.
    provider : Optional[Literal['fmp', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

ForexHistorical
---------------
date : Optional[datetime]
    The date of the data. 
open : Optional[PositiveFloat]
    The open price of the symbol. 
high : Optional[PositiveFloat]
    The high price of the symbol. 
low : Optional[PositiveFloat]
    The low price of the symbol. 
close : Optional[PositiveFloat]
    The close price of the symbol. 
volume : Optional[NonNegativeFloat]
    The volume of the symbol. 
vwap : Optional[PositiveFloat]
    Volume Weighted Average Price of the symbol. 
adj_close : Optional[float]
    Adjusted Close Price of the symbol. (provider: fmp)
unadjusted_volume : Optional[float]
    Unadjusted volume of the symbol. (provider: fmp)
change : Optional[float]
    Change in the price of the symbol from the previous day. (provider: fmp)
change_percent : Optional[float]
    Change \% in the price of the symbol. (provider: fmp)
label : Optional[str]
    Human readable format of the date. (provider: fmp)
change_over_time : Optional[float]
    Change \% in the price of the symbol over a period of time. (provider: fmp)
n : Optional[PositiveInt]
    Number of transactions for the symbol in the time period. (provider: polygon)
"""
    return obb.forex.load(symbol, start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.forex.pairs", disable_function_wizard_calc=True)
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_forex_pairs(provider=None):
    """Forex Available Pairs.

Parameters
----------
provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
symbol : Optional[str]
    Symbol of the pair to search. (provider: polygon)
date : Optional[datetime.date]
    A specific date to get data for. (provider: polygon)
search : Optional[str]
    Search for terms within the ticker and/or company name. (provider: polygon)
active : Optional[Literal[True, False]]
    Specify if the tickers returned should be actively traded on the queried date. (provider: polygon)
order : Optional[Literal['asc', 'desc']]
    Order data by ascending or descending. (provider: polygon)
sort : Optional[Literal['ticker', 'name', 'market', 'locale', 'currency_symbol', 'currency_name', 'base_currency_symbol', 'base_currency_name', 'last_updated_utc', 'delisted_utc']]
    Sort field used for ordering. (provider: polygon)
limit : Optional[pydantic.types.PositiveInt]
    The number of data entries to return. (provider: polygon)

Returns
-------
OBBject
    results : List[ForexPairs]
        Serializable results.
    provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

ForexPairs
----------
name : Optional[str]
    Name of the currency pair. 
symbol : Optional[str]
    Symbol of the currency pair. (provider: fmp)
currency : Optional[str]
    Base currency of the currency pair. (provider: fmp)
stock_exchange : Optional[str]
    Stock exchange of the currency pair. (provider: fmp)
exchange_short_name : Optional[str]
    Short name of the stock exchange of the currency pair. (provider: fmp)
code : Optional[str]
    Code of the currency pair. (provider: intrinio)
base_currency : Optional[str]
    ISO 4217 currency code of the base currency. (provider: intrinio)
quote_currency : Optional[str]
    ISO 4217 currency code of the quote currency. (provider: intrinio)
market : Optional[str]
    The name of the trading market. Always 'fx'. (provider: polygon)
locale : Optional[str]
    The locale of the currency pair. (provider: polygon)
currency_symbol : Optional[str]
    The symbol of the quote currency. (provider: polygon)
currency_name : Optional[str]
    The name of the quote currency. (provider: polygon)
base_currency_symbol : Optional[str]
    The symbol of the base currency. (provider: polygon)
base_currency_name : Optional[str]
    The name of the base currency. (provider: polygon)
last_updated_utc : Optional[datetime]
    The last updated timestamp in UTC. (provider: polygon)
delisted_utc : Optional[datetime]
    The delisted timestamp in UTC. (provider: polygon)
"""
    return obb.forex.pairs(provider)

@xl_func(category="OpenBB", name="obb.news.globalnews", disable_function_wizard_calc=True)
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_news_globalnews(page=0, provider=None):
    """Global News.

Parameters
----------
page : NonNegativeInt
    Page of the global news.
provider : Optional[Literal['benzinga', 'fmp', 'intrinio']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'benzinga' if there is
    no default.
page_size : int
    Number of results to return per page. (provider: benzinga)
display_output : Literal['headline', 'summary', 'full', 'all']
    Type of data to return. (provider: benzinga)
date : Optional[datetime.datetime]
    Date of the news to retrieve. (provider: benzinga)
date_from : Optional[datetime.datetime]
    Start date of the news to retrieve. (provider: benzinga)
date_to : Optional[datetime.datetime]
    End date of the news to retrieve. (provider: benzinga)
updated_since : Optional[int]
    Number of seconds since the news was updated. (provider: benzinga)
published_since : Optional[int]
    Number of seconds since the news was published. (provider: benzinga)
sort : Optional[Literal['published_at', 'updated_at', 'title', 'author', 'channel', 'ticker', 'topic', 'content_type']]
    Order in which to sort the news.  (provider: benzinga)
isin : Optional[str]
    The ISIN of the news to retrieve. (provider: benzinga)
cusip : Optional[str]
    The CUSIP of the news to retrieve. (provider: benzinga)
tickers : Optional[str]
    Tickers of the news to retrieve. (provider: benzinga)
channels : Optional[str]
    Channels of the news to retrieve. (provider: benzinga)
topics : Optional[str]
    Topics of the news to retrieve. (provider: benzinga)
authors : Optional[str]
    Authors of the news to retrieve. (provider: benzinga)
content_types : Optional[str]
    Content types of the news to retrieve. (provider: benzinga)
next_page : str
    Token to get the next page of data from a previous API call. (provider: intrinio)
limit : Optional[int]
    The number of data entries to return. (provider: intrinio)
all_pages : Optional[bool]
    Returns all pages of data from the API call at once. (provider: intrinio)

Returns
-------
OBBject
    results : List[GlobalNews]
        Serializable results.
    provider : Optional[Literal['benzinga', 'fmp', 'intrinio']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

GlobalNews
----------
date : Optional[datetime]
    Published date of the news. 
title : Optional[str]
    Title of the news. 
text : Optional[str]
    Text/body of the news. 
url : Optional[str]
    URL of the news. 
images : Optional[List[BenzingaImage]]
    Images associated with the news. (provider: benzinga)
channels : Optional[List[str]]
    Channels associated with the news. (provider: benzinga)
stocks : Optional[List[str]]
    Stocks associated with the news. (provider: benzinga)
tags : Optional[List[str]]
    Tags associated with the news. (provider: benzinga)
teaser : Optional[str]
    Teaser of the news. (provider: benzinga)
site : Optional[str]
    Site of the news. (provider: fmp)
id : Optional[str]
    Intrinio ID for the news article. (provider: intrinio)
company : Optional[Mapping[str, Any]]
    Company details related to the news article. (provider: intrinio)
"""
    return obb.news.globalnews(page, provider)

@xl_func(category="OpenBB", name="obb.stocks.ca.peers", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_ca_peers(symbol, provider=None):
    """Company peers.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[StockPeers]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockPeers
----------
symbol : Optional[str]
    Symbol representing the entity requested in the data. 
peers_list : Optional[List[str]]
    A list of stock peers based on sector, exchange and market cap. 
"""
    return obb.stocks.ca.peers(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.dd.sec", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("type", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_dd_sec(symbol, type='10-K', page=0, limit=100, provider=None):
    """SEC Filings.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
type : Literal['1', '1-A', '1-E', '1-K', '1-N', '1-SA', '1-U', '1-Z', '10', '10-D', '10-K', '10-M', '10-Q', '11-K', '12b-25', '13F', '13H', '144', '15', '15F', '17-H', '18', '18-K', '19b-4', '19b-4(e)', '19b-7', '2-E', '20-F', '24F-2', '25', '3', '4', '40-F', '5', '6-K', '7-M', '8-A', '8-K', '8-M', '9-M', 'ABS-15G', 'ABS-EE', 'ABS DD-15E', 'ADV', 'ADV-E', 'ADV-H', 'ADV-NR', 'ADV-W', 'ATS', 'ATS-N', 'ATS-R', 'BD', 'BD-N', 'BDW', 'C', 'CA-1', 'CB', 'CFPORTAL', 'CRS', 'CUSTODY', 'D', 'F-1', 'F-10', 'F-3', 'F-4', 'F-6', 'F-7', 'F-8', 'F-80', 'F-N', 'F-X', 'ID', 'MA', 'MA-I', 'MA-NR', 'MA-W', 'MSD', 'MSDW', 'N-14', 'N-17D-1', 'N-17f-1', 'N-17f-2', 'N-18f-1', 'N-1A', 'N-2', 'N-23c-3', 'N-27D-1', 'N-3', 'N-4', 'N-5', 'N-54A', 'N-54C', 'N-6', 'N-6EI-1', 'N-6F', 'N-8A', 'N-8B-2', 'N-8B-4', 'N-8F', 'N-CEN']
    Type of the SEC filing form.
page : Optional[int]
    Page number of the results.
limit : Optional[int]
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[SECFilings]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

SECFilings
----------
symbol : Optional[str]
    Symbol to get data for. 
filling_date : Optional[datetime]
    Filling date of the SEC filing. 
accepted_date : Optional[datetime]
    Accepted date of the SEC filing. 
cik : Optional[str]
    CIK of the SEC filing. 
type : Optional[str]
    Type of the SEC filing. 
link : Optional[str]
    Link of the SEC filing. 
final_link : Optional[str]
    Final link of the SEC filing. 
"""
    return obb.stocks.dd.sec(symbol, type, page, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.balance", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_balance(symbol, period='annual', limit=12, provider=None):
    """Balance Sheet.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
limit : Optional[pydantic.types.NonNegativeInt]
    The number of data entries to return.
provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
type : Literal['reported', 'standardized']
    Type of the statement to be fetched. (provider: intrinio)
year : Optional[int]
    Year of the statement to be fetched. (provider: intrinio)
company_name : Optional[str]
    Name of the company. (provider: polygon)
company_name_search : Optional[str]
    Name of the company to search. (provider: polygon)
sic : Optional[str]
    The Standard Industrial Classification (SIC) of the company. (provider: polygon)
filing_date : Optional[datetime.date]
    Filing date of the financial statement. (provider: polygon)
filing_date_lt : Optional[datetime.date]
    Filing date less than the given date. (provider: polygon)
filing_date_lte : Optional[datetime.date]
    Filing date less than or equal to the given date. (provider: polygon)
filing_date_gt : Optional[datetime.date]
    Filing date greater than the given date. (provider: polygon)
filing_date_gte : Optional[datetime.date]
    Filing date greater than or equal to the given date. (provider: polygon)
period_of_report_date : Optional[datetime.date]
    Period of report date of the financial statement. (provider: polygon)
period_of_report_date_lt : Optional[datetime.date]
    Period of report date less than the given date. (provider: polygon)
period_of_report_date_lte : Optional[datetime.date]
    Period of report date less than or equal to the given date. (provider: polygon)
period_of_report_date_gt : Optional[datetime.date]
    Period of report date greater than the given date. (provider: polygon)
period_of_report_date_gte : Optional[datetime.date]
    Period of report date greater than or equal to the given date. (provider: polygon)
include_sources : Optional[bool]
    Whether to include the sources of the financial statement. (provider: polygon)
order : Optional[Literal['asc', 'desc']]
    Order of the financial statement. (provider: polygon)
sort : Optional[Literal['filing_date', 'period_of_report_date']]
    Sort of the financial statement. (provider: polygon)

Returns
-------
OBBject
    results : List[BalanceSheet]
        Serializable results.
    provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

BalanceSheet
------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    Date of the fetched statement. 
period : Optional[str]
    Reporting period of the statement. 
cik : Optional[int]
    Central Index Key (CIK) of the company. 
cash_and_cash_equivalents : Optional[int]
    Cash and cash equivalents 
short_term_investments : Optional[int]
    Short-term investments 
net_receivables : Optional[int]
    Receivables, net 
inventory : Optional[int]
    Inventory 
other_current_assets : Optional[int]
    Other current assets 
total_current_assets : Optional[int]
    Total current assets 
marketable_securities : Optional[int]
    Marketable securities 
property_plant_equipment_net : Optional[int]
    Property, plant and equipment, net 
goodwill : Optional[int]
    Goodwill 
intangible_assets : Optional[int]
    Intangible assets 
tax_assets : Optional[int]
    Accrued income taxes 
other_non_current_assets : Optional[int]
    Other non-current assets 
total_non_current_assets : Optional[int]
    Total non-current assets 
other_assets : Optional[int]
    Other assets 
total_assets : Optional[int]
    Total assets 
account_payables : Optional[int]
    Accounts payables 
short_term_debt : Optional[int]
    Short-term borrowings, Long-term debt due within one year, Operating lease obligations due within one year, Finance lease obligations due within one year 
tax_payables : Optional[int]
    Accrued income taxes 
deferred_revenue : Optional[int]
    Accrued income taxes, other deferred revenue 
other_current_liabilities : Optional[int]
    Other current liabilities 
total_current_liabilities : Optional[int]
    Total current liabilities 
long_term_debt : Optional[int]
    Long-term debt, Operating lease obligations, Long-term finance lease obligations 
deferred_revenue_non_current : Optional[int]
    Deferred revenue, non-current 
deferred_tax_liabilities_non_current : Optional[int]
    Deferred income taxes and other 
other_non_current_liabilities : Optional[int]
    Deferred income taxes and other 
total_non_current_liabilities : Optional[int]
    Total non-current liabilities 
other_liabilities : Optional[int]
    Other liabilities 
total_liabilities : Optional[int]
    Total liabilities 
preferred_stock : Optional[int]
    Preferred stock 
common_stock : Optional[int]
    Common stock 
retained_earnings : Optional[int]
    Retained earnings 
accumulated_other_comprehensive_income_loss : Optional[int]
    Accumulated other comprehensive income (loss) 
other_shareholder_equity : Optional[int]
    Other shareholder's equity 
total_shareholder_equity : Optional[int]
    Total shareholder's equity 
total_equity : Optional[int]
    Total equity 
total_liabilities_and_shareholders_equity : Optional[int]
    Total liabilities and shareholder's equity 
minority_interest : Optional[int]
    Minority interest 
total_liabilities_and_total_equity : Optional[int]
    Total liabilities and total equity 
reported_currency : Optional[str]
    Reported currency in the statement. (provider: fmp)
filling_date : Optional[date]
    Filling date. (provider: fmp)
accepted_date : Optional[datetime]
    Accepted date. (provider: fmp)
calendar_year : Optional[int]
    Calendar year. (provider: fmp)
cash_and_short_term_investments : Optional[int]
    Cash and short term investments (provider: fmp)
goodwill_and_intangible_assets : Optional[int]
    Goodwill and Intangible Assets (provider: fmp)
capital_lease_obligations : Optional[int]
    Capital lease obligations (provider: fmp)
total_investments : Optional[int]
    Total investments (provider: fmp)
total_debt : Optional[int]
    Total debt (provider: fmp)
net_debt : Optional[int]
    Net debt (provider: fmp)
link : Optional[str]
    Link to the statement. (provider: fmp)
final_link : Optional[str]
    Link to the final statement. (provider: fmp)
"""
    return obb.stocks.fa.balance(symbol, period, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.balance_growth", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_balance_growth(symbol, limit=10, provider=None):
    """Balance Sheet Statement Growth.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
limit : int
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[BalanceSheetGrowth]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

BalanceSheetGrowth
------------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    The date of the data. 
period : Optional[str]
    Reporting period. 
growth_cash_and_cash_equivalents : Optional[float]
    Growth rate of cash and cash equivalents. 
growth_short_term_investments : Optional[float]
    Growth rate of short-term investments. 
growth_cash_and_short_term_investments : Optional[float]
    Growth rate of cash and short-term investments. 
growth_net_receivables : Optional[float]
    Growth rate of net receivables. 
growth_inventory : Optional[float]
    Growth rate of inventory. 
growth_other_current_assets : Optional[float]
    Growth rate of other current assets. 
growth_total_current_assets : Optional[float]
    Growth rate of total current assets. 
growth_property_plant_equipment_net : Optional[float]
    Growth rate of net property, plant, and equipment. 
growth_goodwill : Optional[float]
    Growth rate of goodwill. 
growth_intangible_assets : Optional[float]
    Growth rate of intangible assets. 
growth_goodwill_and_intangible_assets : Optional[float]
    Growth rate of goodwill and intangible assets. 
growth_long_term_investments : Optional[float]
    Growth rate of long-term investments. 
growth_tax_assets : Optional[float]
    Growth rate of tax assets. 
growth_other_non_current_assets : Optional[float]
    Growth rate of other non-current assets. 
growth_total_non_current_assets : Optional[float]
    Growth rate of total non-current assets. 
growth_other_assets : Optional[float]
    Growth rate of other assets. 
growth_total_assets : Optional[float]
    Growth rate of total assets. 
growth_account_payables : Optional[float]
    Growth rate of accounts payable. 
growth_short_term_debt : Optional[float]
    Growth rate of short-term debt. 
growth_tax_payables : Optional[float]
    Growth rate of tax payables. 
growth_deferred_revenue : Optional[float]
    Growth rate of deferred revenue. 
growth_other_current_liabilities : Optional[float]
    Growth rate of other current liabilities. 
growth_total_current_liabilities : Optional[float]
    Growth rate of total current liabilities. 
growth_long_term_debt : Optional[float]
    Growth rate of long-term debt. 
growth_deferred_revenue_non_current : Optional[float]
    Growth rate of non-current deferred revenue. 
growth_deferrred_tax_liabilities_non_current : Optional[float]
    Growth rate of non-current deferred tax liabilities. 
growth_other_non_current_liabilities : Optional[float]
    Growth rate of other non-current liabilities. 
growth_total_non_current_liabilities : Optional[float]
    Growth rate of total non-current liabilities. 
growth_other_liabilities : Optional[float]
    Growth rate of other liabilities. 
growth_total_liabilities : Optional[float]
    Growth rate of total liabilities. 
growth_common_stock : Optional[float]
    Growth rate of common stock. 
growth_retained_earnings : Optional[float]
    Growth rate of retained earnings. 
growth_accumulated_other_comprehensive_income_loss : Optional[float]
    Growth rate of accumulated other comprehensive income/loss. 
growth_othertotal_stockholders_equity : Optional[float]
    Growth rate of other total stockholders' equity. 
growth_total_stockholders_equity : Optional[float]
    Growth rate of total stockholders' equity. 
growth_total_liabilities_and_stockholders_equity : Optional[float]
    Growth rate of total liabilities and stockholders' equity. 
growth_total_investments : Optional[float]
    Growth rate of total investments. 
growth_total_debt : Optional[float]
    Growth rate of total debt. 
growth_net_debt : Optional[float]
    Growth rate of net debt. 
"""
    return obb.stocks.fa.balance_growth(symbol, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.cal", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_cal(start_date=None, end_date=None, provider=None):
    """Show Dividend Calendar for a given start and end dates.

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[DividendCalendar]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

DividendCalendar
----------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    The date of the data. 
label : Optional[str]
    Date in human readable form in the calendar. 
adj_dividend : Optional[NonNegativeFloat]
    Adjusted dividend on a date in the calendar. 
dividend : Optional[NonNegativeFloat]
    Dividend amount in the calendar. 
record_date : Optional[date]
    Record date of the dividend in the calendar. 
payment_date : Optional[date]
    Payment date of the dividend in the calendar. 
declaration_date : Optional[date]
    Declaration date of the dividend in the calendar. 
"""
    return obb.stocks.fa.cal(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.cash", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_cash(symbol, period='annual', limit=12, provider=None):
    """Cash Flow Statement.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
limit : Optional[pydantic.types.NonNegativeInt]
    The number of data entries to return.
provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
type : Literal['reported', 'standardized']
    Type of the statement to be fetched. (provider: intrinio)
year : Optional[int]
    Year of the statement to be fetched. (provider: intrinio)
company_name : Optional[str]
    Name of the company. (provider: polygon)
company_name_search : Optional[str]
    Name of the company to search. (provider: polygon)
sic : Optional[str]
    The Standard Industrial Classification (SIC) of the company. (provider: polygon)
filing_date : Optional[datetime.date]
    Filing date of the financial statement. (provider: polygon)
filing_date_lt : Optional[datetime.date]
    Filing date less than the given date. (provider: polygon)
filing_date_lte : Optional[datetime.date]
    Filing date less than or equal to the given date. (provider: polygon)
filing_date_gt : Optional[datetime.date]
    Filing date greater than the given date. (provider: polygon)
filing_date_gte : Optional[datetime.date]
    Filing date greater than or equal to the given date. (provider: polygon)
period_of_report_date : Optional[datetime.date]
    Period of report date of the financial statement. (provider: polygon)
period_of_report_date_lt : Optional[datetime.date]
    Period of report date less than the given date. (provider: polygon)
period_of_report_date_lte : Optional[datetime.date]
    Period of report date less than or equal to the given date. (provider: polygon)
period_of_report_date_gt : Optional[datetime.date]
    Period of report date greater than the given date. (provider: polygon)
period_of_report_date_gte : Optional[datetime.date]
    Period of report date greater than or equal to the given date. (provider: polygon)
include_sources : Optional[bool]
    Whether to include the sources of the financial statement. (provider: polygon)
order : Optional[Literal['asc', 'desc']]
    Order of the financial statement. (provider: polygon)
sort : Optional[Literal['filing_date', 'period_of_report_date']]
    Sort of the financial statement. (provider: polygon)

Returns
-------
OBBject
    results : List[CashFlowStatement]
        Serializable results.
    provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

CashFlowStatement
-----------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    Date of the fetched statement. 
period : Optional[str]
    Reporting period of the statement. 
cik : Optional[int]
    Central Index Key (CIK) of the company. 
net_income : Optional[int]
    Net income. 
depreciation_and_amortization : Optional[int]
    Depreciation and amortization. 
stock_based_compensation : Optional[int]
    Stock based compensation. 
deferred_income_tax : Optional[int]
    Deferred income tax. 
other_non_cash_items : Optional[int]
    Other non-cash items. 
changes_in_operating_assets_and_liabilities : Optional[int]
    Changes in operating assets and liabilities. 
accounts_receivables : Optional[int]
    Accounts receivables. 
inventory : Optional[int]
    Inventory. 
vendor_non_trade_receivables : Optional[int]
    Vendor non-trade receivables. 
other_current_and_non_current_assets : Optional[int]
    Other current and non-current assets. 
accounts_payables : Optional[int]
    Accounts payables. 
deferred_revenue : Optional[int]
    Deferred revenue. 
other_current_and_non_current_liabilities : Optional[int]
    Other current and non-current liabilities. 
net_cash_flow_from_operating_activities : Optional[int]
    Net cash flow from operating activities. 
purchases_of_marketable_securities : Optional[int]
    Purchases of investments. 
sales_from_maturities_of_investments : Optional[int]
    Sales and maturities of investments. 
investments_in_property_plant_and_equipment : Optional[int]
    Investments in property, plant, and equipment. 
payments_from_acquisitions : Optional[int]
    Acquisitions, net of cash acquired, and other 
other_investing_activities : Optional[int]
    Other investing activities 
net_cash_flow_from_investing_activities : Optional[int]
    Net cash used for investing activities. 
taxes_paid_on_net_share_settlement : Optional[int]
    Taxes paid on net share settlement of equity awards. 
dividends_paid : Optional[int]
    Payments for dividends and dividend equivalents 
common_stock_repurchased : Optional[int]
    Payments related to repurchase of common stock 
debt_proceeds : Optional[int]
    Proceeds from issuance of term debt 
debt_repayment : Optional[int]
    Payments of long-term debt 
other_financing_activities : Optional[int]
    Other financing activities, net 
net_cash_flow_from_financing_activities : Optional[int]
    Net cash flow from financing activities. 
net_change_in_cash : Optional[int]
    Net increase (decrease) in cash, cash equivalents, and restricted cash 
reported_currency : Optional[str]
    Reported currency in the statement. (provider: fmp)
filling_date : Optional[date]
    Filling date. (provider: fmp)
accepted_date : Optional[datetime]
    Accepted date. (provider: fmp)
calendar_year : Optional[int]
    Calendar year. (provider: fmp)
change_in_working_capital : Optional[int]
    Change in working capital. (provider: fmp)
other_working_capital : Optional[int]
    Other working capital. (provider: fmp)
common_stock_issued : Optional[int]
    Common stock issued. (provider: fmp)
effect_of_forex_changes_on_cash : Optional[int]
    Effect of forex changes on cash. (provider: fmp)
cash_at_beginning_of_period : Optional[int]
    Cash at beginning of period. (provider: fmp)
cash_at_end_of_period : Optional[int]
    Cash, cash equivalents, and restricted cash at end of period (provider: fmp)
operating_cash_flow : Optional[int]
    Operating cash flow. (provider: fmp)
capital_expenditure : Optional[int]
    Capital expenditure. (provider: fmp)
free_cash_flow : Optional[int]
    Free cash flow. (provider: fmp)
link : Optional[str]
    Link to the statement. (provider: fmp)
final_link : Optional[str]
    Link to the final statement. (provider: fmp)
"""
    return obb.stocks.fa.cash(symbol, period, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.cash_growth", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_cash_growth(symbol, limit=10, provider=None):
    """Cash Flow Statement Growth.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
limit : int
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[CashFlowStatementGrowth]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

CashFlowStatementGrowth
-----------------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    The date of the data. 
period : Optional[str]
    Period the statement is returned for. 
growth_net_income : Optional[float]
    Growth rate of net income. 
growth_depreciation_and_amortization : Optional[float]
    Growth rate of depreciation and amortization. 
growth_deferred_income_tax : Optional[float]
    Growth rate of deferred income tax. 
growth_stock_based_compensation : Optional[float]
    Growth rate of stock-based compensation. 
growth_change_in_working_capital : Optional[float]
    Growth rate of change in working capital. 
growth_accounts_receivables : Optional[float]
    Growth rate of accounts receivables. 
growth_inventory : Optional[float]
    Growth rate of inventory. 
growth_accounts_payables : Optional[float]
    Growth rate of accounts payables. 
growth_other_working_capital : Optional[float]
    Growth rate of other working capital. 
growth_other_non_cash_items : Optional[float]
    Growth rate of other non-cash items. 
growth_net_cash_provided_by_operating_activities : Optional[float]
    Growth rate of net cash provided by operating activities. 
growth_investments_in_property_plant_and_equipment : Optional[float]
    Growth rate of investments in property, plant, and equipment. 
growth_acquisitions_net : Optional[float]
    Growth rate of net acquisitions. 
growth_purchases_of_investments : Optional[float]
    Growth rate of purchases of investments. 
growth_sales_maturities_of_investments : Optional[float]
    Growth rate of sales maturities of investments. 
growth_other_investing_activities : Optional[float]
    Growth rate of other investing activities. 
growth_net_cash_used_for_investing_activities : Optional[float]
    Growth rate of net cash used for investing activities. 
growth_debt_repayment : Optional[float]
    Growth rate of debt repayment. 
growth_common_stock_issued : Optional[float]
    Growth rate of common stock issued. 
growth_common_stock_repurchased : Optional[float]
    Growth rate of common stock repurchased. 
growth_dividends_paid : Optional[float]
    Growth rate of dividends paid. 
growth_other_financing_activities : Optional[float]
    Growth rate of other financing activities. 
growth_net_cash_used_provided_by_financing_activities : Optional[float]
    Growth rate of net cash used/provided by financing activities. 
growth_effect_of_forex_changes_on_cash : Optional[float]
    Growth rate of the effect of foreign exchange changes on cash. 
growth_net_change_in_cash : Optional[float]
    Growth rate of net change in cash. 
growth_cash_at_end_of_period : Optional[float]
    Growth rate of cash at the end of the period. 
growth_cash_at_beginning_of_period : Optional[float]
    Growth rate of cash at the beginning of the period. 
growth_operating_cash_flow : Optional[float]
    Growth rate of operating cash flow. 
growth_capital_expenditure : Optional[float]
    Growth rate of capital expenditure. 
growth_free_cash_flow : Optional[float]
    Growth rate of free cash flow. 
"""
    return obb.stocks.fa.cash_growth(symbol, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.comp", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_comp(symbol, provider=None):
    """Executive Compensation.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[ExecutiveCompensation]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

ExecutiveCompensation
---------------------
symbol : Optional[str]
    Symbol to get data for. 
cik : Optional[str]
    Central Index Key (CIK) of the company. 
filing_date : Optional[date]
    Date of the filing. 
accepted_date : Optional[datetime]
    Date the filing was accepted. 
name_and_position : Optional[str]
    Name and position of the executive. 
year : Optional[int]
    Year of the compensation. 
salary : Optional[PositiveFloat]
    Salary of the executive. 
bonus : Optional[NonNegativeFloat]
    Bonus of the executive. 
stock_award : Optional[NonNegativeFloat]
    Stock award of the executive. 
incentive_plan_compensation : Optional[NonNegativeFloat]
    Incentive plan compensation of the executive. 
all_other_compensation : Optional[NonNegativeFloat]
    All other compensation of the executive. 
total : Optional[PositiveFloat]
    Total compensation of the executive. 
url : Optional[str]
    URL of the filing data. 
"""
    return obb.stocks.fa.comp(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.comsplit", disable_function_wizard_calc=True)
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_comsplit(start_date=None, end_date=None, provider=None):
    """Stock Split Calendar.

Parameters
----------
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[StockSplitCalendar]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockSplitCalendar
------------------
date : Optional[date]
    Date of the stock splits. 
label : Optional[str]
    Label of the stock splits. 
symbol : Optional[str]
    Symbol of the company. 
numerator : Optional[float]
    Numerator of the stock splits. 
denominator : Optional[float]
    Denominator of the stock splits. 
"""
    return obb.stocks.fa.comsplit(start_date, end_date, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.divs", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_divs(symbol, provider=None):
    """Historical Dividends.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[HistoricalDividends]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

HistoricalDividends
-------------------
date : Optional[date]
    Date of the historical dividends. 
label : Optional[str]
    Label of the historical dividends. 
adj_dividend : Optional[float]
    Adjusted dividend of the historical dividends. 
dividend : Optional[float]
    Dividend of the historical dividends. 
record_date : Optional[date]
    Record date of the historical dividends. 
payment_date : Optional[date]
    Payment date of the historical dividends. 
declaration_date : Optional[date]
    Declaration date of the historical dividends. 
"""
    return obb.stocks.fa.divs(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.earning", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_earning(symbol, limit=50, provider=None):
    """Earnings Calendar.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
limit : Optional[int]
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[EarningsCalendar]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

EarningsCalendar
----------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    The date of the data. 
eps : Optional[NonNegativeFloat]
    EPS of the earnings calendar. 
eps_estimated : Optional[NonNegativeFloat]
    Estimated EPS of the earnings calendar. 
time : Optional[str]
    Time of the earnings calendar. 
revenue : Optional[int]
    Revenue of the earnings calendar. 
revenue_estimated : Optional[int]
    Estimated revenue of the earnings calendar. 
updated_from_date : Optional[date]
    Updated from date of the earnings calendar. 
fiscal_date_ending : Optional[date]
    Fiscal date ending of the earnings calendar. 
"""
    return obb.stocks.fa.earning(symbol, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.emp", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_emp(symbol, provider=None):
    """Number of Employees.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[HistoricalEmployees]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

HistoricalEmployees
-------------------
symbol : Optional[str]
    Symbol to get data for. 
cik : Optional[int]
    CIK of the company to retrieve the historical employees of. 
acceptance_time : Optional[datetime]
    Time of acceptance of the company employee. 
period_of_report : Optional[date]
    Date of reporting of the company employee. 
company_name : Optional[str]
    Registered name of the company to retrieve the historical employees of. 
form_type : Optional[str]
    Form type of the company employee. 
filing_date : Optional[date]
    Filing date of the company employee 
employee_count : Optional[int]
    Count of employees of the company. 
source : Optional[str]
    Source URL which retrieves this data for the company. 
"""
    return obb.stocks.fa.emp(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.est", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_est(symbol, period='annual', limit=30, provider=None):
    """Analyst Estimates.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
limit : int
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[AnalystEstimates]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

AnalystEstimates
----------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    A specific date to get data for. 
estimated_revenue_low : Optional[int]
    Estimated revenue low. 
estimated_revenue_high : Optional[int]
    Estimated revenue high. 
estimated_revenue_avg : Optional[int]
    Estimated revenue average. 
estimated_ebitda_low : Optional[int]
    Estimated EBITDA low. 
estimated_ebitda_high : Optional[int]
    Estimated EBITDA high. 
estimated_ebitda_avg : Optional[int]
    Estimated EBITDA average. 
estimated_ebit_low : Optional[int]
    Estimated EBIT low. 
estimated_ebit_high : Optional[int]
    Estimated EBIT high. 
estimated_ebit_avg : Optional[int]
    Estimated EBIT average. 
estimated_net_income_low : Optional[int]
    Estimated net income low. 
estimated_net_income_high : Optional[int]
    Estimated net income high. 
estimated_net_income_avg : Optional[int]
    Estimated net income average. 
estimated_sga_expense_low : Optional[int]
    Estimated SGA expense low. 
estimated_sga_expense_high : Optional[int]
    Estimated SGA expense high. 
estimated_sga_expense_avg : Optional[int]
    Estimated SGA expense average. 
estimated_eps_avg : Optional[float]
    Estimated EPS average. 
estimated_eps_high : Optional[float]
    Estimated EPS high. 
estimated_eps_low : Optional[float]
    Estimated EPS low. 
number_analyst_estimated_revenue : Optional[int]
    Number of analysts who estimated revenue. 
number_analysts_estimated_eps : Optional[int]
    Number of analysts who estimated EPS. 
"""
    return obb.stocks.fa.est(symbol, period, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.income", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_income(symbol, period='annual', limit=12, provider=None):
    """Income Statement.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
limit : Optional[pydantic.types.NonNegativeInt]
    The number of data entries to return.
provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
type : Literal['reported', 'standardized']
    Type of the statement to be fetched. (provider: intrinio)
year : Optional[int]
    Year of the statement to be fetched. (provider: intrinio)
company_name : Optional[str]
    Name of the company. (provider: polygon)
company_name_search : Optional[str]
    Name of the company to search. (provider: polygon)
sic : Optional[str]
    The Standard Industrial Classification (SIC) of the company. (provider: polygon)
filing_date : Optional[datetime.date]
    Filing date of the financial statement. (provider: polygon)
filing_date_lt : Optional[datetime.date]
    Filing date less than the given date. (provider: polygon)
filing_date_lte : Optional[datetime.date]
    Filing date less than or equal to the given date. (provider: polygon)
filing_date_gt : Optional[datetime.date]
    Filing date greater than the given date. (provider: polygon)
filing_date_gte : Optional[datetime.date]
    Filing date greater than or equal to the given date. (provider: polygon)
period_of_report_date : Optional[datetime.date]
    Period of report date of the financial statement. (provider: polygon)
period_of_report_date_lt : Optional[datetime.date]
    Period of report date less than the given date. (provider: polygon)
period_of_report_date_lte : Optional[datetime.date]
    Period of report date less than or equal to the given date. (provider: polygon)
period_of_report_date_gt : Optional[datetime.date]
    Period of report date greater than the given date. (provider: polygon)
period_of_report_date_gte : Optional[datetime.date]
    Period of report date greater than or equal to the given date. (provider: polygon)
include_sources : Optional[bool]
    Whether to include the sources of the financial statement. (provider: polygon)
order : Optional[Literal['asc', 'desc']]
    Order of the financial statement. (provider: polygon)
sort : Optional[Literal['filing_date', 'period_of_report_date']]
    Sort of the financial statement. (provider: polygon)

Returns
-------
OBBject
    results : List[IncomeStatement]
        Serializable results.
    provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

IncomeStatement
---------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    Date of the income statement. 
period : Optional[str]
    Period of the income statement. 
cik : Optional[str]
    Central Index Key. 
revenue : Optional[int]
    Revenue. 
cost_of_revenue : Optional[int]
    Cost of revenue. 
gross_profit : Optional[int]
    Gross profit. 
cost_and_expenses : Optional[int]
    Cost and expenses. 
gross_profit_ratio : Optional[float]
    Gross profit ratio. 
research_and_development_expenses : Optional[int]
    Research and development expenses. 
general_and_administrative_expenses : Optional[int]
    General and administrative expenses. 
selling_and_marketing_expenses : Optional[float]
    Selling and marketing expenses. 
selling_general_and_administrative_expenses : Optional[int]
    Selling, general and administrative expenses. 
other_expenses : Optional[int]
    Other expenses. 
operating_expenses : Optional[int]
    Operating expenses. 
depreciation_and_amortization : Optional[int]
    Depreciation and amortization. 
ebitda : Optional[int]
    Earnings before interest, taxes, depreciation and amortization. 
ebitda_ratio : Optional[float]
    Earnings before interest, taxes, depreciation and amortization ratio. 
operating_income : Optional[int]
    Operating income. 
operating_income_ratio : Optional[float]
    Operating income ratio. 
interest_income : Optional[int]
    Interest income. 
interest_expense : Optional[int]
    Interest expense. 
total_other_income_expenses_net : Optional[int]
    Total other income expenses net. 
income_before_tax : Optional[int]
    Income before tax. 
income_before_tax_ratio : Optional[float]
    Income before tax ratio. 
income_tax_expense : Optional[int]
    Income tax expense. 
net_income : Optional[int]
    Net income. 
net_income_ratio : Optional[float]
    Net income ratio. 
eps : Optional[float]
    Earnings per share. 
eps_diluted : Optional[float]
    Earnings per share diluted. 
weighted_average_shares_outstanding : Optional[int]
    Weighted average shares outstanding. 
weighted_average_shares_outstanding_dil : Optional[int]
    Weighted average shares outstanding diluted. 
income_loss_from_continuing_operations_before_tax : Optional[float]
    Income/Loss From Continuing Operations After Tax (provider: polygon)
income_loss_from_continuing_operations_after_tax : Optional[float]
    Income/Loss From Continuing Operations After Tax (provider: polygon)
benefits_costs_expenses : Optional[float]
    Benefits, Costs And Expenses (provider: polygon)
net_income_loss_attributable_to_noncontrolling_interest : Optional[float]
    Net Income/Loss Attributable To Noncontrolling Interest (provider: polygon)
net_income_loss_attributable_to_parent : Optional[float]
    Net Income/Loss Attributable To Parent (provider: polygon)
income_tax_expense_benefit_deferred : Optional[float]
    Income Tax Expense/Benefit Deferred (provider: polygon)
participating_securities_distributed_and_undistributed_earnings_loss_basic : Optional[float]
    Participating Securities Distributed And Undistributed Earnings Loss Basic (provider: polygon)
net_income_loss_available_to_common_stockholders_basic : Optional[float]
    Net Income/Loss Available To Common Stockholders Basic (provider: polygon)
nonoperating_income_loss : Optional[float]
    Nonoperating Income Loss (provider: polygon)
preferred_stock_dividends_and_other_adjustments : Optional[float]
    Preferred Stock Dividends And Other Adjustments (provider: polygon)
"""
    return obb.stocks.fa.income(symbol, period, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.income_growth", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_income_growth(symbol, limit=10, period='annual', provider=None):
    """Income Statement Growth.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
limit : int
    The number of data entries to return.
period : Literal['annual', 'quarter']
    Period of the data to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[IncomeStatementGrowth]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

IncomeStatementGrowth
---------------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    The date of the data. 
period : Optional[str]
    Period the statement is returned for. 
growth_revenue : Optional[float]
    Growth rate of total revenue. 
growth_cost_of_revenue : Optional[float]
    Growth rate of cost of goods sold. 
growth_gross_profit : Optional[float]
    Growth rate of gross profit. 
growth_gross_profit_ratio : Optional[float]
    Growth rate of gross profit as a percentage of revenue. 
growth_research_and_development_expenses : Optional[float]
    Growth rate of expenses on research and development. 
growth_general_and_administrative_expenses : Optional[float]
    Growth rate of general and administrative expenses. 
growth_selling_and_marketing_expenses : Optional[float]
    Growth rate of expenses on selling and marketing activities. 
growth_other_expenses : Optional[float]
    Growth rate of other operating expenses. 
growth_operating_expenses : Optional[float]
    Growth rate of total operating expenses. 
growth_cost_and_expenses : Optional[float]
    Growth rate of total costs and expenses. 
growth_interest_expense : Optional[float]
    Growth rate of interest expenses. 
growth_depreciation_and_amortization : Optional[float]
    Growth rate of depreciation and amortization expenses. 
growth_ebitda : Optional[float]
    Growth rate of Earnings Before Interest, Taxes, Depreciation, and Amortization. 
growth_ebitda_ratio : Optional[float]
    Growth rate of EBITDA as a percentage of revenue. 
growth_operating_income : Optional[float]
    Growth rate of operating income. 
growth_operating_income_ratio : Optional[float]
    Growth rate of operating income as a percentage of revenue. 
growth_total_other_income_expenses_net : Optional[float]
    Growth rate of net total other income and expenses. 
growth_income_before_tax : Optional[float]
    Growth rate of income before taxes. 
growth_income_before_tax_ratio : Optional[float]
    Growth rate of income before taxes as a percentage of revenue. 
growth_income_tax_expense : Optional[float]
    Growth rate of income tax expenses. 
growth_net_income : Optional[float]
    Growth rate of net income. 
growth_net_income_ratio : Optional[float]
    Growth rate of net income as a percentage of revenue. 
growth_eps : Optional[float]
    Growth rate of Earnings Per Share (EPS). 
growth_eps_diluted : Optional[float]
    Growth rate of diluted Earnings Per Share (EPS). 
growth_weighted_average_shs_out : Optional[float]
    Growth rate of weighted average shares outstanding. 
growth_weighted_average_shs_out_dil : Optional[float]
    Growth rate of diluted weighted average shares outstanding. 
"""
    return obb.stocks.fa.income_growth(symbol, limit, period, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.ins", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("transactionType", "union<str[], var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_ins(symbol, transactionType=['P-Purchase'], reportingCik=None, companyCik=None, page=0, provider=None):
    """Stock Insider Trading.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
transactionType : Optional[List[Literal['A-Award', 'C-Conversion', 'D-Return', 'E-ExpireShort', 'F-InKind', 'G-Gift', 'H-ExpireLong', 'I-Discretionary', 'J-Other', 'L-Small', 'M-Exempt', 'O-OutOfTheMoney', 'P-Purchase', 'S-Sale', 'U-Tender', 'W-Will', 'X-InTheMoney', 'Z-Trust']]]
    Type of the transaction.
reportingCik : Optional[int]
    CIK of the reporting owner.
companyCik : Optional[int]
    CIK of the company owner.
page : Optional[int]
    Page number of the data to fetch.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[StockInsiderTrading]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockInsiderTrading
-------------------
symbol : Optional[str]
    Symbol to get data for. 
filing_date : Optional[datetime]
    Filing date of the stock insider trading. 
transaction_date : Optional[date]
    Transaction date of the stock insider trading. 
reporting_cik : Optional[int]
    Reporting CIK of the stock insider trading. 
transaction_type : Optional[str]
    Transaction type of the stock insider trading. 
securities_owned : Optional[int]
    Securities owned of the stock insider trading. 
company_cik : Optional[int]
    Company CIK of the stock insider trading. 
reporting_name : Optional[str]
    Reporting name of the stock insider trading. 
type_of_owner : Optional[str]
    Type of owner of the stock insider trading. 
acquistion_or_disposition : Optional[str]
    Acquistion or disposition of the stock insider trading. 
form_type : Optional[str]
    Form type of the stock insider trading. 
securities_transacted : Optional[float]
    Securities transacted of the stock insider trading. 
price : Optional[float]
    Price of the stock insider trading. 
security_name : Optional[str]
    Security name of the stock insider trading. 
link : Optional[str]
    Link of the stock insider trading. 
"""
    return obb.stocks.fa.ins(symbol, transactionType, reportingCik, companyCik, page, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.ins_own", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_ins_own(symbol, include_current_quarter=False, date=None, provider=None):
    """Institutional Ownership.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
include_current_quarter : bool
    Include current quarter data.
date : Optional[datetime.date]
    A specific date to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[InstitutionalOwnership]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

InstitutionalOwnership
----------------------
symbol : Optional[str]
    Symbol to get data for. 
cik : Optional[str]
    CIK of the company. 
date : Optional[date]
    The date of the data. 
investors_holding : Optional[int]
    Number of investors holding the stock. 
last_investors_holding : Optional[int]
    Number of investors holding the stock in the last quarter. 
investors_holding_change : Optional[int]
    Change in the number of investors holding the stock. 
number_of_13f_shares : Optional[int]
    Number of 13F shares. 
last_number_of_13f_shares : Optional[int]
    Number of 13F shares in the last quarter. 
number_of_13f_shares_change : Optional[int]
    Change in the number of 13F shares. 
total_invested : Optional[float]
    Total amount invested. 
last_total_invested : Optional[float]
    Total amount invested in the last quarter. 
total_invested_change : Optional[float]
    Change in the total amount invested. 
ownership_percent : Optional[float]
    Ownership percent. 
last_ownership_percent : Optional[float]
    Ownership percent in the last quarter. 
ownership_percent_change : Optional[float]
    Change in the ownership percent. 
new_positions : Optional[int]
    Number of new positions. 
last_new_positions : Optional[int]
    Number of new positions in the last quarter. 
new_positions_change : Optional[int]
    Change in the number of new positions. 
increased_positions : Optional[int]
    Number of increased positions. 
last_increased_positions : Optional[int]
    Number of increased positions in the last quarter. 
increased_positions_change : Optional[int]
    Change in the number of increased positions. 
closed_positions : Optional[int]
    Number of closed positions. 
last_closed_positions : Optional[int]
    Number of closed positions in the last quarter. 
closed_positions_change : Optional[int]
    Change in the number of closed positions. 
reduced_positions : Optional[int]
    Number of reduced positions. 
last_reduced_positions : Optional[int]
    Number of reduced positions in the last quarter. 
reduced_positions_change : Optional[int]
    Change in the number of reduced positions. 
total_calls : Optional[int]
    Total number of call options contracts traded for Apple Inc. on the specified date. 
last_total_calls : Optional[int]
    Total number of call options contracts traded for Apple Inc. on the previous reporting date. 
total_calls_change : Optional[int]
    Change in the total number of call options contracts traded between the current and previous reporting dates. 
total_puts : Optional[int]
    Total number of put options contracts traded for Apple Inc. on the specified date. 
last_total_puts : Optional[int]
    Total number of put options contracts traded for Apple Inc. on the previous reporting date. 
total_puts_change : Optional[int]
    Change in the total number of put options contracts traded between the current and previous reporting dates. 
put_call_ratio : Optional[float]
    Put-call ratio, which is the ratio of the total number of put options to call options traded on the specified date. 
last_put_call_ratio : Optional[float]
    Put-call ratio on the previous reporting date. 
put_call_ratio_change : Optional[float]
    Change in the put-call ratio between the current and previous reporting dates. 
"""
    return obb.stocks.fa.ins_own(symbol, include_current_quarter, date, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.metrics", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_metrics(symbol, period='annual', limit=100, provider=None):
    """Key Metrics.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
limit : Optional[int]
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[KeyMetrics]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

KeyMetrics
----------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    The date of the data. 
period : Optional[str]
    Period of the data. 
revenue_per_share : Optional[float]
    Revenue per share 
net_income_per_share : Optional[float]
    Net income per share 
operating_cash_flow_per_share : Optional[float]
    Operating cash flow per share 
free_cash_flow_per_share : Optional[float]
    Free cash flow per share 
cash_per_share : Optional[float]
    Cash per share 
book_value_per_share : Optional[float]
    Book value per share 
tangible_book_value_per_share : Optional[float]
    Tangible book value per share 
shareholders_equity_per_share : Optional[float]
    Shareholders equity per share 
interest_debt_per_share : Optional[float]
    Interest debt per share 
market_cap : Optional[float]
    Market capitalization 
enterprise_value : Optional[float]
    Enterprise value 
pe_ratio : Optional[float]
    Price-to-earnings ratio (P/E ratio) 
price_to_sales_ratio : Optional[float]
    Price-to-sales ratio 
pocf_ratio : Optional[float]
    Price-to-operating cash flow ratio 
pfcf_ratio : Optional[float]
    Price-to-free cash flow ratio 
pb_ratio : Optional[float]
    Price-to-book ratio 
ptb_ratio : Optional[float]
    Price-to-tangible book ratio 
ev_to_sales : Optional[float]
    Enterprise value-to-sales ratio 
enterprise_value_over_ebitda : Optional[float]
    Enterprise value-to-EBITDA ratio 
ev_to_operating_cash_flow : Optional[float]
    Enterprise value-to-operating cash flow ratio 
ev_to_free_cash_flow : Optional[float]
    Enterprise value-to-free cash flow ratio 
earnings_yield : Optional[float]
    Earnings yield 
free_cash_flow_yield : Optional[float]
    Free cash flow yield 
debt_to_equity : Optional[float]
    Debt-to-equity ratio 
debt_to_assets : Optional[float]
    Debt-to-assets ratio 
net_debt_to_ebitda : Optional[float]
    Net debt-to-EBITDA ratio 
current_ratio : Optional[float]
    Current ratio 
interest_coverage : Optional[float]
    Interest coverage 
income_quality : Optional[float]
    Income quality 
dividend_yield : Optional[float]
    Dividend yield 
payout_ratio : Optional[float]
    Payout ratio 
sales_general_and_administrative_to_revenue : Optional[float]
    Sales general and administrative expenses-to-revenue ratio 
research_and_development_to_revenue : Optional[float]
    Research and development expenses-to-revenue ratio 
intangibles_to_total_assets : Optional[float]
    Intangibles-to-total assets ratio 
capex_to_operating_cash_flow : Optional[float]
    Capital expenditures-to-operating cash flow ratio 
capex_to_revenue : Optional[float]
    Capital expenditures-to-revenue ratio 
capex_to_depreciation : Optional[float]
    Capital expenditures-to-depreciation ratio 
stock_based_compensation_to_revenue : Optional[float]
    Stock-based compensation-to-revenue ratio 
graham_number : Optional[float]
    Graham number 
roic : Optional[float]
    Return on invested capital 
return_on_tangible_assets : Optional[float]
    Return on tangible assets 
graham_net_net : Optional[float]
    Graham net-net working capital 
working_capital : Optional[float]
    Working capital 
tangible_asset_value : Optional[float]
    Tangible asset value 
net_current_asset_value : Optional[float]
    Net current asset value 
invested_capital : Optional[float]
    Invested capital 
average_receivables : Optional[float]
    Average receivables 
average_payables : Optional[float]
    Average payables 
average_inventory : Optional[float]
    Average inventory 
days_sales_outstanding : Optional[float]
    Days sales outstanding 
days_payables_outstanding : Optional[float]
    Days payables outstanding 
days_of_inventory_on_hand : Optional[float]
    Days of inventory on hand 
receivables_turnover : Optional[float]
    Receivables turnover 
payables_turnover : Optional[float]
    Payables turnover 
inventory_turnover : Optional[float]
    Inventory turnover 
roe : Optional[float]
    Return on equity 
capex_per_share : Optional[float]
    Capital expenditures per share 
"""
    return obb.stocks.fa.metrics(symbol, period, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.mgmt", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_mgmt(symbol, provider=None):
    """Key Executives.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[KeyExecutives]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

KeyExecutives
-------------
title : Optional[str]
    Designation of the key executive. 
name : Optional[str]
    Name of the key executive. 
pay : Optional[int]
    Pay of the key executive. 
currency_pay : Optional[str]
    Currency of the pay. 
gender : Optional[str]
    Gender of the key executive. 
year_born : Optional[str]
    Birth year of the key executive. 
title_since : Optional[int]
    Date the tile was held since. 
"""
    return obb.stocks.fa.mgmt(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.overview", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_overview(symbol, provider=None):
    """Company Overview.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[CompanyOverview]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

CompanyOverview
---------------
symbol : Optional[str]
    Symbol to get data for. 
price : Optional[float]
    Price of the company. 
beta : Optional[float]
    Beta of the company. 
vol_avg : Optional[int]
    Volume average of the company. 
mkt_cap : Optional[int]
    Market capitalization of the company. 
last_div : Optional[float]
    Last dividend of the company. 
range : Optional[str]
    Range of the company. 
changes : Optional[float]
    Changes of the company. 
company_name : Optional[str]
    Company name of the company. 
currency : Optional[str]
    Currency of the company. 
cik : Optional[str]
    CIK of the company. 
isin : Optional[str]
    ISIN of the company. 
cusip : Optional[str]
    CUSIP of the company. 
exchange : Optional[str]
    Exchange of the company. 
exchange_short_name : Optional[str]
    Exchange short name of the company. 
industry : Optional[str]
    Industry of the company. 
website : Optional[str]
    Website of the company. 
description : Optional[str]
    Description of the company. 
ceo : Optional[str]
    CEO of the company. 
sector : Optional[str]
    Sector of the company. 
country : Optional[str]
    Country of the company. 
full_time_employees : Optional[str]
    Full time employees of the company. 
phone : Optional[str]
    Phone of the company. 
address : Optional[str]
    Address of the company. 
city : Optional[str]
    City of the company. 
state : Optional[str]
    State of the company. 
zip : Optional[str]
    Zip of the company. 
dcf_diff : Optional[float]
    Discounted cash flow difference of the company. 
dcf : Optional[float]
    Discounted cash flow of the company. 
image : Optional[str]
    Image of the company. 
ipo_date : Optional[date]
    IPO date of the company. 
default_image : Optional[bool]
    If the image is the default image. 
is_etf : Optional[bool]
    If the company is an ETF. 
is_actively_trading : Optional[bool]
    If the company is actively trading. 
is_adr : Optional[bool]
    If the company is an ADR. 
is_fund : Optional[bool]
    If the company is a fund. 
"""
    return obb.stocks.fa.overview(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.own", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_own(symbol, date=None, page=0, provider=None):
    """Stock Ownership.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
date : Optional[datetime.date]
    A specific date to get data for.
page : Optional[int]
    Page number of the data to fetch.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[StockOwnership]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockOwnership
--------------
date : Optional[date]
    The date of the data. 
cik : Optional[int]
    Cik of the stock ownership. 
filing_date : Optional[date]
    Filing date of the stock ownership. 
investor_name : Optional[str]
    Investor name of the stock ownership. 
symbol : Optional[str]
    Symbol of the stock ownership. 
security_name : Optional[str]
    Security name of the stock ownership. 
type_of_security : Optional[str]
    Type of security of the stock ownership. 
security_cusip : Optional[str]
    Security cusip of the stock ownership. 
shares_type : Optional[str]
    Shares type of the stock ownership. 
put_call_share : Optional[str]
    Put call share of the stock ownership. 
investment_discretion : Optional[str]
    Investment discretion of the stock ownership. 
industry_title : Optional[str]
    Industry title of the stock ownership. 
weight : Optional[float]
    Weight of the stock ownership. 
last_weight : Optional[float]
    Last weight of the stock ownership. 
change_in_weight : Optional[float]
    Change in weight of the stock ownership. 
change_in_weight_percentage : Optional[float]
    Change in weight percentage of the stock ownership. 
market_value : Optional[int]
    Market value of the stock ownership. 
last_market_value : Optional[int]
    Last market value of the stock ownership. 
change_in_market_value : Optional[int]
    Change in market value of the stock ownership. 
change_in_market_value_percentage : Optional[float]
    Change in market value percentage of the stock ownership. 
shares_number : Optional[int]
    Shares number of the stock ownership. 
last_shares_number : Optional[int]
    Last shares number of the stock ownership. 
change_in_shares_number : Optional[float]
    Change in shares number of the stock ownership. 
change_in_shares_number_percentage : Optional[float]
    Change in shares number percentage of the stock ownership. 
quarter_end_price : Optional[float]
    Quarter end price of the stock ownership. 
avg_price_paid : Optional[float]
    Average price paid of the stock ownership. 
is_new : Optional[bool]
    Is the stock ownership new. 
is_sold_out : Optional[bool]
    Is the stock ownership sold out. 
ownership : Optional[float]
    How much is the ownership. 
last_ownership : Optional[float]
    Last ownership amount. 
change_in_ownership : Optional[float]
    Change in ownership amount. 
change_in_ownership_percentage : Optional[float]
    Change in ownership percentage. 
holding_period : Optional[int]
    Holding period of the stock ownership. 
first_added : Optional[date]
    First added date of the stock ownership. 
performance : Optional[float]
    Performance of the stock ownership. 
performance_percentage : Optional[float]
    Performance percentage of the stock ownership. 
last_performance : Optional[float]
    Last performance of the stock ownership. 
change_in_performance : Optional[float]
    Change in performance of the stock ownership. 
is_counted_for_performance : Optional[bool]
    Is the stock ownership counted for performance. 
"""
    return obb.stocks.fa.own(symbol, date, page, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.pt", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_pt(symbol, provider=None):
    """Price Target Consensus.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[PriceTargetConsensus]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

PriceTargetConsensus
--------------------
symbol : Optional[str]
    Symbol to get data for. 
target_high : Optional[float]
    High target of the price target consensus. 
target_low : Optional[float]
    Low target of the price target consensus. 
target_consensus : Optional[float]
    Consensus target of the price target consensus. 
target_median : Optional[float]
    Median target of the price target consensus. 
"""
    return obb.stocks.fa.pt(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.pta", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_pta(symbol, provider=None):
    """Price Target.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
with_grade : bool
    Include upgrades and downgrades in the response. (provider: fmp)

Returns
-------
OBBject
    results : List[PriceTarget]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

PriceTarget
-----------
symbol : Optional[str]
    Symbol to get data for. 
published_date : Optional[datetime]
    Published date of the price target. 
news_url : Optional[str]
    News URL of the price target. 
news_title : Optional[str]
    News title of the price target. 
analyst_name : Optional[str]
    Analyst name. 
analyst_company : Optional[str]
    Analyst company. 
price_target : Optional[float]
    Price target. 
adj_price_target : Optional[float]
    Adjusted price target. 
price_when_posted : Optional[float]
    Price when posted. 
news_publisher : Optional[str]
    News publisher of the price target. 
news_base_url : Optional[str]
    News base URL of the price target. 
new_grade : Optional[str]
    None
previous_grade : Optional[str]
    None
grading_company : Optional[str]
    None
"""
    return obb.stocks.fa.pta(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.ratios", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_ratios(symbol, period='annual', limit=12, provider=None):
    """Extensive set of ratios over time.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
limit : Optional[pydantic.types.NonNegativeInt]
    The number of data entries to return.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[FinancialRatios]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

FinancialRatios
---------------
symbol : Optional[str]
    Symbol of the company. 
date : Optional[str]
    Date of the financial ratios. 
period : Optional[str]
    Period of the financial ratios. 
current_ratio : Optional[float]
    Current ratio. 
quick_ratio : Optional[float]
    Quick ratio. 
cash_ratio : Optional[float]
    Cash ratio. 
days_of_sales_outstanding : Optional[float]
    Days of sales outstanding. 
days_of_inventory_outstanding : Optional[float]
    Days of inventory outstanding. 
operating_cycle : Optional[float]
    Operating cycle. 
days_of_payables_outstanding : Optional[float]
    Days of payables outstanding. 
cash_conversion_cycle : Optional[float]
    Cash conversion cycle. 
gross_profit_margin : Optional[float]
    Gross profit margin. 
operating_profit_margin : Optional[float]
    Operating profit margin. 
pretax_profit_margin : Optional[float]
    Pretax profit margin. 
net_profit_margin : Optional[float]
    Net profit margin. 
effective_tax_rate : Optional[float]
    Effective tax rate. 
return_on_assets : Optional[float]
    Return on assets. 
return_on_equity : Optional[float]
    Return on equity. 
return_on_capital_employed : Optional[float]
    Return on capital employed. 
net_income_per_ebt : Optional[float]
    Net income per EBT. 
ebt_per_ebit : Optional[float]
    EBT per EBIT. 
ebit_per_revenue : Optional[float]
    EBIT per revenue. 
debt_ratio : Optional[float]
    Debt ratio. 
debt_equity_ratio : Optional[float]
    Debt equity ratio. 
long_term_debt_to_capitalization : Optional[float]
    Long term debt to capitalization. 
total_debt_to_capitalization : Optional[float]
    Total debt to capitalization. 
interest_coverage : Optional[float]
    Interest coverage. 
cash_flow_to_debt_ratio : Optional[float]
    Cash flow to debt ratio. 
company_equity_multiplier : Optional[float]
    Company equity multiplier. 
receivables_turnover : Optional[float]
    Receivables turnover. 
payables_turnover : Optional[float]
    Payables turnover. 
inventory_turnover : Optional[float]
    Inventory turnover. 
fixed_asset_turnover : Optional[float]
    Fixed asset turnover. 
asset_turnover : Optional[float]
    Asset turnover. 
operating_cash_flow_per_share : Optional[float]
    Operating cash flow per share. 
free_cash_flow_per_share : Optional[float]
    Free cash flow per share. 
cash_per_share : Optional[float]
    Cash per share. 
payout_ratio : Optional[float]
    Payout ratio. 
operating_cash_flow_sales_ratio : Optional[float]
    Operating cash flow sales ratio. 
free_cash_flow_operating_cash_flow_ratio : Optional[float]
    Free cash flow operating cash flow ratio. 
cash_flow_coverage_ratios : Optional[float]
    Cash flow coverage ratios. 
short_term_coverage_ratios : Optional[float]
    Short term coverage ratios. 
capital_expenditure_coverage_ratio : Optional[float]
    Capital expenditure coverage ratio. 
dividend_paid_and_capex_coverage_ratio : Optional[float]
    Dividend paid and capex coverage ratio. 
dividend_payout_ratio : Optional[float]
    Dividend payout ratio. 
price_book_value_ratio : Optional[float]
    Price book value ratio. 
price_to_book_ratio : Optional[float]
    Price to book ratio. 
price_to_sales_ratio : Optional[float]
    Price to sales ratio. 
price_earnings_ratio : Optional[float]
    Price earnings ratio. 
price_to_free_cash_flows_ratio : Optional[float]
    Price to free cash flows ratio. 
price_to_operating_cash_flows_ratio : Optional[float]
    Price to operating cash flows ratio. 
price_cash_flow_ratio : Optional[float]
    Price cash flow ratio. 
price_earnings_to_growth_ratio : Optional[float]
    Price earnings to growth ratio. 
price_sales_ratio : Optional[float]
    Price sales ratio. 
dividend_yield : Optional[float]
    Dividend yield. 
enterprise_value_multiple : Optional[float]
    Enterprise value multiple. 
price_fair_value : Optional[float]
    Price fair value. 
"""
    return obb.stocks.fa.ratios(symbol, period, limit, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.revgeo", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("structure", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_revgeo(symbol, period='annual', structure='flat', provider=None):
    """Revenue Geographic.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
structure : Literal['hierarchical', 'flat']
    Structure of the returned data.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[RevenueGeographic]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

RevenueGeographic
-----------------
date : Optional[date]
    The date of the data. 
geographic_segment : Optional[Mapping[str, int]]
    Day level data containing the revenue of the geographic segment. 
americas : Optional[int]
    Revenue from the the American segment. 
europe : Optional[int]
    Revenue from the the European segment. 
greater_china : Optional[int]
    Revenue from the the Greater China segment. 
japan : Optional[int]
    Revenue from the the Japan segment. 
rest_of_asia_pacific : Optional[int]
    Revenue from the the Rest of Asia Pacific segment. 
"""
    return obb.stocks.fa.revgeo(symbol, period, structure, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.revseg", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("period", "str")
@xl_arg("structure", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_revseg(symbol, period='annual', structure='flat', provider=None):
    """Revenue Business Line.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
period : Literal['annual', 'quarter']
    Period of the data to return.
structure : Literal['hierarchical', 'flat']
    Structure of the returned data.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[RevenueBusinessLine]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

RevenueBusinessLine
-------------------
date : Optional[date]
    The date of the data. 
business_line : Optional[Mapping[str, int]]
    Day level data containing the revenue of the business line. 
"""
    return obb.stocks.fa.revseg(symbol, period, structure, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.shrs", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_shrs(symbol, provider=None):
    """Share Statistics.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[ShareStatistics]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

ShareStatistics
---------------
symbol : Optional[str]
    Symbol to get data for. 
date : Optional[date]
    A specific date to get data for. 
free_float : Optional[float]
    Percentage of unrestricted shares of a publicly-traded company. 
float_shares : Optional[float]
    Number of shares available for trading by the general public. 
outstanding_shares : Optional[float]
    Total number of shares of a publicly-traded company. 
source : Optional[str]
    Source of the received data. 
"""
    return obb.stocks.fa.shrs(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.split", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_split(symbol, provider=None):
    """Historical Stock Splits.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[HistoricalStockSplits]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

HistoricalStockSplits
---------------------
date : Optional[date]
    The date of the data. 
label : Optional[str]
    Label of the historical stock splits. 
numerator : Optional[float]
    Numerator of the historical stock splits. 
denominator : Optional[float]
    Denominator of the historical stock splits. 
"""
    return obb.stocks.fa.split(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.fa.transcript", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("quarter", "str")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_fa_transcript(symbol, year, quarter=1, provider=None):
    """Earnings Call Transcript.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
year : int
    Year of the earnings call transcript.
quarter : Literal[1, 2, 3, 4]
    Quarter of the earnings call transcript.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[EarningsCallTranscript]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

EarningsCallTranscript
----------------------
symbol : Optional[str]
    Symbol to get data for. 
quarter : Optional[int]
    Quarter of the earnings call transcript. 
year : Optional[int]
    Year of the earnings call transcript. 
date : Optional[datetime]
    The date of the data. 
content : Optional[str]
    Content of the earnings call transcript. 
"""
    return obb.stocks.fa.transcript(symbol, year, quarter, provider)

@xl_func(category="OpenBB", name="obb.stocks.load", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("start_date", "union<date, var>")
@xl_arg("end_date", "union<date, var>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_load(symbol, start_date=None, end_date=None, chart=False, provider=None):
    """Load stock data for a specific ticker.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
start_date : Union[datetime.date, NoneType, str]
    Start date of the data, in YYYY-MM-DD format.
end_date : Union[datetime.date, NoneType, str]
    End date of the data, in YYYY-MM-DD format.
chart : bool
    Whether to create a chart or not, by default False.
provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
timeseries : Optional[pydantic.types.NonNegativeInt]
    Number of days to look back. (provider: fmp)
interval : Literal['1min', '5min', '15min', '30min', '1hour', '4hour', '1day']
    Interval of the data to fetch. (provider: fmp)
timezone : Optional[Literal['Africa/Algiers', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Monrovia', 'Africa/Nairobi', 'America/Argentina/Buenos_Aires', 'America/Bogota', 'America/Caracas', 'America/Chicago', 'America/Chihuahua', 'America/Denver', 'America/Godthab', 'America/Guatemala', 'America/Guyana', 'America/Halifax', 'America/Indiana/Indianapolis', 'America/Juneau', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Mazatlan', 'America/Mexico_City', 'America/Monterrey', 'America/Montevideo', 'America/New_York', 'America/Phoenix', 'America/Regina', 'America/Santiago', 'America/Sao_Paulo', 'America/St_Johns', 'America/Tijuana', 'Asia/Almaty', 'Asia/Baghdad', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Chongqing', 'Asia/Colombo', 'Asia/Dhaka', 'Asia/Hong_Kong', 'Asia/Irkutsk', 'Asia/Jakarta', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kathmandu', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuwait', 'Asia/Magadan', 'Asia/Muscat', 'Asia/Novosibirsk', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tokyo', 'Asia/Ulaanbaatar', 'Asia/Urumqi', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Cape_Verde', 'Atlantic/South_Georgia', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Darwin', 'Australia/Hobart', 'Australia/Melbourne', 'Australia/Perth', 'Australia/Sydney', 'Etc/UTC', 'UTC', 'Europe/Amsterdam', 'Europe/Athens', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Helsinki', 'Europe/Istanbul', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Madrid', 'Europe/Minsk', 'Europe/Moscow', 'Europe/Paris', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/Sarajevo', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Chatham', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Majuro', 'Pacific/Midway', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Port_Moresby', 'Pacific/Tongatapu']]
    Returns trading times in this timezone. (provider: intrinio)
source : Optional[Literal['realtime', 'delayed', 'nasdaq_basic']]
    The source of the data. (provider: intrinio)
start_time : Optional[datetime.time]
    Return intervals starting at the specified time on the `start_date` formatted as 'hh:mm:ss'. (provider: intrinio)
end_time : Optional[datetime.time]
    Return intervals stopping at the specified time on the `end_date` formatted as 'hh:mm:ss'. (provider: intrinio)
interval_size : Optional[Literal['1m', '5m', '10m', '15m', '30m', '60m', '1h']]
    The data time frequency. (provider: intrinio)
limit : Union[pydantic.types.NonNegativeInt, NoneType, pydantic.types.PositiveInt]
    None
next_page : Optional[str]
    Token to get the next page of data from a previous API call. (provider: intrinio)
all_pages : Optional[bool]
    Returns all pages of data from the API call at once. (provider: intrinio)
timespan : Literal['minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']
    Timespan of the data. (provider: polygon)
sort : Literal['asc', 'desc']
    Sort order of the data. (provider: polygon)
adjusted : bool
    Whether the data is adjusted. (provider: polygon)
multiplier : PositiveInt
    Multiplier of the timespan. (provider: polygon)

Returns
-------
OBBject
    results : List[StockHistorical]
        Serializable results.
    provider : Optional[Literal['fmp', 'intrinio', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockHistorical
---------------
date : Optional[datetime]
    The date of the data. 
open : Optional[PositiveFloat]
    The open price of the symbol. 
high : Optional[PositiveFloat]
    The high price of the symbol. 
low : Optional[PositiveFloat]
    The low price of the symbol. 
close : Optional[PositiveFloat]
    The close price of the symbol. 
volume : Optional[NonNegativeInt]
    The volume of the symbol. 
vwap : Optional[PositiveFloat]
    Volume Weighted Average Price of the symbol. 
adj_close : Optional[float]
    Adjusted Close Price of the symbol. (provider: fmp)
unadjusted_volume : Optional[float]
    Unadjusted volume of the symbol. (provider: fmp)
change : Optional[float]
    Change in the price of the symbol from the previous day. (provider: fmp)
change_percent : Optional[float]
    Change \% in the price of the symbol. (provider: fmp)
label : Optional[str]
    Human readable format of the date. (provider: fmp)
change_over_time : Optional[float]
    Change \% in the price of the symbol over a period of time. (provider: fmp)
close_time : Optional[datetime]
    The timestamp that represents the end of the interval span. (provider: intrinio)
interval : Optional[str]
    The data time frequency. (provider: intrinio)
average : Optional[float]
    Average trade price of an individual stock during the interval. (provider: intrinio)
transactions : Optional[PositiveInt]
    Number of transactions for the symbol in the time period. (provider: polygon)
"""
    return obb.stocks.load(symbol, start_date, end_date, chart, provider)

@xl_func(category="OpenBB", name="obb.stocks.multiples", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_multiples(symbol, limit=100, chart=False, provider=None):
    """Get valuation multiples for a stock ticker.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
limit : Optional[int]
    The number of data entries to return.
chart : bool
    Whether to create a chart or not, by default False.
provider : Optional[Literal['fmp']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.

Returns
-------
OBBject
    results : List[StockMultiples]
        Serializable results.
    provider : Optional[Literal['fmp']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockMultiples
--------------
revenue_per_share_ttm : Optional[float]
    Revenue per share calculated as trailing twelve months. 
net_income_per_share_ttm : Optional[float]
    Net income per share calculated as trailing twelve months. 
operating_cash_flow_per_share_ttm : Optional[float]
    Operating cash flow per share calculated as trailing twelve months. 
free_cash_flow_per_share_ttm : Optional[float]
    Free cash flow per share calculated as trailing twelve months. 
cash_per_share_ttm : Optional[float]
    Cash per share calculated as trailing twelve months. 
book_value_per_share_ttm : Optional[float]
    Book value per share calculated as trailing twelve months. 
tangible_book_value_per_share_ttm : Optional[float]
    Tangible book value per share calculated as trailing twelve months. 
shareholders_equity_per_share_ttm : Optional[float]
    Shareholders equity per share calculated as trailing twelve months. 
interest_debt_per_share_ttm : Optional[float]
    Interest debt per share calculated as trailing twelve months. 
market_cap_ttm : Optional[float]
    Market capitalization calculated as trailing twelve months. 
enterprise_value_ttm : Optional[float]
    Enterprise value calculated as trailing twelve months. 
pe_ratio_ttm : Optional[float]
    Price-to-earnings ratio (P/E ratio) calculated as trailing twelve months. 
price_to_sales_ratio_ttm : Optional[float]
    Price-to-sales ratio calculated as trailing twelve months. 
pocf_ratio_ttm : Optional[float]
    Price-to-operating cash flow ratio calculated as trailing twelve months. 
pfcf_ratio_ttm : Optional[float]
    Price-to-free cash flow ratio calculated as trailing twelve months. 
pb_ratio_ttm : Optional[float]
    Price-to-book ratio calculated as trailing twelve months. 
ptb_ratio_ttm : Optional[float]
    Price-to-tangible book ratio calculated as trailing twelve months. 
ev_to_sales_ttm : Optional[float]
    Enterprise value-to-sales ratio calculated as trailing twelve months. 
enterprise_value_over_ebitda_ttm : Optional[float]
    Enterprise value-to-EBITDA ratio calculated as trailing twelve months. 
ev_to_operating_cash_flow_ttm : Optional[float]
    Enterprise value-to-operating cash flow ratio calculated as trailing twelve months. 
ev_to_free_cash_flow_ttm : Optional[float]
    Enterprise value-to-free cash flow ratio calculated as trailing twelve months. 
earnings_yield_ttm : Optional[float]
    Earnings yield calculated as trailing twelve months. 
free_cash_flow_yield_ttm : Optional[float]
    Free cash flow yield calculated as trailing twelve months. 
debt_to_equity_ttm : Optional[float]
    Debt-to-equity ratio calculated as trailing twelve months. 
debt_to_assets_ttm : Optional[float]
    Debt-to-assets ratio calculated as trailing twelve months. 
net_debt_to_ebitda_ttm : Optional[float]
    Net debt-to-EBITDA ratio calculated as trailing twelve months. 
current_ratio_ttm : Optional[float]
    Current ratio calculated as trailing twelve months. 
interest_coverage_ttm : Optional[float]
    Interest coverage calculated as trailing twelve months. 
income_quality_ttm : Optional[float]
    Income quality calculated as trailing twelve months. 
dividend_yield_ttm : Optional[float]
    Dividend yield calculated as trailing twelve months. 
dividend_yield_percentage_ttm : Optional[float]
    Dividend yield percentage calculated as trailing twelve months. 
dividend_to_market_cap_ttm : Optional[float]
    Dividend to market capitalization ratio calculated as trailing twelve months. 
dividend_per_share_ttm : Optional[float]
    Dividend per share calculated as trailing twelve months. 
payout_ratio_ttm : Optional[float]
    Payout ratio calculated as trailing twelve months. 
sales_general_and_administrative_to_revenue_ttm : Optional[float]
    Sales general and administrative expenses-to-revenue ratio calculated as trailing twelve months. 
research_and_development_to_revenue_ttm : Optional[float]
    Research and development expenses-to-revenue ratio calculated as trailing twelve months. 
intangibles_to_total_assets_ttm : Optional[float]
    Intangibles-to-total assets ratio calculated as trailing twelve months. 
capex_to_operating_cash_flow_ttm : Optional[float]
    Capital expenditures-to-operating cash flow ratio calculated as trailing twelve months. 
capex_to_revenue_ttm : Optional[float]
    Capital expenditures-to-revenue ratio calculated as trailing twelve months. 
capex_to_depreciation_ttm : Optional[float]
    Capital expenditures-to-depreciation ratio calculated as trailing twelve months. 
stock_based_compensation_to_revenue_ttm : Optional[float]
    Stock-based compensation-to-revenue ratio calculated as trailing twelve months. 
graham_number_ttm : Optional[float]
    Graham number calculated as trailing twelve months. 
roic_ttm : Optional[float]
    Return on invested capital calculated as trailing twelve months. 
return_on_tangible_assets_ttm : Optional[float]
    Return on tangible assets calculated as trailing twelve months. 
graham_net_net_ttm : Optional[float]
    Graham net-net working capital calculated as trailing twelve months. 
working_capital_ttm : Optional[float]
    Working capital calculated as trailing twelve months. 
tangible_asset_value_ttm : Optional[float]
    Tangible asset value calculated as trailing twelve months. 
net_current_asset_value_ttm : Optional[float]
    Net current asset value calculated as trailing twelve months. 
invested_capital_ttm : Optional[float]
    Invested capital calculated as trailing twelve months. 
average_receivables_ttm : Optional[float]
    Average receivables calculated as trailing twelve months. 
average_payables_ttm : Optional[float]
    Average payables calculated as trailing twelve months. 
average_inventory_ttm : Optional[float]
    Average inventory calculated as trailing twelve months. 
days_sales_outstanding_ttm : Optional[float]
    Days sales outstanding calculated as trailing twelve months. 
days_payables_outstanding_ttm : Optional[float]
    Days payables outstanding calculated as trailing twelve months. 
days_of_inventory_on_hand_ttm : Optional[float]
    Days of inventory on hand calculated as trailing twelve months. 
receivables_turnover_ttm : Optional[float]
    Receivables turnover calculated as trailing twelve months. 
payables_turnover_ttm : Optional[float]
    Payables turnover calculated as trailing twelve months. 
inventory_turnover_ttm : Optional[float]
    Inventory turnover calculated as trailing twelve months. 
roe_ttm : Optional[float]
    Return on equity calculated as trailing twelve months. 
capex_per_share_ttm : Optional[float]
    Capital expenditures per share calculated as trailing twelve months. 
"""
    return obb.stocks.multiples(symbol, limit, chart, provider)

@xl_func(category="OpenBB", name="obb.stocks.news", disable_function_wizard_calc=True)
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_news(symbols, page=0, limit=15, chart=False, provider=None):
    """Get news for one or more stock tickers.

Parameters
----------
symbols : str
    Symbol to get data for.
page : int
    Page of the stock news to be retrieved.
limit : Optional[pydantic.types.NonNegativeInt]
    Number of results to return per page.
chart : bool
    Whether to create a chart or not, by default False.
provider : Optional[Literal['benzinga', 'fmp', 'intrinio', 'polygon']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'benzinga' if there is
    no default.
display_output : Literal['headline', 'summary', 'full', 'all']
    Type of data to return. (provider: benzinga)
date : Optional[datetime.datetime]
    Date of the news to retrieve. (provider: benzinga)
date_from : Optional[datetime.datetime]
    Start date of the news to retrieve. (provider: benzinga)
date_to : Optional[datetime.datetime]
    End date of the news to retrieve. (provider: benzinga)
updated_since : Optional[int]
    Number of seconds since the news was updated. (provider: benzinga)
published_since : Optional[int]
    Number of seconds since the news was published. (provider: benzinga)
sort : Union[Literal['published_at', 'updated_at', 'title', 'author', 'channel', 'ticker', 'topic', 'content_type'], NoneType, str]
    None
isin : Optional[str]
    The ISIN of the news to retrieve. (provider: benzinga)
cusip : Optional[str]
    The CUSIP of the news to retrieve. (provider: benzinga)
channels : Optional[str]
    Channels of the news to retrieve. (provider: benzinga)
topics : Optional[str]
    Topics of the news to retrieve. (provider: benzinga)
authors : Optional[str]
    Authors of the news to retrieve. (provider: benzinga)
content_types : Optional[str]
    Content types of the news to retrieve. (provider: benzinga)
next_page : Optional[str]
    Token to get the next page of data from a previous API call. (provider: intrinio)
all_pages : Optional[bool]
    Returns all pages of data from the API call at once. (provider: intrinio)
ticker_lt : Optional[str]
    Less than, by default None (provider: polygon)
ticker_lte : Optional[str]
    Less than or equal, by default None (provider: polygon)
ticker_gt : Optional[str]
    Greater than, by default None (provider: polygon)
ticker_gte : Optional[str]
    Greater than or equal, by default None (provider: polygon)
published_utc : Optional[str]
    Published date of the query, by default None (provider: polygon)
published_utc_lt : Optional[str]
    Less than, by default None (provider: polygon)
published_utc_lte : Optional[str]
    Less than or equal, by default None (provider: polygon)
published_utc_gt : Optional[str]
    Greater than, by default None (provider: polygon)
published_utc_gte : Optional[str]
    Greater than or equal, by default None (provider: polygon)
order : Optional[Literal['asc', 'desc']]
    Sort order of the query, by default None (provider: polygon)

Returns
-------
OBBject
    results : List[StockNews]
        Serializable results.
    provider : Optional[Literal['benzinga', 'fmp', 'intrinio', 'polygon']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockNews
---------
date : Optional[datetime]
    Published date of the news. 
title : Optional[str]
    Title of the news. 
text : Optional[str]
    Text/body of the news. 
url : Optional[str]
    URL of the news. 
images : Optional[List[BenzingaImage]]
    Images associated with the news. (provider: benzinga)
channels : Optional[List[str]]
    Channels associated with the news. (provider: benzinga)
stocks : Optional[List[str]]
    Stocks associated with the news. (provider: benzinga)
tags : Optional[List[str]]
    Tags associated with the news. (provider: benzinga)
teaser : Optional[str]
    Teaser of the news. (provider: benzinga)
symbol : Optional[str]
    Ticker of the fetched news. (provider: fmp)
image : Optional[str]
    URL to the image of the news source. (provider: fmp)
site : Optional[str]
    Name of the news source. (provider: fmp)
id : Optional[str]
    Intrinio ID for the news article. (provider: intrinio)
amp_url : Optional[str]
    AMP URL. (provider: polygon)
author : Optional[str]
    Author of the article. (provider: polygon)
image_url : Optional[str]
    Image URL. (provider: polygon)
keywords : Optional[List[str]]
    Keywords in the article (provider: polygon)
publisher : Optional[PolygonPublisher]
    Publisher of the article. (provider: polygon)
tickers : Optional[List[str]]
    Tickers covered in the article. (provider: polygon)
"""
    return obb.stocks.news(symbols, page, limit, chart, provider)

@xl_func(category="OpenBB", name="obb.stocks.options.chains", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_options_chains(symbol, provider=None):
    """Get the complete options chain for a ticker.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['intrinio']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'intrinio' if there is
    no default.
date : Union[datetime.date, str, NoneType]
    Date for which the options chains are returned. (provider: intrinio)

Returns
-------
OBBject
    results : List[OptionsChains]
        Serializable results.
    provider : Optional[Literal['intrinio']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

OptionsChains
-------------
expiration : Optional[datetime]
    Expiration date of the contract. 
strike : Optional[float]
    Strike price of the contract. 
option_type : Optional[str]
    Call or Put. 
contract_symbol : Optional[str]
    Contract symbol for the option. 
bid : Optional[float]
    Bid price of the contract. 
ask : Optional[float]
    Ask price of the contract. 
open_interest : Optional[float]
    Open interest on the contract. 
volume : Optional[float]
    Current trading volume on the contract. 
mark : Optional[float]
    The mid-price between the latest bid-ask spread. (provider: intrinio)
open_bid : Optional[float]
    The lowest bid price for the option that day. (provider: intrinio)
open_ask : Optional[float]
    The lowest ask price for the option that day. (provider: intrinio)
bid_low : Optional[float]
    The lowest bid price for the option that day. (provider: intrinio)
ask_low : Optional[float]
    The lowest ask price for the option that day. (provider: intrinio)
bid_high : Optional[float]
    The highest bid price for the option that day. (provider: intrinio)
ask_high : Optional[float]
    The highest ask price for the option that day. (provider: intrinio)
open : Optional[float]
    The open price for the option that day. (provider: intrinio)
high : Optional[float]
    The high price for the option that day. (provider: intrinio)
low : Optional[float]
    The low price for the option that day. (provider: intrinio)
close : Optional[float]
    The close price for the option that day. (provider: intrinio)
implied_volatility : Optional[float]
    The implied volatility for the option at the end of day. (provider: intrinio)
delta : Optional[float]
    The delta value at the end of day. (provider: intrinio)
gamma : Optional[float]
    The gamma value at the end of day. (provider: intrinio)
vega : Optional[float]
    The vega value at the end of day. (provider: intrinio)
theta : Optional[float]
    The theta value at the end of day. (provider: intrinio)
eod_date : Optional[date]
    Historical date for which the options chains data is from. (provider: intrinio)
dte : Optional[int]
    The number of days until expiry. (provider: intrinio)
"""
    return obb.stocks.options.chains(symbol, provider)

@xl_func(category="OpenBB", name="obb.stocks.quote", disable_function_wizard_calc=True)
@xl_arg("symbol", "union<var, var[]>")
@xl_arg("provider", "union<str, var>")
@xl_return("obb.OBBject")
def obb_stocks_quote(symbol, provider=None):
    """Load stock data for a specific ticker.

Parameters
----------
symbol : Union[str, List[str]]
    Symbol to get data for.
provider : Optional[Literal['fmp', 'intrinio']]
    The provider to use for the query, by default None.
    If None, the provider specified in defaults is selected or 'fmp' if there is
    no default.
source : Literal['iex', 'bats', 'bats_delayed', 'utp_delayed', 'cta_a_delayed', 'cta_b_delayed', 'intrinio_mx', 'intrinio_mx_plus', 'delayed_sip']
    Source of the data. (provider: intrinio)

Returns
-------
OBBject
    results : List[StockQuote]
        Serializable results.
    provider : Optional[Literal['fmp', 'intrinio']]
        Provider name.
    warnings : Optional[List[Warning_]]
        List of warnings.
    chart : Optional[Chart]
        Chart object.
    metadata: Optional[Metadata]
        Metadata info about the command execution.

StockQuote
----------
day_low : Optional[float]
    Lowest price of the stock in the current trading day. 
day_high : Optional[float]
    Highest price of the stock in the current trading day. 
date : Optional[datetime]
    Timestamp of the stock quote. 
symbol : Optional[str]
    Symbol of the company. (provider: fmp)
name : Optional[str]
    Name of the company. (provider: fmp)
price : Optional[float]
    Current trading price of the stock. (provider: fmp)
changes_percentage : Optional[float]
    Change percentage of the stock price. (provider: fmp)
change : Optional[float]
    Change in the stock price. (provider: fmp)
year_high : Optional[float]
    Highest price of the stock in the last 52 weeks. (provider: fmp)
year_low : Optional[float]
    Lowest price of the stock in the last 52 weeks. (provider: fmp)
market_cap : Optional[float]
    Market cap of the company. (provider: fmp)
price_avg50 : Optional[float]
    50 days average price of the stock. (provider: fmp)
price_avg200 : Optional[float]
    200 days average price of the stock. (provider: fmp)
volume : Optional[int]
    Volume of the stock in the current trading day. (provider: fmp)
avg_volume : Optional[int]
    Average volume of the stock in the last 10 trading days. (provider: fmp)
exchange : Optional[str]
    Exchange the stock is traded on. (provider: fmp)
open : Optional[float]
    Opening price of the stock in the current trading day. (provider: fmp)
previous_close : Optional[float]
    Previous closing price of the stock. (provider: fmp)
eps : Optional[float]
    Earnings per share of the stock. (provider: fmp)
pe : Optional[float]
    Price earnings ratio of the stock. (provider: fmp)
earnings_announcement : Optional[str]
    Earnings announcement date of the stock. (provider: fmp)
shares_outstanding : Optional[int]
    Number of shares outstanding of the stock. (provider: fmp)
last_price : Optional[float]
    Price of the last trade. (provider: intrinio)
last_time : Optional[datetime]
    Date and Time when the last trade occurred. (provider: intrinio)
last_size : Optional[int]
    Size of the last trade. (provider: intrinio)
bid_price : Optional[float]
    Price of the top bid order. (provider: intrinio)
bid_size : Optional[int]
    Size of the top bid order. (provider: intrinio)
ask_price : Optional[float]
    Price of the top ask order. (provider: intrinio)
ask_size : Optional[int]
    Size of the top ask order. (provider: intrinio)
open_price : Optional[float]
    Open price for the trading day. (provider: intrinio)
close_price : Optional[float]
    Closing price for the trading day (IEX source only). (provider: intrinio)
high_price : Optional[float]
    High Price for the trading day. (provider: intrinio)
low_price : Optional[float]
    Low Price for the trading day. (provider: intrinio)
exchange_volume : Optional[int]
    Number of shares exchanged during the trading day on the exchange. (provider: intrinio)
market_volume : Optional[int]
    Number of shares exchanged during the trading day for the whole market. (provider: intrinio)
updated_on : Optional[datetime]
    Date and Time when the data was last updated. (provider: intrinio)
source : Optional[str]
    Source of the data. (provider: intrinio)
listing_venue : Optional[str]
    Listing venue where the trade took place (SIP source only). (provider: intrinio)
sales_conditions : Optional[str]
    Indicates any sales condition modifiers associated with the trade. (provider: intrinio)
quote_conditions : Optional[str]
    Indicates any quote condition modifiers associated with the trade. (provider: intrinio)
market_center_code : Optional[str]
    Market center character code. (provider: intrinio)
is_darkpool : Optional[bool]
    Whether or not the current trade is from a darkpool. (provider: intrinio)
"""
    return obb.stocks.quote(symbol, provider)


@xl_func(category="OpenBB", name="obb.system.construct", disable_function_wizard_calc=True)
def obb_system_construct(_fields_set=None):
    """
        Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
        Default values are respected, but no other validation is performed.
        Behaves as if `Config.extra = 'allow'` was set since it adds all passed values
        """
    return obb.system.construct(_fields_set)

@xl_func(category="OpenBB", name="obb.system.copy", disable_function_wizard_calc=True)
def obb_system_copy():
    """
        Duplicate a model, optionally choose which fields to include, exclude and change.

        :param include: fields to include in new model
        :param exclude: fields to exclude from new model, as with values this takes precedence over include
        :param update: values to change/add in the new model. Note: the data is not validated before creating
            the new model: you should trust this data
        :param deep: set to `True` to make a deep copy of the model
        :return: new model instance
        """
    return obb.system.copy()

@xl_func(category="OpenBB", name="obb.system.create_empty_json", disable_function_wizard_calc=True)
def obb_system_create_empty_json(path):
    """"""
    return obb.system.create_empty_json(path)

@xl_func(category="OpenBB", name="obb.system.create_openbb_directory", disable_function_wizard_calc=True)
def obb_system_create_openbb_directory(values):
    """"""
    return obb.system.create_openbb_directory(values)

@xl_func(category="OpenBB", name="obb.system.dict", disable_function_wizard_calc=True)
def obb_system_dict():
    """
        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.

        """
    return obb.system.dict()

@xl_func(category="OpenBB", name="obb.system.from_orm", disable_function_wizard_calc=True)
def obb_system_from_orm(obj):
    """"""
    return obb.system.from_orm(obj)




@xl_func(category="OpenBB", name="obb.system.json", disable_function_wizard_calc=True)
def obb_system_json():
    """
        Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.

        `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.
        """
    return obb.system.json()












@xl_func(category="OpenBB", name="obb.system.parse_file", disable_function_wizard_calc=True)
def obb_system_parse_file(path):
    """"""
    return obb.system.parse_file(path)

@xl_func(category="OpenBB", name="obb.system.parse_obj", disable_function_wizard_calc=True)
def obb_system_parse_obj(obj):
    """"""
    return obb.system.parse_obj(obj)

@xl_func(category="OpenBB", name="obb.system.parse_raw", disable_function_wizard_calc=True)
def obb_system_parse_raw(b):
    """"""
    return obb.system.parse_raw(b)



@xl_func(category="OpenBB", name="obb.system.schema", disable_function_wizard_calc=True)
def obb_system_schema(by_alias=True, ref_template='#/definitions/{model}'):
    """"""
    return obb.system.schema(by_alias, ref_template)

@xl_func(category="OpenBB", name="obb.system.schema_json", disable_function_wizard_calc=True)
def obb_system_schema_json():
    """"""
    return obb.system.schema_json()



@xl_func(category="OpenBB", name="obb.system.update_forward_refs", disable_function_wizard_calc=True)
def obb_system_update_forward_refs():
    """
        Try to update ForwardRefs on fields based on this Model, globalns and localns.
        """
    return obb.system.update_forward_refs()


@xl_func(category="OpenBB", name="obb.system.validate", disable_function_wizard_calc=True)
def obb_system_validate(value):
    """"""
    return obb.system.validate(value)

@xl_func(category="OpenBB", name="obb.system.validate_logging_handlers", disable_function_wizard_calc=True)
def obb_system_validate_logging_handlers(v):
    """"""
    return obb.system.validate_logging_handlers(v)

@xl_func(category="OpenBB", name="obb.system.validate_posthog_handler", disable_function_wizard_calc=True)
def obb_system_validate_posthog_handler(values):
    """"""
    return obb.system.validate_posthog_handler(values)


@xl_func(category="OpenBB", name="obb.ta.ad", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_ad(data, index='date', offset=0):
    """
    The Accumulation/Distribution Line is similar to the On Balance
    Volume (OBV), which sums the volume times +1/-1 based on whether the close is
    higher than the previous close. The Accumulation/Distribution indicator, however
    multiplies the volume by the close location value (CLV). The CLV is based on the
    movement of the issue within a single bar and can be +1, -1 or zero. 
 

    The Accumulation/Distribution Line is interpreted by looking for a divergence in
    the direction of the indicator relative to price. If the Accumulation/Distribution
    Line is trending upward it indicates that the price may follow. Also, if the
    Accumulation/Distribution Line becomes flat while the price is still rising (or falling)
    then it signals an impending flattening of the price.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    offset : int, optional
        Offset of the AD, by default 0.

    Returns
    -------
    OBBject[List[Data]]

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> ad_data = obb.ta.ad(data=stock_data.results,offset=0)
    """
    return obb.ta.ad(data, index, offset)

@xl_func(category="OpenBB", name="obb.ta.adosc", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_adosc(data, index='date', fast=3, slow=10, offset=0):
    """
    Accumulation/Distribution Oscillator, also known as the Chaikin Oscillator
    is essentially a momentum indicator, but of the Accumulation-Distribution line
    rather than merely price. It looks at both the strength of price moves and the
    underlying buying and selling pressure during a given time period. The oscillator
    reading above zero indicates net buying pressure, while one below zero registers
    net selling pressure. Divergence between the indicator and pure price moves are
    the most common signals from the indicator, and often flag market turning points.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    fast : PositiveInt, optional
        Number of periods to be used for the fast calculation, by default 3.
    slow : PositiveInt, optional
        Number of periods to be used for the slow calculation, by default 10.
    offset : int, optional
        Offset to be used for the calculation, by default 0.

    Returns
    -------
    OBBject[List[Data]]

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> adosc_data = obb.ta.adosc(data=stock_data.results, fast=3, slow=10, offset=0)
    """
    return obb.ta.adosc(data, index, fast, slow, offset)

@xl_func(category="OpenBB", name="obb.ta.adx", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_adx(data, index='date', length=50, scalar=100.0, drift=1, chart=False):
    """
    The ADX is a Welles Wilder style moving average of the Directional Movement Index (DX).
    The values range from 0 to 100, but rarely get above 60. To interpret the ADX, consider
    a high number to be a strong trend, and a low number, a weak trend.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        Number of periods for the ADX, by default 50.
    scalar : float, optional
        Scalar value for the ADX, by default 100.0.
    drift : int, optional
        Drift value for the ADX, by default 1.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> adx_data = obb.ta.adx(data=stock_data.results,length=50,scalar=100.0,drift=1)
    """
    return obb.ta.adx(data, index, length, scalar, drift, chart)

@xl_func(category="OpenBB", name="obb.ta.aroon", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_aroon(data, index='date', length=25, scalar=100, chart=False):
    """
    The word aroon is Sanskrit for "dawn's early light." The Aroon
    indicator attempts to show when a new trend is dawning. The indicator consists
    of two lines (Up and Down) that measure how long it has been since the highest
    high/lowest low has occurred within an n period range. 
 
 When the Aroon Up is
    staying between 70 and 100 then it indicates an upward trend. When the Aroon Down
    is staying between 70 and 100 then it indicates an downward trend. A strong upward
    trend is indicated when the Aroon Up is above 70 while the Aroon Down is below 30.
    Likewise, a strong downward trend is indicated when the Aroon Down is above 70 while
    the Aroon Up is below 30. Also look for crossovers. When the Aroon Down crosses above
    the Aroon Up, it indicates a weakening of the upward trend (and vice versa).

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index: str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        Number of periods to be used for the calculation, by default 25.
    scalar : int, optional
        Scalar to be used for the calculation, by default 100.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> aroon_data = obb.ta.aroon(data=stock_data.results, length=25, scalar=100)
    """
    return obb.ta.aroon(data, index, length, scalar, chart)

@xl_func(category="OpenBB", name="obb.ta.atr", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_arg("mamode", "str")
@xl_return("obb.OBBject")
def obb_ta_atr(data, index='date', length=14, mamode='rma', drift=1, offset=0):
    """
    Average True Range is used to measure volatility, especially volatility caused by
    gaps or limit moves.

    Parameters
    ----------
    data : List[Data]
        List of data to apply the indicator to.
    index : str, optional
        Index column name, by default "date"
    length : PositiveInt, optional
        It's period, by default 14
    mamode : Literal["rma", "ema", "sma", "wma"], optional
        Moving average mode, by default "rma"
    drift : NonNegativeInt, optional
        The difference period, by default 1
    offset : int, optional
        How many periods to offset the result, by default 0

    Returns
    -------
    OBBject[List[Data]]
        List of data with the indicator applied.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> atr_data = obb.ta.atr(data=stock_data.results)
    """
    return obb.ta.atr(data, index, length, mamode, drift, offset)

@xl_func(category="OpenBB", name="obb.ta.bbands", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_arg("mamode", "str")
@xl_return("obb.OBBject")
def obb_ta_bbands(data, target='close', index='date', length=50, std=2, mamode='sma', offset=0):
    """
    Bollinger Bands consist of three lines. The middle band is a simple
    moving average (generally 20 periods) of the typical price (TP). The upper and lower
    bands are F standard deviations (generally 2) above and below the middle band.
    The bands widen and narrow when the volatility of the price is higher or lower,
    respectively. 
 
Bollinger Bands do not, in themselves, generate buy or sell signals;
    they are an indicator of overbought or oversold conditions. When the price is near the
    upper or lower band it indicates that a reversal may be imminent. The middle band
    becomes a support or resistance level. The upper and lower bands can also be
    interpreted as price targets. When the price bounces off of the lower band and crosses
    the middle band, then the upper band becomes the price target.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        Number of periods to be used for the calculation, by default 50.
    std : NonNegativeFloat, optional
        Standard deviation to be used for the calculation, by default 2.
    mamode : Literal["sma", "ema", "wma", "rma"], optional
        Moving average mode to be used for the calculation, by default "sma".
    offset : int, optional
        Offset to be used for the calculation, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> bbands = obb.ta.bbands(
    >>>     data=stock_data.results, target="close", length=50, std=2, mamode="sma", offset=0
    >>> )
    """
    return obb.ta.bbands(data, target, index, length, std, mamode, offset)

@xl_func(category="OpenBB", name="obb.ta.cci", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_cci(data, index='date', length=14, scalar=0.015):
    """
    The CCI is designed to detect beginning and ending market trends.
    The range of 100 to -100 is the normal trading range. CCI values outside of this
    range indicate overbought or oversold conditions. You can also look for price
    divergence in the CCI. If the price is making new highs, and the CCI is not,
    then a price correction is likely.

    Parameters
    ----------
    data : List[Data]
        The data to use for the CCI calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : PositiveInt, optional
        The length of the CCI, by default 14.
    scalar : PositiveFloat, optional
        The scalar of the CCI, by default 0.015.

    Returns
    -------
    OBBject[List[Data]]
        The CCI data.
    """
    return obb.ta.cci(data, index, length, scalar)

@xl_func(category="OpenBB", name="obb.ta.cg", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_cg(data, index='date', length=14):
    """
    The Center of Gravity indicator, in short, is used to anticipate future price movements
    and to trade on price reversals as soon as they happen. However, just like other oscillators,
    the COG indicator returns the best results in range-bound markets and should be avoided when
    the price is trending. Traders who use it will be able to closely speculate the upcoming
    price change of the asset.

    Parameters
    ----------
    data : List[Data]
        The data to use for the COG calculation.
    index : str, optional
        Index column name to use with `data`, by default "date"
    length : PositiveInt, optional
        The length of the COG, by default 14

    Returns
    -------
    OBBject[List[Data]]
        The COG data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> cg_data = obb.ta.cg(data=stock_data.results, length=14)
    """
    return obb.ta.cg(data, index, length)

@xl_func(category="OpenBB", name="obb.ta.clenow", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_clenow(data, index='date', target='adj_close', period=90):
    """
    Clenow Volatility Adjusted Momentum.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    target : str, optional
        Target column name, by default "adj_close".
    period : PositiveInt, optional
        Number of periods for the momentum, by default 90.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> clenow_data = obb.ta.clenow(data=stock_data.results,period=90)
    """
    return obb.ta.clenow(data, index, target, period)

@xl_func(category="OpenBB", name="obb.ta.cones", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_arg("model", "str")
@xl_return("obb.OBBject")
def obb_ta_cones(data, index='date', lower_q=0.25, upper_q=0.75, model='STD', is_crypto=False):
    """Calculate the realized volatility quantiles over rolling windows of time.

    The model for calculating volatility is selectable.

    Parameters
    ----------
    data : List[Data]
        The data to use for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date"
    lower_q : float, optional
        The lower quantile value for calculations
    upper_q : float, optional
        The upper quantile value for calculations
    model : Literal["STD", "Parkinson", "Garman-Klass", "Hodges-Tompkins", "Rogers-Satchell", "Yang-Zhang"], optional
        The model used to calculate realized volatility

            Standard deviation measures how widely returns are dispersed from the average return.
            It is the most common (and biased) estimator of volatility.

            Parkinson volatility uses the high and low price of the day rather than just close to close prices.
            It is useful for capturing large price movements during the day.

            Garman-Klass volatility extends Parkinson volatility by taking into account the opening and closing price.
            As markets are most active during the opening and closing of a trading session;
            it makes volatility estimation more accurate.

            Hodges-Tompkins volatility is a bias correction for estimation using an overlapping data sample.
            It produces unbiased estimates and a substantial gain in efficiency.

            Rogers-Satchell is an estimator for measuring the volatility with an average return not equal to zero.
            Unlike Parkinson and Garman-Klass estimators, Rogers-Satchell incorporates a drift term,
            mean return not equal to zero.

            Yang-Zhang volatility is the combination of the overnight (close-to-open volatility).
            It is a weighted average of the Rogers-Satchell volatility and the open-to-close volatility.
    is_crypto : bool, optional
        Whether the data is crypto or not. If True, volatility is calculated for 365 days instead of 252

    Returns
    -------
    OBBject[List[Data]]
        The cones data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> cones_data = obb.ta.cones(data=stock_data.results, lower_q=0.25, upper_q=0.75, model="STD")
    """
    return obb.ta.cones(data, index, lower_q, upper_q, model, is_crypto)

@xl_func(category="OpenBB", name="obb.ta.demark", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_demark(data, index='date', target='close', show_all=False, asint=False, offset=0):
    """
    Demark sequential indicator

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    target : str, optional
        Target column name, by default "close".
    show_all : bool, optional
        Show 1 - 13. If set to False, show 6 - 9
    asint : bool, optional
        If True, fill NAs with 0 and change type to int, by default False
    offset : int, optional
        How many periods to offset the result

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> demark_data = obb.ta.demark(data=stock_data.results,offset=0)
    """
    return obb.ta.demark(data, index, target, show_all, asint, offset)

@xl_func(category="OpenBB", name="obb.ta.donchian", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_donchian(data, index='date', lower_length=20, upper_length=20, offset=0):
    """
    Donchian Channels are three lines generated by moving average
    calculations that comprise an indicator formed by upper and lower
    bands around a midrange or median band. The upper band marks the
    highest price of a security over N periods while the lower band
    marks the lowest price of a security over N periods. The area
    between the upper and lower bands represents the Donchian Channel.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    lower_length : PositiveInt, optional
        Number of periods for the lower band, by default 20.
    upper_length : PositiveInt, optional
        Number of periods for the upper band, by default 20.
    offset : int, optional
        Offset of the Donchian Channel, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> donchian_data = obb.ta.donchian(data=stock_data.results,lower_length=20,upper_length=20,offset=0)
    """
    return obb.ta.donchian(data, index, lower_length, upper_length, offset)

@xl_func(category="OpenBB", name="obb.ta.ema", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_ema(data, target='close', index='date', length=50, offset=0, chart=False):
    """
    The Exponential Moving Average is a staple of technical
    analysis and is used in countless technical indicators. In a Simple Moving
    Average, each value in the time period carries equal weight, and values outside
    of the time period are not included in the average. However, the Exponential
    Moving Average is a cumulative calculation, including all data. Past values have
    a diminishing contribution to the average, while more recent values have a greater
    contribution. This method allows the moving average to be more responsive to changes
    in the data.

    Parameters
    ----------
    data : List[Data]
        The data to use for the calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date"
    length : int, optional
        The length of the calculation, by default 50.
    offset : int, optional
        The offset of the calculation, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> ema_data = obb.ta.ema(data=stock_data.results,target="close",length=50,offset=0)

    """
    return obb.ta.ema(data, target, index, length, offset, chart)

@xl_func(category="OpenBB", name="obb.ta.fib", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_arg("close_column", "str")
@xl_return("obb.OBBject")
def obb_ta_fib(data, index='date', close_column='close', period=120, start_date=None, end_date=None):
    """Create Fibonacci Retracement Levels.

    Parameters
    ----------
    data : List[Data]
        List of data to apply the indicator to.
    index : str, optional
        Index column name, by default "date"
    period : PositiveInt, optional
        Period to calculate the indicator, by default 120

    Returns
    -------
    OBBject[List[Data]]
        List of data with the indicator applied.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> fib_data = obb.ta.fib(data=stock_data.results, period=120)
    """
    return obb.ta.fib(data, index, close_column, period, start_date, end_date)

@xl_func(category="OpenBB", name="obb.ta.fisher", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_fisher(data, index='date', length=14, signal=1):
    """
    The Fisher Transform is a technical indicator created by John F. Ehlers
    that converts prices into a Gaussian normal distribution.1 The indicator
    highlights when prices have   moved to an extreme, based on recent prices.
    This may help in spotting turning points in the price of an asset. It also
    helps show the trend and isolate the price waves within a trend.

    Parameters
    ----------
    data : List[Data]
        List of data to apply the indicator to.
    index : str, optional
        Index column name, by default "date"
    length : PositiveInt, optional
        Fisher period, by default 14
    signal : PositiveInt, optional
        Fisher Signal period, by default 1

    Returns
    -------
    OBBject[List[Data]]
        List of data with the indicator applied.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> fisher_data = obb.ta.fisher(data=stock_data.results, length=14, signal=1)
    """
    return obb.ta.fisher(data, index, length, signal)

@xl_func(category="OpenBB", name="obb.ta.hma", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_hma(data, target='close', index='date', length=50, offset=0, chart=False):
    """
    The Hull Moving Average solves the age old dilemma of making a moving average
    more responsive to current price activity whilst maintaining curve smoothness.
    In fact the HMA almost eliminates lag altogether and manages to improve smoothing
    at the same time.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        Number of periods for the HMA, by default 50.
    offset : int, optional
        Offset of the HMA, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> hma_data = obb.ta.hma(data=stock_data.results,target="close",length=50,offset=0)
    """
    return obb.ta.hma(data, target, index, length, offset, chart)

@xl_func(category="OpenBB", name="obb.ta.ichimoku", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_ichimoku(data, index='date', conversion=9, base=26, lagging=52, offset=26, lookahead=False):
    """
    The Ichimoku Cloud, also known as Ichimoku Kinko Hyo, is a versatile indicator that
    defines support and resistance, identifies trend direction, gauges momentum and provides
    trading signals. Ichimoku Kinko Hyo translates into "one look equilibrium chart". With
    one look, chartists can identify the trend and look for potential signals within that trend.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    conversion : PositiveInt, optional
        Number of periods for the conversion line, by default 9.
    base : PositiveInt, optional
        Number of periods for the base line, by default 26.
    lagging : PositiveInt, optional
        Number of periods for the lagging span, by default 52.
    offset : PositiveInt, optional
        Number of periods for the offset, by default 26.
    lookahead : bool, optional
        drops the Chikou Span Column to prevent potential data leak
    """
    return obb.ta.ichimoku(data, index, conversion, base, lagging, offset, lookahead)

@xl_func(category="OpenBB", name="obb.ta.kc", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_arg("mamode", "str")
@xl_return("obb.OBBject")
def obb_ta_kc(data, index='date', length=20, scalar=20, mamode='ema', offset=0):
    """
    Keltner Channels are volatility-based bands that are placed
    on either side of an asset's price and can aid in determining
    the direction of a trend.The Keltner channel uses the average
    true range (ATR) or volatility, with breaks above or below the top
    and bottom barriers signaling a continuation.

    Parameters
    ----------
    data : List[Data]
        The data to use for the Keltner Channels calculation.
    index : str, optional
        Index column name to use with `data`, by default "date"
    length : PositiveInt, optional
        The length of the Keltner Channels, by default 20
    scalar : PositiveFloat, optional
        The scalar to use for the Keltner Channels, by default 20
    mamode : Literal["ema", "sma", "wma", "hma", "zlma"], optional
        The moving average mode to use for the Keltner Channels, by default "ema"
    offset : NonNegativeInt, optional
        The offset to use for the Keltner Channels, by default 0

    Returns
    -------
    OBBject[List[Data]]
        The Keltner Channels data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> kc_data = obb.ta.kc(data=stock_data.results, length=20, scalar=20, ma_mode="ema", offset=0)
    """
    return obb.ta.kc(data, index, length, scalar, mamode, offset)

@xl_func(category="OpenBB", name="obb.ta.macd", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_macd(data, target='close', index='date', fast=12, slow=26, signal=9, chart=False):
    """
    The Moving Average Convergence Divergence (MACD) is the difference
    between two Exponential Moving Averages. The Signal line is an Exponential Moving
    Average of the MACD. 
 
 The MACD signals trend changes and indicates the start
    of new trend direction. High values indicate overbought conditions, low values
    indicate oversold conditions. Divergence with the price indicates an end to the
    current trend, especially if the MACD is at extreme high or low values. When the MACD
    line crosses above the signal line a buy signal is generated. When the MACD crosses
    below the signal line a sell signal is generated. To confirm the signal, the MACD
    should be above zero for a buy, and below zero for a sell.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    target : str
        Target column name.
    fast : int, optional
        Number of periods for the fast EMA, by default 12.
    slow : int, optional
        Number of periods for the slow EMA, by default 26.
    signal : int, optional
        Number of periods for the signal EMA, by default 9.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> macd_data = obb.ta.macd(data=stock_data.results,target="close",fast=12,slow=26,signal=9)
    """
    return obb.ta.macd(data, target, index, fast, slow, signal, chart)

@xl_func(category="OpenBB", name="obb.ta.obv", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_obv(data, index='date', offset=0):
    """
    The On Balance Volume (OBV) is a cumulative total of the up and
    down volume. When the close is higher than the previous close, the volume is added
    to the running total, and when the close is lower than the previous close, the volume
    is subtracted from the running total. 
 
 To interpret the OBV, look for the OBV
    to move with the price or precede price moves. If the price moves before the OBV,
    then it is a non-confirmed move. A series of rising peaks, or falling troughs, in the
    OBV indicates a strong trend. If the OBV is flat, then the market is not trending.

    Parameters
    ----------
    data : List[Data]
        List of data to apply the indicator to.
    index : str, optional
        Index column name, by default "date"
    offset : int, optional
        How many periods to offset the result, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        List of data with the indicator applied.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> obv_data = obb.ta.obv(data=stock_data.results, offset=0)
    """
    return obb.ta.obv(data, index, offset)

@xl_func(category="OpenBB", name="obb.ta.rsi", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_rsi(data, target='close', index='date', length=14, scalar=100.0, drift=1, chart=False):
    """
    The Relative Strength Index (RSI) calculates a ratio of the
    recent upward price movements to the absolute price movement. The RSI ranges
    from 0 to 100. The RSI is interpreted as an overbought/oversold indicator when
    the value is over 70/below 30. You can also look for divergence with price. If
    the price is making new highs/lows, and the RSI is not, it indicates a reversal.

    Parameters
    ----------
    data : List[Data]
        The data to use for the RSI calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date"
    length : int, optional
        The length of the RSI, by default 14
    scalar : float, optional
        The scalar to use for the RSI, by default 100.0
    drift : int, optional
        The drift to use for the RSI, by default 1

    Returns
    -------
    OBBject[List[Data]]
        The RSI data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> rsi_data = obb.ta.rsi(data=stock_data.results, target="close", length=14, scalar=100.0, drift=1)
    """
    return obb.ta.rsi(data, target, index, length, scalar, drift, chart)

@xl_func(category="OpenBB", name="obb.ta.sma", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_sma(data, target='close', index='date', length=50, offset=0, chart=False):
    """
    Moving Averages are used to smooth the data in an array to
    help eliminate noise and identify trends. The Simple Moving Average is literally
    the simplest form of a moving average. Each output value is the average of the
    previous n values. In a Simple Moving Average, each value in the time period carries
    equal weight, and values outside of the time period are not included in the average.
    This makes it less responsive to recent changes in the data, which can be useful for
    filtering out those changes.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        Number of periods to be used for the calculation, by default 50.
    offset : int, optional
        Offset from the current period, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> sma_data = obb.ta.sma(data=stock_data.results,target="close",length=50,offset=0)
    """
    return obb.ta.sma(data, target, index, length, offset, chart)

@xl_func(category="OpenBB", name="obb.ta.stoch", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_stoch(data, index='date', fast_k_period=14, slow_d_period=3, slow_k_period=3):
    """
    The Stochastic Oscillator measures where the close is in relation
    to the recent trading range. The values range from zero to 100. %D values over 75
    indicate an overbought condition; values under 25 indicate an oversold condition.
    When the Fast %D crosses above the Slow %D, it is a buy signal; when it crosses
    below, it is a sell signal. The Raw %K is generally considered too erratic to use
    for crossover signals.

    Parameters
    ----------
    data : List[Data]
        The data to use for the Stochastic Oscillator calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    fast_k_period : NonNegativeInt, optional
        The fast %K period, by default 14.
    slow_d_period : NonNegativeInt, optional
        The slow %D period, by default 3.
    slow_k_period : NonNegativeInt, optional
        The slow %K period, by default 3.

    Returns
    -------
    OBBject[List[Data]]
        The Stochastic Oscillator data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> stoch_data = obb.ta.stoch(data=stock_data.results, fast_k_period=14, slow_d_period=3, slow_k_period=3)
    """
    return obb.ta.stoch(data, index, fast_k_period, slow_d_period, slow_k_period)

@xl_func(category="OpenBB", name="obb.ta.vwap", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_vwap(data, index='date', anchor='D', offset=0):
    """
    The Volume Weighted Average Price that measures the average typical price
    by volume.  It is typically used with intraday charts to identify general direction.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    index : str, optional
        Index column name to use with `data`, by default "date".
    anchor : str, optional
        Anchor period to use for the calculation, by default "D".
        See Timeseries Offset Aliases below for additional options:
        https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases
    offset : int, optional
        Offset from the current period, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> vwap_data = obb.ta.vwap(data=stock_data.results,anchor="D",offset=0)
    """
    return obb.ta.vwap(data, index, anchor, offset)

@xl_func(category="OpenBB", name="obb.ta.wma", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_wma(data, target='close', index='date', length=50, offset=0, chart=False):
    """
    A Weighted Moving Average puts more weight on recent data and less on past data.
    This is done by multiplying each bar’s price by a weighting factor. Because of its
    unique calculation, WMA will follow prices more closely than a corresponding Simple
    Moving Average.

    Parameters
    ----------
    data : List[Data]
        The data to use for the calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        The length of the WMA, by default 50.
    offset : int, optional
        The offset of the WMA, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The WMA data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> wma_data = obb.ta.wma(data=stock_data.results, target="close", length=50, offset=0)
    """
    return obb.ta.wma(data, target, index, length, offset, chart)

@xl_func(category="OpenBB", name="obb.ta.zlma", disable_function_wizard_calc=True)
@xl_arg("data", "union<obb.DataFrame<index=True>, var[]>")
@xl_return("obb.OBBject")
def obb_ta_zlma(data, target='close', index='date', length=50, offset=0, chart=False):
    """
    The zero lag exponential moving average (ZLEMA) indicator
    was created by John Ehlers and Ric Way. The idea is do a
    regular exponential moving average (EMA) calculation but
    on a de-lagged data instead of doing it on the regular data.
    Data is de-lagged by removing the data from "lag" days ago
    thus removing (or attempting to) the cumulative effect of
    the moving average.

    Parameters
    ----------
    data : List[Data]
        List of data to be used for the calculation.
    target : str
        Target column name.
    index : str, optional
        Index column name to use with `data`, by default "date".
    length : int, optional
        Number of periods to be used for the calculation, by default 50.
    offset : int, optional
        Offset to be used for the calculation, by default 0.

    Returns
    -------
    OBBject[List[Data]]
        The calculated data.

    Examples
    --------
    >>> from openbb import obb
    >>> stock_data = obb.stocks.load(symbol="TSLA", start_date="2023-01-01", provider="fmp")
    >>> zlma_data = obb.ta.zlma(data=stock_data.results, target="close", length=50, offset=0)
    """
    return obb.ta.zlma(data, target, index, length, offset, chart)


@xl_func(category="OpenBB", name="obb.user.construct", disable_function_wizard_calc=True)
def obb_user_construct(_fields_set=None):
    """
        Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
        Default values are respected, but no other validation is performed.
        Behaves as if `Config.extra = 'allow'` was set since it adds all passed values
        """
    return obb.user.construct(_fields_set)

@xl_func(category="OpenBB", name="obb.user.copy", disable_function_wizard_calc=True)
def obb_user_copy():
    """
        Duplicate a model, optionally choose which fields to include, exclude and change.

        :param include: fields to include in new model
        :param exclude: fields to exclude from new model, as with values this takes precedence over include
        :param update: values to change/add in the new model. Note: the data is not validated before creating
            the new model: you should trust this data
        :param deep: set to `True` to make a deep copy of the model
        :return: new model instance
        """
    return obb.user.copy()



@xl_func(category="OpenBB", name="obb.user.credentials.construct", disable_function_wizard_calc=True)
def obb_user_credentials_construct(_fields_set=None):
    """
        Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
        Default values are respected, but no other validation is performed.
        Behaves as if `Config.extra = 'allow'` was set since it adds all passed values
        """
    return obb.user.credentials.construct(_fields_set)

@xl_func(category="OpenBB", name="obb.user.credentials.copy", disable_function_wizard_calc=True)
def obb_user_credentials_copy():
    """
        Duplicate a model, optionally choose which fields to include, exclude and change.

        :param include: fields to include in new model
        :param exclude: fields to exclude from new model, as with values this takes precedence over include
        :param update: values to change/add in the new model. Note: the data is not validated before creating
            the new model: you should trust this data
        :param deep: set to `True` to make a deep copy of the model
        :return: new model instance
        """
    return obb.user.credentials.copy()

@xl_func(category="OpenBB", name="obb.user.credentials.dict", disable_function_wizard_calc=True)
def obb_user_credentials_dict():
    """
        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.

        """
    return obb.user.credentials.dict()



@xl_func(category="OpenBB", name="obb.user.credentials.from_orm", disable_function_wizard_calc=True)
def obb_user_credentials_from_orm(obj):
    """"""
    return obb.user.credentials.from_orm(obj)


@xl_func(category="OpenBB", name="obb.user.credentials.json", disable_function_wizard_calc=True)
def obb_user_credentials_json():
    """
        Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.

        `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.
        """
    return obb.user.credentials.json()

@xl_func(category="OpenBB", name="obb.user.credentials.parse_file", disable_function_wizard_calc=True)
def obb_user_credentials_parse_file(path):
    """"""
    return obb.user.credentials.parse_file(path)

@xl_func(category="OpenBB", name="obb.user.credentials.parse_obj", disable_function_wizard_calc=True)
def obb_user_credentials_parse_obj(obj):
    """"""
    return obb.user.credentials.parse_obj(obj)

@xl_func(category="OpenBB", name="obb.user.credentials.parse_raw", disable_function_wizard_calc=True)
def obb_user_credentials_parse_raw(b):
    """"""
    return obb.user.credentials.parse_raw(b)


@xl_func(category="OpenBB", name="obb.user.credentials.schema", disable_function_wizard_calc=True)
def obb_user_credentials_schema(by_alias=True, ref_template='#/definitions/{model}'):
    """"""
    return obb.user.credentials.schema(by_alias, ref_template)

@xl_func(category="OpenBB", name="obb.user.credentials.schema_json", disable_function_wizard_calc=True)
def obb_user_credentials_schema_json():
    """"""
    return obb.user.credentials.schema_json()

@xl_func(category="OpenBB", name="obb.user.credentials.update_forward_refs", disable_function_wizard_calc=True)
def obb_user_credentials_update_forward_refs():
    """
        Try to update ForwardRefs on fields based on this Model, globalns and localns.
        """
    return obb.user.credentials.update_forward_refs()

@xl_func(category="OpenBB", name="obb.user.credentials.validate", disable_function_wizard_calc=True)
def obb_user_credentials_validate(value):
    """"""
    return obb.user.credentials.validate(value)


@xl_func(category="OpenBB", name="obb.user.defaults.construct", disable_function_wizard_calc=True)
def obb_user_defaults_construct(_fields_set=None):
    """
        Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
        Default values are respected, but no other validation is performed.
        Behaves as if `Config.extra = 'allow'` was set since it adds all passed values
        """
    return obb.user.defaults.construct(_fields_set)

@xl_func(category="OpenBB", name="obb.user.defaults.copy", disable_function_wizard_calc=True)
def obb_user_defaults_copy():
    """
        Duplicate a model, optionally choose which fields to include, exclude and change.

        :param include: fields to include in new model
        :param exclude: fields to exclude from new model, as with values this takes precedence over include
        :param update: values to change/add in the new model. Note: the data is not validated before creating
            the new model: you should trust this data
        :param deep: set to `True` to make a deep copy of the model
        :return: new model instance
        """
    return obb.user.defaults.copy()

@xl_func(category="OpenBB", name="obb.user.defaults.dict", disable_function_wizard_calc=True)
def obb_user_defaults_dict():
    """
        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.

        """
    return obb.user.defaults.dict()

@xl_func(category="OpenBB", name="obb.user.defaults.from_orm", disable_function_wizard_calc=True)
def obb_user_defaults_from_orm(obj):
    """"""
    return obb.user.defaults.from_orm(obj)

@xl_func(category="OpenBB", name="obb.user.defaults.json", disable_function_wizard_calc=True)
def obb_user_defaults_json():
    """
        Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.

        `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.
        """
    return obb.user.defaults.json()

@xl_func(category="OpenBB", name="obb.user.defaults.parse_file", disable_function_wizard_calc=True)
def obb_user_defaults_parse_file(path):
    """"""
    return obb.user.defaults.parse_file(path)

@xl_func(category="OpenBB", name="obb.user.defaults.parse_obj", disable_function_wizard_calc=True)
def obb_user_defaults_parse_obj(obj):
    """"""
    return obb.user.defaults.parse_obj(obj)

@xl_func(category="OpenBB", name="obb.user.defaults.parse_raw", disable_function_wizard_calc=True)
def obb_user_defaults_parse_raw(b):
    """"""
    return obb.user.defaults.parse_raw(b)


@xl_func(category="OpenBB", name="obb.user.defaults.schema", disable_function_wizard_calc=True)
def obb_user_defaults_schema(by_alias=True, ref_template='#/definitions/{model}'):
    """"""
    return obb.user.defaults.schema(by_alias, ref_template)

@xl_func(category="OpenBB", name="obb.user.defaults.schema_json", disable_function_wizard_calc=True)
def obb_user_defaults_schema_json():
    """"""
    return obb.user.defaults.schema_json()

@xl_func(category="OpenBB", name="obb.user.defaults.update_forward_refs", disable_function_wizard_calc=True)
def obb_user_defaults_update_forward_refs():
    """
        Try to update ForwardRefs on fields based on this Model, globalns and localns.
        """
    return obb.user.defaults.update_forward_refs()

@xl_func(category="OpenBB", name="obb.user.defaults.validate", disable_function_wizard_calc=True)
def obb_user_defaults_validate(value):
    """"""
    return obb.user.defaults.validate(value)

@xl_func(category="OpenBB", name="obb.user.dict", disable_function_wizard_calc=True)
def obb_user_dict():
    """
        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.

        """
    return obb.user.dict()

@xl_func(category="OpenBB", name="obb.user.from_orm", disable_function_wizard_calc=True)
def obb_user_from_orm(obj):
    """"""
    return obb.user.from_orm(obj)


@xl_func(category="OpenBB", name="obb.user.json", disable_function_wizard_calc=True)
def obb_user_json():
    """
        Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.

        `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.
        """
    return obb.user.json()

@xl_func(category="OpenBB", name="obb.user.parse_file", disable_function_wizard_calc=True)
def obb_user_parse_file(path):
    """"""
    return obb.user.parse_file(path)

@xl_func(category="OpenBB", name="obb.user.parse_obj", disable_function_wizard_calc=True)
def obb_user_parse_obj(obj):
    """"""
    return obb.user.parse_obj(obj)

@xl_func(category="OpenBB", name="obb.user.parse_raw", disable_function_wizard_calc=True)
def obb_user_parse_raw(b):
    """"""
    return obb.user.parse_raw(b)




@xl_func(category="OpenBB", name="obb.user.preferences.construct", disable_function_wizard_calc=True)
def obb_user_preferences_construct(_fields_set=None):
    """
        Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
        Default values are respected, but no other validation is performed.
        Behaves as if `Config.extra = 'allow'` was set since it adds all passed values
        """
    return obb.user.preferences.construct(_fields_set)

@xl_func(category="OpenBB", name="obb.user.preferences.copy", disable_function_wizard_calc=True)
def obb_user_preferences_copy():
    """
        Duplicate a model, optionally choose which fields to include, exclude and change.

        :param include: fields to include in new model
        :param exclude: fields to exclude from new model, as with values this takes precedence over include
        :param update: values to change/add in the new model. Note: the data is not validated before creating
            the new model: you should trust this data
        :param deep: set to `True` to make a deep copy of the model
        :return: new model instance
        """
    return obb.user.preferences.copy()


@xl_func(category="OpenBB", name="obb.user.preferences.dict", disable_function_wizard_calc=True)
def obb_user_preferences_dict():
    """
        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.

        """
    return obb.user.preferences.dict()


@xl_func(category="OpenBB", name="obb.user.preferences.from_orm", disable_function_wizard_calc=True)
def obb_user_preferences_from_orm(obj):
    """"""
    return obb.user.preferences.from_orm(obj)

@xl_func(category="OpenBB", name="obb.user.preferences.json", disable_function_wizard_calc=True)
def obb_user_preferences_json():
    """
        Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.

        `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.
        """
    return obb.user.preferences.json()


@xl_func(category="OpenBB", name="obb.user.preferences.parse_file", disable_function_wizard_calc=True)
def obb_user_preferences_parse_file(path):
    """"""
    return obb.user.preferences.parse_file(path)

@xl_func(category="OpenBB", name="obb.user.preferences.parse_obj", disable_function_wizard_calc=True)
def obb_user_preferences_parse_obj(obj):
    """"""
    return obb.user.preferences.parse_obj(obj)

@xl_func(category="OpenBB", name="obb.user.preferences.parse_raw", disable_function_wizard_calc=True)
def obb_user_preferences_parse_raw(b):
    """"""
    return obb.user.preferences.parse_raw(b)






@xl_func(category="OpenBB", name="obb.user.preferences.schema", disable_function_wizard_calc=True)
def obb_user_preferences_schema(by_alias=True, ref_template='#/definitions/{model}'):
    """"""
    return obb.user.preferences.schema(by_alias, ref_template)

@xl_func(category="OpenBB", name="obb.user.preferences.schema_json", disable_function_wizard_calc=True)
def obb_user_preferences_schema_json():
    """"""
    return obb.user.preferences.schema_json()


@xl_func(category="OpenBB", name="obb.user.preferences.update_forward_refs", disable_function_wizard_calc=True)
def obb_user_preferences_update_forward_refs():
    """
        Try to update ForwardRefs on fields based on this Model, globalns and localns.
        """
    return obb.user.preferences.update_forward_refs()


@xl_func(category="OpenBB", name="obb.user.preferences.validate", disable_function_wizard_calc=True)
def obb_user_preferences_validate(value):
    """"""
    return obb.user.preferences.validate(value)



@xl_func(category="OpenBB", name="obb.user.profile.construct", disable_function_wizard_calc=True)
def obb_user_profile_construct(_fields_set=None):
    """
        Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.
        Default values are respected, but no other validation is performed.
        Behaves as if `Config.extra = 'allow'` was set since it adds all passed values
        """
    return obb.user.profile.construct(_fields_set)

@xl_func(category="OpenBB", name="obb.user.profile.copy", disable_function_wizard_calc=True)
def obb_user_profile_copy():
    """
        Duplicate a model, optionally choose which fields to include, exclude and change.

        :param include: fields to include in new model
        :param exclude: fields to exclude from new model, as with values this takes precedence over include
        :param update: values to change/add in the new model. Note: the data is not validated before creating
            the new model: you should trust this data
        :param deep: set to `True` to make a deep copy of the model
        :return: new model instance
        """
    return obb.user.profile.copy()

@xl_func(category="OpenBB", name="obb.user.profile.dict", disable_function_wizard_calc=True)
def obb_user_profile_dict():
    """
        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.

        """
    return obb.user.profile.dict()

@xl_func(category="OpenBB", name="obb.user.profile.from_orm", disable_function_wizard_calc=True)
def obb_user_profile_from_orm(obj):
    """"""
    return obb.user.profile.from_orm(obj)


@xl_func(category="OpenBB", name="obb.user.profile.json", disable_function_wizard_calc=True)
def obb_user_profile_json():
    """
        Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.

        `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.
        """
    return obb.user.profile.json()

@xl_func(category="OpenBB", name="obb.user.profile.parse_file", disable_function_wizard_calc=True)
def obb_user_profile_parse_file(path):
    """"""
    return obb.user.profile.parse_file(path)

@xl_func(category="OpenBB", name="obb.user.profile.parse_obj", disable_function_wizard_calc=True)
def obb_user_profile_parse_obj(obj):
    """"""
    return obb.user.profile.parse_obj(obj)

@xl_func(category="OpenBB", name="obb.user.profile.parse_raw", disable_function_wizard_calc=True)
def obb_user_profile_parse_raw(b):
    """"""
    return obb.user.profile.parse_raw(b)


@xl_func(category="OpenBB", name="obb.user.profile.schema", disable_function_wizard_calc=True)
def obb_user_profile_schema(by_alias=True, ref_template='#/definitions/{model}'):
    """"""
    return obb.user.profile.schema(by_alias, ref_template)

@xl_func(category="OpenBB", name="obb.user.profile.schema_json", disable_function_wizard_calc=True)
def obb_user_profile_schema_json():
    """"""
    return obb.user.profile.schema_json()

@xl_func(category="OpenBB", name="obb.user.profile.update_forward_refs", disable_function_wizard_calc=True)
def obb_user_profile_update_forward_refs():
    """
        Try to update ForwardRefs on fields based on this Model, globalns and localns.
        """
    return obb.user.profile.update_forward_refs()


@xl_func(category="OpenBB", name="obb.user.profile.validate", disable_function_wizard_calc=True)
def obb_user_profile_validate(value):
    """"""
    return obb.user.profile.validate(value)

@xl_func(category="OpenBB", name="obb.user.schema", disable_function_wizard_calc=True)
def obb_user_schema(by_alias=True, ref_template='#/definitions/{model}'):
    """"""
    return obb.user.schema(by_alias, ref_template)

@xl_func(category="OpenBB", name="obb.user.schema_json", disable_function_wizard_calc=True)
def obb_user_schema_json():
    """"""
    return obb.user.schema_json()

@xl_func(category="OpenBB", name="obb.user.update_forward_refs", disable_function_wizard_calc=True)
def obb_user_update_forward_refs():
    """
        Try to update ForwardRefs on fields based on this Model, globalns and localns.
        """
    return obb.user.update_forward_refs()

@xl_func(category="OpenBB", name="obb.user.validate", disable_function_wizard_calc=True)
def obb_user_validate(value):
    """"""
    return obb.user.validate(value)

