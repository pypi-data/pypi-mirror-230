Metadata-Version: 2.1
Name: phyber_numint
Version: 0.1.0
Summary: A simple package to perform numerical integration easily
Home-page: 
Author: Lautaro Silbergleit
Author-email: lautisilbergleit@gmail.com
License: MIT
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Visualization
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# Phyber NumInt

## A numerical integrator for solving ODE systems

A simple package to solving ODE with different algorithms, written as explicitly as possible. I created this for a University course.

To use it you simply create an instance of the class ODEIntegrator

It takes the following parameters

- ```F``` that's the function that represents the ODE system (X' = F(X))
- ```X0``` that's the initial conditions
- ```ti``` the initial time
- ```tf``` the final time
- ```dt``` the time step

The function ```F``` should be structured in the following fashion

```python
def F_lorenz(t, X, sigma, beta, rho):
    '''
        x' = sigma(y - x)
        y' = x(rho - z) - y
        z' = x*y - beta*z
    '''
    x, y, z = X
    dxdt = sigma * (y - x)
    dydt = x * (rho - z) - y
    dzdt = x * y - beta * z
    return (dxdt, dydt, dzdt)
```

Then, the method ```solve``` of ```ODEIntegrator``` can be called with the ```method``` argument. The ```method``` argument is an enum member of IntegrationMethods. The following exist

- ```EULER_FORWARD```
- ```EULER_BACKWARD```
- ```EULER_IMPROVED```
- ```EULER_IMPROVED```
- ```RUNGE_KUTTA_2```
- ```RUNGE_KUTTA_3```
- ```RUNGE_KUTTA_4```
- ```RUNGE_KUTTA_FEHLBERG_45```

For example, ```ode_integrator.solve(IntegrationMethod.EULER_FORWARD)```

Examples in the file *examples.py*
