import pathlib

import invoke

from . import _config, printing, python


@invoke.task
def run(context: invoke.Context, command: str) -> None:
    """Execute alembic command."""
    config = _config.Config.from_context(context)
    python.run(
        context,
        command=f"{config.alembic.command} {command}",
    )


@invoke.task
def autogenerate(
    context: invoke.Context,
    message: str = "",
) -> None:
    """Autogenerate new version with `message` title.

    Similar to the `manage.py makemigration` command in Django. But you always
    have to check generated versions before upgrade and fix it manually
    if it's necessary.

    """
    if not message:
        raise invoke.Exit(
            code=1,
            message=(
                'Please, use `-m "Version message"` to set message '
                "for autogenerated version."
            ),
        )
    printing.print_success("Autogenerate migrations")
    config = _config.Config.from_context(context)
    migrations_files = tuple(
        pathlib.Path(config.alembic.migrations_folder).glob("*.py"),
    )
    rev_id = str(len(migrations_files) + 1)
    rev_id = rev_id.rjust(4, "0")
    command = (
        f'revision --autogenerate --message "{message}" --rev-id={rev_id}'
    )
    run(context, command=command)
    printing.print_success(
        "Migrations generated, please verify them and remove alembic messages",
    )


@invoke.task
def upgrade(
    context: invoke.Context,
    version: str = "head",
) -> None:
    """Upgrade database.

    Use `-v version` to upgrade to the passed version.

    Similar to the `manage.py migrate` command in Django. By default upgrade to
    the `head` - the latest version.

    """
    printing.print_success(f"Migrating to version {version}")
    run(context, command=f"upgrade {version}")


@invoke.task
def downgrade(
    context: invoke.Context,
    version: str = "base",
) -> None:
    """Downgrade database.

    Use `-v version` to downgrade to the passed version.

    Similar to the `manage.py migrate` command in Django. By default downgrade
    to `base` (similar to `migrate zero`).

    """
    printing.print_success(f"Migrating to version {version}")
    run(context, command=f"downgrade {version}")


@invoke.task
def check_for_migrations(
    context: invoke.Context,
) -> None:
    """Check if new migration can be generated."""
    printing.print_success("Checking for migration")
    run(context, command="check")


@invoke.task
def check_for_adjust_messages(
    context: invoke.Context,
) -> None:
    """Check migration files for adjust messages."""
    printing.print_success("Checking migration files for adjust messages")
    config = _config.Config.from_context(context)
    files_to_clean = []
    for filepath in pathlib.Path(config.alembic.migrations_folder).glob(
        "*.py",
    ):
        with open(filepath) as migration_file:
            file_text = migration_file.read()
            for adjust_message in config.alembic.adjust_messages:
                if adjust_message in file_text:
                    files_to_clean.append(str(filepath))
                    break

    if files_to_clean:
        log_files_msg = "\n\t".join(files_to_clean)
        log_messages = "\n".join(config.alembic.adjust_messages)
        printing.print_error(
            f"Adjust messages found in this migration files:\n"
            f"\t{log_files_msg}\n"
            "Ensure that these files does not contain following:\n"
            f"{log_messages}",
        )
        raise invoke.Exit(code=1)
