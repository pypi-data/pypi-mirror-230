# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductFineTuningJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'model_id': 'str',
        'base_model_id': 'str',
        'created_at': 'datetime',
        'finished_at': 'datetime',
        'status': 'FineTuningJobStatus',
        'creator_id': 'str',
        'train_file_id': 'str',
        'valid_file_id': 'str',
        'result_file_id': 'str',
        'error': 'str',
        'cloud_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'model_id': 'model_id',
        'base_model_id': 'base_model_id',
        'created_at': 'created_at',
        'finished_at': 'finished_at',
        'status': 'status',
        'creator_id': 'creator_id',
        'train_file_id': 'train_file_id',
        'valid_file_id': 'valid_file_id',
        'result_file_id': 'result_file_id',
        'error': 'error',
        'cloud_id': 'cloud_id'
    }

    def __init__(self, id=None, model_id=None, base_model_id=None, created_at=None, finished_at=None, status=None, creator_id=None, train_file_id=None, valid_file_id=None, result_file_id=None, error=None, cloud_id=None, local_vars_configuration=None):  # noqa: E501
        """ProductFineTuningJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._model_id = None
        self._base_model_id = None
        self._created_at = None
        self._finished_at = None
        self._status = None
        self._creator_id = None
        self._train_file_id = None
        self._valid_file_id = None
        self._result_file_id = None
        self._error = None
        self._cloud_id = None
        self.discriminator = None

        self.id = id
        self.model_id = model_id
        self.base_model_id = base_model_id
        self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        self.status = status
        self.creator_id = creator_id
        self.train_file_id = train_file_id
        if valid_file_id is not None:
            self.valid_file_id = valid_file_id
        if result_file_id is not None:
            self.result_file_id = result_file_id
        if error is not None:
            self.error = error
        self.cloud_id = cloud_id

    @property
    def id(self):
        """Gets the id of this ProductFineTuningJob.  # noqa: E501

        The ID of the fine-tuning job  # noqa: E501

        :return: The id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductFineTuningJob.

        The ID of the fine-tuning job  # noqa: E501

        :param id: The id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model_id(self):
        """Gets the model_id of this ProductFineTuningJob.  # noqa: E501

        A generated ID of the fine-tuned model  # noqa: E501

        :return: The model_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ProductFineTuningJob.

        A generated ID of the fine-tuned model  # noqa: E501

        :param model_id: The model_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def base_model_id(self):
        """Gets the base_model_id of this ProductFineTuningJob.  # noqa: E501

        The ID of the base model used for fine-tuning  # noqa: E501

        :return: The base_model_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._base_model_id

    @base_model_id.setter
    def base_model_id(self, base_model_id):
        """Sets the base_model_id of this ProductFineTuningJob.

        The ID of the base model used for fine-tuning  # noqa: E501

        :param base_model_id: The base_model_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `base_model_id`, must not be `None`")  # noqa: E501

        self._base_model_id = base_model_id

    @property
    def created_at(self):
        """Gets the created_at of this ProductFineTuningJob.  # noqa: E501

        The time the job was submitted  # noqa: E501

        :return: The created_at of this ProductFineTuningJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProductFineTuningJob.

        The time the job was submitted  # noqa: E501

        :param created_at: The created_at of this ProductFineTuningJob.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this ProductFineTuningJob.  # noqa: E501

        The time the job finished  # noqa: E501

        :return: The finished_at of this ProductFineTuningJob.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ProductFineTuningJob.

        The time the job finished  # noqa: E501

        :param finished_at: The finished_at of this ProductFineTuningJob.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def status(self):
        """Gets the status of this ProductFineTuningJob.  # noqa: E501

        The current status of the job  # noqa: E501

        :return: The status of this ProductFineTuningJob.  # noqa: E501
        :rtype: FineTuningJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductFineTuningJob.

        The current status of the job  # noqa: E501

        :param status: The status of this ProductFineTuningJob.  # noqa: E501
        :type: FineTuningJobStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def creator_id(self):
        """Gets the creator_id of this ProductFineTuningJob.  # noqa: E501

        The ID of the user who submitted the job  # noqa: E501

        :return: The creator_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ProductFineTuningJob.

        The ID of the user who submitted the job  # noqa: E501

        :param creator_id: The creator_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_id is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def train_file_id(self):
        """Gets the train_file_id of this ProductFineTuningJob.  # noqa: E501

        ID of the .jsonl file used for training  # noqa: E501

        :return: The train_file_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._train_file_id

    @train_file_id.setter
    def train_file_id(self, train_file_id):
        """Sets the train_file_id of this ProductFineTuningJob.

        ID of the .jsonl file used for training  # noqa: E501

        :param train_file_id: The train_file_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and train_file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `train_file_id`, must not be `None`")  # noqa: E501

        self._train_file_id = train_file_id

    @property
    def valid_file_id(self):
        """Gets the valid_file_id of this ProductFineTuningJob.  # noqa: E501

        ID of the .jsonl file used for validation  # noqa: E501

        :return: The valid_file_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._valid_file_id

    @valid_file_id.setter
    def valid_file_id(self, valid_file_id):
        """Sets the valid_file_id of this ProductFineTuningJob.

        ID of the .jsonl file used for validation  # noqa: E501

        :param valid_file_id: The valid_file_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """

        self._valid_file_id = valid_file_id

    @property
    def result_file_id(self):
        """Gets the result_file_id of this ProductFineTuningJob.  # noqa: E501

        ID of the .json file containing finetuning results. Available after the job is RUNNING  # noqa: E501

        :return: The result_file_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._result_file_id

    @result_file_id.setter
    def result_file_id(self, result_file_id):
        """Sets the result_file_id of this ProductFineTuningJob.

        ID of the .json file containing finetuning results. Available after the job is RUNNING  # noqa: E501

        :param result_file_id: The result_file_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """

        self._result_file_id = result_file_id

    @property
    def error(self):
        """Gets the error of this ProductFineTuningJob.  # noqa: E501

        Error message if the job failed. Null if the job is not in FAILED state  # noqa: E501

        :return: The error of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProductFineTuningJob.

        Error message if the job failed. Null if the job is not in FAILED state  # noqa: E501

        :param error: The error of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def cloud_id(self):
        """Gets the cloud_id of this ProductFineTuningJob.  # noqa: E501

        Cloud id fo the FT job  # noqa: E501

        :return: The cloud_id of this ProductFineTuningJob.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this ProductFineTuningJob.

        Cloud id fo the FT job  # noqa: E501

        :param cloud_id: The cloud_id of this ProductFineTuningJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductFineTuningJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductFineTuningJob):
            return True

        return self.to_dict() != other.to_dict()
