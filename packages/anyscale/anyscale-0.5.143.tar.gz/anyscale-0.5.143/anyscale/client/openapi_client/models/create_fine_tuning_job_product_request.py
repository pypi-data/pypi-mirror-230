# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateFineTuningJobProductRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'train_file_id': 'str',
        'valid_file_id': 'str',
        'context_length': 'int',
        'num_epochs': 'int',
        'base_model_id': 'str',
        'suffix': 'str',
        'cloud_id': 'str'
    }

    attribute_map = {
        'train_file_id': 'train_file_id',
        'valid_file_id': 'valid_file_id',
        'context_length': 'context_length',
        'num_epochs': 'num_epochs',
        'base_model_id': 'base_model_id',
        'suffix': 'suffix',
        'cloud_id': 'cloud_id'
    }

    def __init__(self, train_file_id=None, valid_file_id=None, context_length=None, num_epochs=None, base_model_id=None, suffix=None, cloud_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateFineTuningJobProductRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._train_file_id = None
        self._valid_file_id = None
        self._context_length = None
        self._num_epochs = None
        self._base_model_id = None
        self._suffix = None
        self._cloud_id = None
        self.discriminator = None

        self.train_file_id = train_file_id
        if valid_file_id is not None:
            self.valid_file_id = valid_file_id
        if context_length is not None:
            self.context_length = context_length
        if num_epochs is not None:
            self.num_epochs = num_epochs
        self.base_model_id = base_model_id
        self.suffix = suffix
        self.cloud_id = cloud_id

    @property
    def train_file_id(self):
        """Gets the train_file_id of this CreateFineTuningJobProductRequest.  # noqa: E501

        ID of an uploaded .jsonl file to be used for training  # noqa: E501

        :return: The train_file_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._train_file_id

    @train_file_id.setter
    def train_file_id(self, train_file_id):
        """Sets the train_file_id of this CreateFineTuningJobProductRequest.

        ID of an uploaded .jsonl file to be used for training  # noqa: E501

        :param train_file_id: The train_file_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and train_file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `train_file_id`, must not be `None`")  # noqa: E501

        self._train_file_id = train_file_id

    @property
    def valid_file_id(self):
        """Gets the valid_file_id of this CreateFineTuningJobProductRequest.  # noqa: E501

        ID of an uploaded .jsonl file to be used for validation. Defaults to None  # noqa: E501

        :return: The valid_file_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._valid_file_id

    @valid_file_id.setter
    def valid_file_id(self, valid_file_id):
        """Sets the valid_file_id of this CreateFineTuningJobProductRequest.

        ID of an uploaded .jsonl file to be used for validation. Defaults to None  # noqa: E501

        :param valid_file_id: The valid_file_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: str
        """

        self._valid_file_id = valid_file_id

    @property
    def context_length(self):
        """Gets the context_length of this CreateFineTuningJobProductRequest.  # noqa: E501

        Maximum number of tokens to be considered for each training example. Auto-calculated based on the P95 sequence length of all training examples if not specified  # noqa: E501

        :return: The context_length of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._context_length

    @context_length.setter
    def context_length(self, context_length):
        """Sets the context_length of this CreateFineTuningJobProductRequest.

        Maximum number of tokens to be considered for each training example. Auto-calculated based on the P95 sequence length of all training examples if not specified  # noqa: E501

        :param context_length: The context_length of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [512, 1024, 2048, 4096]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and context_length not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `context_length` ({0}), must be one of {1}"  # noqa: E501
                .format(context_length, allowed_values)
            )

        self._context_length = context_length

    @property
    def num_epochs(self):
        """Gets the num_epochs of this CreateFineTuningJobProductRequest.  # noqa: E501

        Number of epochs to train for. Auto-calculated based on the training file size if not specified  # noqa: E501

        :return: The num_epochs of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_epochs

    @num_epochs.setter
    def num_epochs(self, num_epochs):
        """Sets the num_epochs of this CreateFineTuningJobProductRequest.

        Number of epochs to train for. Auto-calculated based on the training file size if not specified  # noqa: E501

        :param num_epochs: The num_epochs of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: int
        """

        self._num_epochs = num_epochs

    @property
    def base_model_id(self):
        """Gets the base_model_id of this CreateFineTuningJobProductRequest.  # noqa: E501

        An Anyscale Endpoints-supported model that will be used as a base for fine-tuning  # noqa: E501

        :return: The base_model_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_model_id

    @base_model_id.setter
    def base_model_id(self, base_model_id):
        """Sets the base_model_id of this CreateFineTuningJobProductRequest.

        An Anyscale Endpoints-supported model that will be used as a base for fine-tuning  # noqa: E501

        :param base_model_id: The base_model_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `base_model_id`, must not be `None`")  # noqa: E501

        self._base_model_id = base_model_id

    @property
    def suffix(self):
        """Gets the suffix of this CreateFineTuningJobProductRequest.  # noqa: E501

        A suffix (along with a hash) that will be appended to the base_model_id to create a model_id  # noqa: E501

        :return: The suffix of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CreateFineTuningJobProductRequest.

        A suffix (along with a hash) that will be appended to the base_model_id to create a model_id  # noqa: E501

        :param suffix: The suffix of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and suffix is None:  # noqa: E501
            raise ValueError("Invalid value for `suffix`, must not be `None`")  # noqa: E501

        self._suffix = suffix

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CreateFineTuningJobProductRequest.  # noqa: E501


        :return: The cloud_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CreateFineTuningJobProductRequest.


        :param cloud_id: The cloud_id of this CreateFineTuningJobProductRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFineTuningJobProductRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateFineTuningJobProductRequest):
            return True

        return self.to_dict() != other.to_dict()
