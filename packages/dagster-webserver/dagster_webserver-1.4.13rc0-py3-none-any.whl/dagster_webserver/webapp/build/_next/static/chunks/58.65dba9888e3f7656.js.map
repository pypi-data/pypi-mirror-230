{"version":3,"file":"static/chunks/58.65dba9888e3f7656.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/../ui-core/src/runs/useJobReExecution.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Colors, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const sortedKeys = React.useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <Popover\n      placement=\"bottom\"\n      content={\n        <div style={{width: '340px'}}>\n          <Box\n            padding={{vertical: 8, horizontal: 12}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            style={{fontWeight: 600}}\n          >\n            Auto-materialized\n          </Box>\n          <Box\n            flex={{direction: 'column', gap: 12}}\n            padding={{vertical: 12}}\n            style={{maxHeight: '220px', overflowY: 'auto'}}\n          >\n            {sortedKeys.map((assetKey) => {\n              const url = assetDetailsPathForKey(assetKey, {\n                view: 'auto-materialize-history',\n                evaluation: evaluationId,\n              });\n              return (\n                <Box\n                  key={url}\n                  padding={{vertical: 8, left: 12, right: 16}}\n                  flex={{\n                    direction: 'row',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    gap: 8,\n                  }}\n                  style={{overflow: 'hidden'}}\n                >\n                  <Box\n                    flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Icon name=\"asset\" />\n                    <MiddleTruncate text={assetKey.path.join('/')} />\n                  </Box>\n                  <Link to={url} style={{whiteSpace: 'nowrap'}}>\n                    View evaluation\n                  </Link>\n                </Box>\n              );\n            })}\n          </Box>\n        </div>\n      }\n      interactionKind=\"hover\"\n    >\n      <Tag icon=\"auto_materialize_policy\">Auto-materialized</Tag>\n    </Popover>\n  );\n};\n","import * as React from 'react';\n\nexport const useFavicon = (href: string) => {\n  React.useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  NonIdealState,\n  FirstOrSecondPanelToggle,\n  SplitPanelContainer,\n  ErrorBoundary,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode, QueuedState} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSupportsCapturedLogs} from '../instance/useSupportsCapturedLogs';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {ComputeLogPanel} from './ComputeLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogsToolbar, LogType} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  useComputeLogFileKeyForSelection,\n  matchingComputeLogKeyFromStepKey,\n} from './useComputeLogFileKeyForSelection';\nimport {useJobReExecution} from './useJobReExecution';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run: React.FC<RunProps> = (props) => {\n  const {run, runId} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <RunMetadataProvider logs={logs}>\n            {(metadata) => (\n              <RunWithData\n                run={run}\n                runId={runId}\n                logs={logs}\n                logsFilter={logsFilter}\n                metadata={metadata}\n                selectionQuery={selectionQuery}\n                onSetLogsFilter={setLogsFilter}\n                onSetSelectionQuery={onSetSelectionQuery}\n                onShowStateDetails={onShowStateDetails}\n              />\n            )}\n          </RunMetadataProvider>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData: React.FC<RunWithDataProps> = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}) => {\n  const onLaunch = useJobReExecution(run);\n  const splitPanelContainer = React.createRef<SplitPanelContainer>();\n\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: 'structured'},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = React.useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = React.useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = React.useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const supportsCapturedLogs = useSupportsCapturedLogs();\n  const {\n    logCaptureInfo,\n    computeLogFileKey,\n    setComputeLogFileKey,\n  } = useComputeLogFileKeyForSelection({\n    stepKeys,\n    selectionStepKeys,\n    metadata,\n  });\n\n  const logsFilterStepKeys = runtimeGraph\n    ? logsFilter.logQuery\n        .filter((v) => v.token && v.token === 'query')\n        .reduce((accum, v) => {\n          return [...accum, ...filterByQuery(runtimeGraph, v.value).all.map((n) => n.name)];\n        }, [] as string[])\n    : [];\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[];\n    const filterForExactStep = `\"${stepKey}\"`;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        newSelected.splice(index, 1);\n      } else {\n        // select the step otherwise\n        newSelected.push(filterForExactStep);\n      }\n    } else {\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        // deselect the step if already selected\n        newSelected = [];\n      } else {\n        // select the step otherwise\n        newSelected = [filterForExactStep];\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        matchingLogKey && setComputeLogFileKey(matchingLogKey);\n      }\n    }\n\n    onSetSelectionQuery(newSelected.join(', ') || '*');\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.status === 'QUEUED') {\n      return <QueuedState run={run} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <FirstOrSecondPanelToggle axis=\"vertical\" container={splitPanelContainer} />\n                <RunActionButtons\n                  run={run}\n                  onLaunch={onLaunch}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={{query: selectionQuery, keys: selectionStepKeys}}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={{query: selectionQuery, keys: selectionStepKeys}}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={splitPanelContainer}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n              />\n              {logType !== LogType.structured ? (\n                supportsCapturedLogs ? (\n                  <CapturedOrExternalLogPanel\n                    logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n                    logCaptureInfo={logCaptureInfo}\n                    visibleIOType={LogType[logType]}\n                    onSetDownloadUrl={setComputeLogUrl}\n                  />\n                ) : (\n                  <ComputeLogPanel\n                    runId={runId}\n                    computeLogFileKey={stepKeys.length ? computeLogFileKey : undefined}\n                    ioType={LogType[logType]}\n                    setComputeLogUrl={setComputeLogUrl}\n                  />\n                )\n              ) : (\n                <LogsScrollingTable\n                  logs={logs}\n                  filter={logsFilter}\n                  filterStepKeys={logsFilterStepKeys}\n                  filterKey={`${JSON.stringify(logsFilter)}`}\n                  metadata={metadata}\n                />\n              )}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  NonIdealState,\n  PageHeader,\n  Popover,\n  Tag,\n  Heading,\n  FontFamily,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {formatElapsedTime} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nimport {AssetKeyTagCollection} from './AssetKeyTagCollection';\nimport {Run} from './Run';\nimport {RunConfigDialog, RunDetails} from './RunDetails';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag} from './RunTag';\nimport {assetKeysForRun} from './RunUtils';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const {data, loading} = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = React.useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = React.useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={\n            <Heading style={{fontFamily: FontFamily.monospace, fontSize: '20px'}}>\n              {runId.slice(0, 8)}\n            </Heading>\n          }\n          tags={\n            run ? (\n              <>\n                <RunStatusTag status={run.status} />\n                {isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <AssetKeyTagCollection assetKeys={assetKeysForRun(run)} useTags />\n                ) : (\n                  <>\n                    <Tag icon=\"run\">\n                      Run of{' '}\n                      <PipelineReference\n                        pipelineName={run?.pipelineName}\n                        pipelineHrefContext={repoAddress || 'repo-unknown'}\n                        snapshotId={snapshotID}\n                        size=\"small\"\n                        isJob={isJob}\n                      />\n                    </Tag>\n                    <AssetKeyTagCollection assetKeys={run.assets.map((a) => a.key)} useTags />\n                  </>\n                )}\n                <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                  {run?.startTime ? (\n                    <Popover\n                      interactionKind=\"hover\"\n                      placement=\"bottom\"\n                      content={\n                        <Box padding={16}>\n                          <RunDetails run={run} loading={loading} />\n                        </Box>\n                      }\n                    >\n                      <Tag icon=\"schedule\">\n                        <TimestampDisplay\n                          timestamp={run.startTime}\n                          timeFormat={{showSeconds: true, showTimezone: false}}\n                        />\n                      </Tag>\n                    </Popover>\n                  ) : run.updateTime ? (\n                    <Tag icon=\"schedule\">\n                      <TimestampDisplay\n                        timestamp={run.updateTime}\n                        timeFormat={{showSeconds: true, showTimezone: false}}\n                      />\n                    </Tag>\n                  ) : undefined}\n                  {run?.startTime && run?.endTime ? (\n                    <Popover\n                      interactionKind=\"hover\"\n                      placement=\"bottom\"\n                      content={\n                        <Box padding={16}>\n                          <RunDetails run={run} loading={loading} />\n                        </Box>\n                      }\n                    >\n                      <Tag icon=\"timer\">\n                        <span style={{fontVariantNumeric: 'tabular-nums'}}>\n                          {run?.startTime\n                            ? formatElapsedTime(\n                                (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                              )\n                            : '–'}\n                        </span>\n                      </Tag>\n                    </Popover>\n                  ) : null}\n                  {automaterializeTag && run.assetSelection?.length ? (\n                    <AutomaterializeTagWithEvaluation\n                      assetKeys={run.assetSelection}\n                      evaluationId={automaterializeTag.value}\n                    />\n                  ) : null}\n                </Box>\n              </>\n            ) : null\n          }\n          right={run ? <RunConfigDialog run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById: React.FC<{data: RunRootQuery | undefined; runId: string}> = (props) => {\n  const {data, runId} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showLaunchError} from '../launchpad/showLaunchError';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nimport {\n  getReexecutionVariables,\n  handleLaunchResult,\n  LAUNCH_PIPELINE_REEXECUTION_MUTATION,\n  ReExecutionStyle,\n} from './RunUtils';\nimport {RunPageFragment} from './types/RunFragments.types';\nimport {\n  LaunchPipelineReexecutionMutation,\n  LaunchPipelineReexecutionMutationVariables,\n} from './types/RunUtils.types';\n\nexport const useJobReExecution = (run: RunPageFragment | undefined | null) => {\n  const history = useHistory();\n  const [launchPipelineReexecution] = useMutation<\n    LaunchPipelineReexecutionMutation,\n    LaunchPipelineReexecutionMutationVariables\n  >(LAUNCH_PIPELINE_REEXECUTION_MUTATION);\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n\n  return React.useCallback(\n    async (style: ReExecutionStyle) => {\n      if (!run || !run.pipelineSnapshotId || !repoMatch) {\n        return;\n      }\n\n      const variables = getReexecutionVariables({\n        run,\n        style,\n        repositoryLocationName: repoMatch.match.repositoryLocation.name,\n        repositoryName: repoMatch.match.repository.name,\n      });\n\n      try {\n        const result = await launchPipelineReexecution({variables});\n        handleLaunchResult(run.pipelineName, result.data?.launchPipelineReexecution, history, {\n          preserveQuerystring: true,\n          behavior: 'open',\n        });\n      } catch (error) {\n        showLaunchError(error as Error);\n      }\n    },\n    [history, launchPipelineReexecution, repoMatch, run],\n  );\n};\n"],"names":["COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","param","assetKeys","evaluationId","sortedKeys","React","_to_consumable_array","_","sort","a","b","compare","path","join","jsx_runtime","jsx","Popover","placement","content","jsxs","div","style","width","Box","padding","vertical","horizontal","border","side","color","Colors","KeylineGray","fontWeight","flex","direction","gap","maxHeight","overflowY","map","assetKey","url","assetDetailsPathForKey","view","evaluation","left","right","justifyContent","alignItems","overflow","Icon","name","MiddleTruncate","text","Link","to","whiteSpace","interactionKind","Tag","icon","useFavicon","href","el","document","querySelector","previousHref","getAttribute","setAttribute","runStatusFavicon","status","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","props","run","runId","useQueryPersistedLogFilter","logsFilter","setLogsFilter","useQueryPersistedState","queryKey","defaults","selection","selectionQuery","setSelectionQuery","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","concat","onShowStateDetails","stepKey","logs","errorNode","find","node","__typename","showCustomAlert","body","PythonErrorInfo","error","onSetSelectionQuery","query","_object_spread_props","_object_spread","logQuery","token","value","RunContext","Provider","LogsProvider","RunMetadataProvider","metadata","RunWithData","onSetLogsFilter","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","onLaunch","useJobReExecution","splitPanelContainer","logType","setQueryLogType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","keys","steps","stepKeys","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterByQuery","all","n","supportsCapturedLogs","useSupportsCapturedLogs","useComputeLogFileKeyForSelection","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","logsFilterStepKeys","filter","v","reduce","accum","Fragment","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","QueuedState","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","FirstOrSecondPanelToggle","container","RunActionButtons","graph","onClickStep","evt","newSelected","index","indexOf","filterForExactStep","shiftKey","k","includes","splice","push","length","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","onSetSelection","focusedTime","NonIdealState","title","GanttChartLoadingState","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","ComputeLogPanel","undefined","ioType","LogsScrollingTable","filterStepKeys","filterKey","styled","withConfig","RunRoot","useTrackPageView","useParams","useQuery","RUN_ROOT_QUERY","variables","data","loading","pipelineRunOrError","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","repoAddress","match","buildRepoAddress","repository","repositoryLocation","isJob","isThisThingAJob","automaterializeTag","tags","tag","key","DagsterTag","AssetEvaluationID","display","flexDirection","minWidth","height","position","zIndex","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","RunStatusTag","AssetKeyTagCollection","assetKeysForRun","useTags","PipelineReference","pipelineHrefContext","snapshotId","size","assets","wrap","startTime","RunDetails","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","endTime","span","fontVariantNumeric","formatElapsedTime","Date","now","assetSelection","RunConfigDialog","RunById","runs_RunRoot","description","gql","RUN_PAGE_FRAGMENT","history","useHistory","launchPipelineReexecution","useMutation","LAUNCH_PIPELINE_REEXECUTION_MUTATION","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_7__","result","getReexecutionVariables","repositoryLocationName","repositoryName","_state","sent","handleLaunchResult","preserveQuerystring","behavior","showLaunchError"],"sourceRoot":""}