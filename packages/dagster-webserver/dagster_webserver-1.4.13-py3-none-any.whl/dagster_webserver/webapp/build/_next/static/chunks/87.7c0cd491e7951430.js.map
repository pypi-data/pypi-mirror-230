{"version":3,"file":"static/chunks/87.7c0cd491e7951430.js","mappings":"gzBAyBA,IAAMA,EAAsBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBA,IAEnBC,EAAAA,CAAMA,CAACC,WAAW,CAMlBD,EAAAA,CAAMA,CAACE,SAAS,EAI7BC,EAAiBC,EAAAA,IAAU,CAAC,WACvCC,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,iBAEjB,IAAMC,EAAcH,EAAAA,UAAgB,CAACI,EAAAA,CAAmBA,EAAjDD,SAAAA,CACDE,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAClBC,EACA,CACEC,4BAA6B,EAC/B,GAGIC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BL,EAAaM,EAAAA,EAAeA,EACrEC,EAASP,EAARO,IAAAA,CACDC,EAAAA,MAASD,EAAAA,KAAAA,EAAAA,EAAME,QAAQ,CAACC,IAAI,CAE5BC,EAAWhB,EAAAA,OAAa,CAAC,WAC7B,MAAO,CACLiB,QAAS,SAACC,CAAAA,EACR,IAAMC,EAAeC,SAASC,QAAQ,CAACC,IAAI,CAC3C,GAAIH,EAAc,CAChB,IAAMI,EAAS,IAAIC,OAAO,IAA0BC,MAAA,CAAtBN,EAAaO,KAAK,CAAC,GAAG,MAC9CC,EAAST,EAAOU,eAAe,CAACL,GACxBI,EAAOE,QAAQ,KAE3BX,EAAOY,QAAQ,CAACH,EAAOI,IAAI,GAAIJ,EAAOK,EAAE,GAAI,CAACC,UAAW,kBAAkB,GAC1Ef,EAAOgB,cAAc,CAACP,EAAOI,IAAI,IAErC,CACF,CACF,CACF,EAAG,EAAE,SAEL,EASE,GAAAI,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAAC5C,EAAAA,CAAAA,GACD,GAAAyC,EAAAG,GAAA,EAACC,EAAAA,CAAUA,CAAAA,CACTC,MAAO,GAAAL,EAAAG,GAAA,EAACG,EAAAA,EAAOA,CAAAA,UAAEtC,IACjBuC,KAAM,GAAAP,EAAAG,GAAA,EAACK,EAAAA,CAAYA,CAAAA,CAACC,IAAI,SAASnC,aAAcA,MAEjD,GAAA0B,EAAAG,GAAA,EAACO,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,EACtCC,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAGC,MAAOxD,EAAAA,CAAMA,CAACC,WAAW,WAE5D,GAAAsC,EAAAC,IAAA,EAACiB,EAAAA,EAAUA,CAAAA,WAAC,oBACO,GAAAlB,EAAAG,GAAA,EAACgB,EAAAA,EAAIA,CAAAA,CAACC,MAAO,CAACC,SAAU,MAAM,WAAI5C,EAAK6C,OAAO,QAGnE,GAAAtB,EAAAG,GAAA,EAACoB,EAAAA,CAAmBA,CAAAA,CAClBC,MAAO9C,GAAU,GACjB+C,QAAS,CAACC,SAAU,GAAMC,YAAa,GAAMC,KAAM,MAAM,EACzD/C,SAAUA,EACVgD,MAAO,CAAC,kBAAkB,MAzB5B,GAAA7B,EAAAG,GAAA,EAACO,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAE,WACzB,GAAAZ,EAAAG,GAAA,EAAC2B,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,aA4BzB,EAIAC,CAAAA,EAAA,QAAepE,EAER,IAAMQ,EAAwB6D,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConfig.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import 'codemirror/addon/search/searchcursor';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  PageHeader,\n  Spinner,\n  Code,\n  Heading,\n  StyledRawCodeMirror,\n  Subheading,\n} from '@dagster-io/ui-components';\nimport CodeMirror from 'codemirror';\nimport * as React from 'react';\nimport {createGlobalStyle} from 'styled-components';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {InstanceConfigQuery, InstanceConfigQueryVariables} from './types/InstanceConfig.types';\n\nconst InstanceConfigStyle = createGlobalStyle`\n  .CodeMirror.cm-s-instance-config {\n    box-shadow: 0 1px 0 ${Colors.KeylineGray};\n    height: 100%;\n  }\n\n  .CodeMirror.cm-s-instance-config {\n    .config-highlight {\n      background-color: ${Colors.Yellow200};\n    }\n`;\n\nexport const InstanceConfig = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Configuration');\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<InstanceConfigQuery, InstanceConfigQueryVariables>(\n    INSTANCE_CONFIG_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const config = data?.instance.info;\n\n  const handlers = React.useMemo(() => {\n    return {\n      onReady: (editor: CodeMirror.Editor) => {\n        const documentHash = document.location.hash;\n        if (documentHash) {\n          const target = new RegExp(`^${documentHash.slice(1)}:`);\n          const cursor = editor.getSearchCursor(target);\n          const found = cursor.findNext();\n          if (found) {\n            editor.markText(cursor.from(), cursor.to(), {className: 'config-highlight'});\n            editor.scrollIntoView(cursor.from());\n          }\n        }\n      },\n    };\n  }, []);\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <InstanceConfigStyle />\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"config\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>\n          Dagster version: <Code style={{fontSize: '16px'}}>{data.version}</Code>\n        </Subheading>\n      </Box>\n      <StyledRawCodeMirror\n        value={config || ''}\n        options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n        handlers={handlers}\n        theme={['instance-config']}\n      />\n    </>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConfig;\n\nexport const INSTANCE_CONFIG_QUERY = gql`\n  query InstanceConfigQuery {\n    version\n    instance {\n      id\n      info\n    }\n  }\n`;\n"],"names":["InstanceConfigStyle","createGlobalStyle","Colors","KeylineGray","Yellow200","InstanceConfig","React","useTrackPageView","useDocumentTitle","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONFIG_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","config","instance","info","handlers","onReady","editor","documentHash","document","location","hash","target","RegExp","concat","slice","cursor","getSearchCursor","findNext","markText","from","to","className","scrollIntoView","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","Fragment","jsx","PageHeader","title","Heading","tabs","InstanceTabs","tab","Box","padding","vertical","horizontal","border","side","width","color","Subheading","Code","style","fontSize","version","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","theme","Spinner","purpose","__webpack_exports__","gql"],"sourceRoot":""}