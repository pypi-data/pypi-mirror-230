{"version":3,"file":"reviewRequestModel.js","names":["RB","ReviewRequest","BaseResource","extend","defaults","_","approved","approvalFailure","branch","bugTrackerURL","bugsClosed","commitID","closeDescription","closeDescriptionRichText","dependsOn","description","descriptionRichText","draftReview","lastUpdated","localSitePrefix","repository","reviewURL","state","summary","targetGroups","targetPeople","testingDone","testingDoneRichText","prototype","rspNamespace","extraQueryArgs","attrToJsonMap","deserializedAttrs","initialize","attrs","options","arguments","length","undefined","call","reviews","Backbone","Collection","model","Review","draft","DraftReviewRequest","parentObject","get","extraDraftAttrs","url","SITE_ROOT","isNew","id","createFromCommit","optionsOrCommitID","context","isObject","console","assert","warn","promiseToCallbacks","set","save","createDiff","Diff","createReview","reviewID","extraAttrs","review","DraftReview","add","createScreenshot","screenshotID","Screenshot","createFileAttachment","attributes","FileAttachment","setStarred","starred","isFunction","success","error","complete","newOptions","watched","UserSession","instance","watchedReviewRequests","addImmediately","removeImmediately","close","data","type","CLOSE_DISCARDED","status","CLOSE_SUBMITTED","Promise","reject","Error","close_description","richText","close_description_text_type","postData","changingState","saveOptions","trigger","markUpdated","reopen","timestamp","_lastUpdateTimestamp","beginCheckForUpdates","lastUpdateTimestamp","_checkUpdatesType","ready","setTimeout","_checkForUpdates","bind","CHECK_UPDATES_MSECS","apiCall","prefix","noActivityIndicator","last_update","href","rsp","lastUpdate","toJSON","result","commit_id","create_from_commit_id","_super","apply","parseResourceData","pending","PENDING","discarded","submitted","rawTextFields","raw_text_fields","description_text_type","testing_done_text_type","VISIBILITY_VISIBLE","VISIBILITY_ARCHIVED","VISIBILITY_MUTED"],"sources":["../../../../../../static/rb/js/resources/models/reviewRequestModel.es6.js"],"sourcesContent":["/**\n * A review request.\n *\n * ReviewRequest is the starting point for much of the resource API. Through\n * it, the caller can create drafts, diffs, file attachments, and screenshots.\n *\n * Fields on a ReviewRequest are set by accessing the ReviewRequest.draft\n * object. Through there, fields can be set like any other model and then\n * saved.\n *\n * A review request can be closed by using the close() function, reopened\n * through reopen(), or even permanently destroyed by calling destroy().\n */\nRB.ReviewRequest = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            approved: false,\n            approvalFailure: null,\n            branch: null,\n            bugTrackerURL: null,\n            bugsClosed: null,\n            commitID: null,\n            closeDescription: null,\n            closeDescriptionRichText: false,\n            dependsOn: [],\n            description: null,\n            descriptionRichText: false,\n            draftReview: null,\n            lastUpdated: null,\n            localSitePrefix: null,\n            'public': null,\n            repository: null,\n            reviewURL: null,\n            state: null,\n            summary: null,\n            targetGroups: [],\n            targetPeople: [],\n            testingDone: null,\n            testingDoneRichText: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review_request',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        approvalFailure: 'approval_failure',\n        bugsClosed: 'bugs_closed',\n        closeDescription: 'close_description',\n        closeDescriptionRichText: 'close_description_text_type',\n        dependsOn: 'depends_on',\n        descriptionRichText: 'description_text_type',\n        lastUpdated: 'last_updated',\n        reviewURL: 'url',\n        targetGroups: 'target_groups',\n        targetPeople: 'target_people',\n        testingDone: 'testing_done',\n        testingDoneRichText: 'testing_done_text_type'\n    },\n\n    deserializedAttrs: [\n        'approved',\n        'approvalFailure',\n        'branch',\n        'bugsClosed',\n        'closeDescription',\n        'dependsOn',\n        'description',\n        'lastUpdated',\n        'public',\n        'reviewURL',\n        'summary',\n        'targetGroups',\n        'targetPeople',\n        'testingDone'\n    ],\n\n    /**\n     * Initialize the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         Initial values for the model attributes.\n     *\n     *     options (object):\n     *         Additional options for the object construction.\n     *\n     * Option Args:\n     *     extraDraftAttrs (object):\n     *         Additional attributes to include when creating a review request\n     *         draft.\n     */\n    initialize(attrs, options={}) {\n        RB.BaseResource.prototype.initialize.call(this, attrs, options);\n\n        this.reviews = new Backbone.Collection([], {\n            model: RB.Review\n        });\n\n        this.draft = new RB.DraftReviewRequest(_.defaults({\n            parentObject: this,\n            branch: this.get('branch'),\n            bugsClosed: this.get('bugsClosed'),\n            dependsOn: this.get('dependsOn'),\n            description: this.get('description'),\n            descriptionRichText: this.get('descriptionRichText'),\n            summary: this.get('summary'),\n            targetGroups: this.get('targetGroups'),\n            targetPeople: this.get('targetPeople'),\n            testingDone: this.get('testingDone'),\n            testingDoneRichText: this.get('testingDoneRichText')\n        }, options.extraDraftAttrs));\n    },\n\n    /**\n     * Return the URL for syncing this model.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the API resource.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/review-requests/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    },\n\n    /**\n     * Create the review request from an existing commit.\n     *\n     * This can only be used for new ReviewRequest instances, and requires\n     * a commitID option.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Changed the arguments to take the commit ID directly, and return a\n     *     promise rather than use callbacks.\n     *\n     * Args:\n     *     optionsOrCommitID (object or string):\n     *         If invoking in a legacy mode, this is an object with callbacks.\n     *         For new-style callers, this should be a string containing only\n     *         the commit ID to create the review request from.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    createFromCommit(optionsOrCommitID={}, context={}) {\n        if (_.isObject(optionsOrCommitID)) {\n            console.assert(optionsOrCommitID.commitID);\n            console.warn('RB.ReviewRequest.createFromCommit was called ' +\n                         'using callbacks. Callers should be updated to ' +\n                         'use promises instead.');\n            return RB.promiseToCallbacks(optionsOrCommitID, context, () =>\n                this.createFromCommit(optionsOrCommitID.commitID));\n        }\n\n        console.assert(optionsOrCommitID);\n        console.assert(this.isNew());\n\n        this.set('commitID', optionsOrCommitID);\n\n        return this.save({ createFromCommit: true });\n    },\n\n    /**\n     * Create a Diff object for this review request.\n     *\n     * Returns:\n     *     RB.Diff:\n     *     The new diff model.\n     */\n    createDiff() {\n        return new RB.Diff({\n            parentObject: this\n        });\n    },\n\n    /**\n     * Create a Review object for this review request.\n     *\n     * If an ID is specified, the Review object will reference that ID.\n     * Otherwise, it is considered a draft review, and will either return\n     * the existing one (if the draftReview attribute is set), or create\n     * a new one (and set the attribute).\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review, for existing reviews.\n     *\n     *     extraAttrs (object):\n     *         Additional attributes to set on new models.\n     *\n     * Returns:\n     *     RB.Review:\n     *     The new review object.\n     */\n    createReview(reviewID, extraAttrs={}) {\n        let review;\n\n        if (reviewID === undefined) {\n            review = this.get('draftReview');\n\n            if (review === null) {\n                review = new RB.DraftReview({\n                    parentObject: this\n                });\n\n                this.set('draftReview', review);\n            }\n        } else {\n            review = this.reviews.get(reviewID);\n\n            if (!review) {\n                review = new RB.Review(_.defaults({\n                    parentObject: this,\n                    id: reviewID\n                }, extraAttrs));\n                this.reviews.add(review);\n            }\n\n        }\n\n        return review;\n    },\n\n    /**\n     * Create a Screenshot object for this review request.\n     *\n     * Args:\n     *     screenshotID (number):\n     *         The ID of the screenshot, for existing screenshots.\n     *\n     * Returns:\n     *     RB.Screenshot:\n     *     The new screenshot object.\n     */\n    createScreenshot(screenshotID) {\n        return new RB.Screenshot({\n            parentObject: this,\n            id: screenshotID\n        });\n    },\n\n    /**\n     * Create a FileAttachment object for this review request.\n     *\n     * Args:\n     *     attributes (object):\n     *         Additional attributes to include on the new model.\n     *\n     * Returns:\n     *     RB.FileAttachment:\n     *     The new file attachment object.\n     */\n    createFileAttachment(attributes) {\n        return new RB.FileAttachment(_.defaults({\n            parentObject: this\n        }, attributes));\n    },\n\n    /**\n     * Mark a review request as starred or unstarred.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether the review request is starred.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    setStarred(starred, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequest.setStarred was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.setStarred(starred));\n        }\n\n        const watched = RB.UserSession.instance.watchedReviewRequests;\n        return starred ? watched.addImmediately(this)\n                       : watched.removeImmediately(this);\n    },\n\n    /**\n     * Close the review request.\n     *\n     * A 'type' option must be provided, which must match one of the\n     * close types (ReviewRequest.CLOSE_DISCARDED or\n     * ReviewRequest.CLOSE_SUBMITTED).\n     *\n     * An optional description can be set by passing a 'description' option.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and changed to return a promise.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async close(options, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequest.close was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.close(newOptions));\n        }\n\n        const data = {};\n\n        console.assert(options);\n\n        if (options.type === RB.ReviewRequest.CLOSE_DISCARDED) {\n            data.status = 'discarded';\n        } else if (options.type === RB.ReviewRequest.CLOSE_SUBMITTED) {\n            data.status = 'submitted';\n        } else {\n            return Promise.reject(new Error('Invalid close type'));\n        }\n\n        if (options.description !== undefined) {\n            data.close_description = options.description;\n        }\n\n        if (options.richText !== undefined) {\n            data.close_description_text_type =\n                (options.richText ? 'markdown' : 'plain');\n        }\n\n        if (options.postData !== undefined) {\n            _.extend(data, options.postData);\n        }\n\n        const changingState = (options.type !== this.get('state'));\n\n        const saveOptions = _.defaults({\n            data: data,\n        }, options);\n\n        delete saveOptions.type;\n        delete saveOptions.description;\n\n        await this.save(saveOptions);\n\n        if (changingState) {\n            this.trigger('closed');\n        }\n\n        this.markUpdated(this.get('lastUpdated'));\n    },\n\n    /**\n     * Reopen the review request.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and changed to return a promise.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async reopen(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequest.reopen was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.reopen());\n        }\n\n        await this.save({\n            data: {\n                status: 'pending',\n            },\n        });\n\n        this.trigger('reopened');\n        this.markUpdated(this.get('lastUpdated'));\n    },\n\n    /**\n     * Marks the review request as having been updated at the given timestamp.\n     *\n     * This should be used when an action will trigger an update to the\n     * review request's Last Updated timestamp, but where we don't want\n     * a notification later on. The local copy of the timestamp can be\n     * bumped to mark it as up-to-date.\n     *\n     * Args:\n     *     timestamp (string):\n     *         The timestamp to store.\n     */\n    markUpdated(timestamp) {\n        this._lastUpdateTimestamp = timestamp;\n    },\n\n    /**\n     * Begin checking for server-side updates to the review request.\n     *\n     * The 'updated' event will be triggered when there's a new update.\n     *\n     * Args:\n     *     type (string):\n     *         The type of updates to check for.\n     *\n     *     lastUpdateTimestamp (string):\n     *         The timestamp of the last known update.\n     */\n    async beginCheckForUpdates(type, lastUpdateTimestamp) {\n        this._checkUpdatesType = type;\n        this._lastUpdateTimestamp = lastUpdateTimestamp;\n\n        await this.ready();\n        setTimeout(this._checkForUpdates.bind(this),\n                   RB.ReviewRequest.CHECK_UPDATES_MSECS);\n    },\n\n    /**\n     * Check for updates.\n     *\n     * This is called periodically after an initial call to\n     * beginCheckForUpdates. It will see if there's a new update yet on the\n     * server, and if there is, trigger the 'updated' event.\n     */\n    _checkForUpdates() {\n        RB.apiCall({\n            type: 'GET',\n            prefix: this.get('sitePrefix'),\n            noActivityIndicator: true,\n            url: this.get('links').last_update.href,\n            success: rsp => {\n                const lastUpdate = rsp.last_update;\n\n                if ((!this._checkUpdatesType ||\n                     this._checkUpdatesType === lastUpdate.type) &&\n                    this._lastUpdateTimestamp !== lastUpdate.timestamp) {\n                    this.trigger('updated', lastUpdate);\n                }\n\n                this._lastUpdateTimestamp = lastUpdate.timestamp;\n\n                setTimeout(this._checkForUpdates.bind(this),\n                           RB.ReviewRequest.CHECK_UPDATES_MSECS);\n            }\n        });\n    },\n\n    /**\n     * Serialize for sending to the server.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Option Args:\n     *     createFromCommit (boolean):\n     *         Whether this save is going to create a new review request from\n     *         an existing committed change.\n     *\n     * Returns:\n     *     object:\n     *     Data suitable for passing to JSON.stringify.\n     */\n    toJSON(options={}) {\n        if (this.isNew()) {\n            const commitID = this.get('commitID');\n            const repository = this.get('repository');\n            const result = {};\n\n            if (commitID) {\n                result.commit_id = commitID;\n\n                if (options.createFromCommit) {\n                    result.create_from_commit_id = true;\n                }\n            }\n\n            if (repository) {\n                result.repository = repository;\n            }\n\n            return result;\n        } else {\n            return _super(this).toJSON.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const state = {\n            pending: RB.ReviewRequest.PENDING,\n            discarded: RB.ReviewRequest.CLOSE_DISCARDED,\n            submitted: RB.ReviewRequest.CLOSE_SUBMITTED\n        }[rsp.status];\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.state = state;\n        data.closeDescriptionRichText =\n            (rawTextFields.close_description_text_type === 'markdown');\n        data.descriptionRichText =\n            (rawTextFields.description_text_type === 'markdown');\n        data.testingDoneRichText =\n            (rawTextFields.testing_done_text_type === 'markdown');\n\n        return data;\n    }\n}, {\n    CHECK_UPDATES_MSECS: 5 * 60 * 1000, // Every 5 minutes\n\n    CLOSE_DISCARDED: 1,\n    CLOSE_SUBMITTED: 2,\n    PENDING: 3,\n\n    VISIBILITY_VISIBLE: 1,\n    VISIBILITY_ARCHIVED: 2,\n    VISIBILITY_MUTED: 3\n});\n"],"mappings":"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"}