# coding: utf-8

"""
    Radarr

    Radarr API docs  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from radarr.models.rating_child import RatingChild

class Ratings(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    imdb: Optional[RatingChild]
    tmdb: Optional[RatingChild]
    metacritic: Optional[RatingChild]
    rotten_tomatoes: Optional[RatingChild]
    __properties = ["imdb", "tmdb", "metacritic", "rottenTomatoes"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Ratings:
        """Create an instance of Ratings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of imdb
        if self.imdb:
            _dict['imdb'] = self.imdb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tmdb
        if self.tmdb:
            _dict['tmdb'] = self.tmdb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metacritic
        if self.metacritic:
            _dict['metacritic'] = self.metacritic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotten_tomatoes
        if self.rotten_tomatoes:
            _dict['rottenTomatoes'] = self.rotten_tomatoes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Ratings:
        """Create an instance of Ratings from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Ratings.parse_obj(obj)

        _obj = Ratings.parse_obj({
            "imdb": RatingChild.from_dict(obj.get("imdb")) if obj.get("imdb") is not None else None,
            "tmdb": RatingChild.from_dict(obj.get("tmdb")) if obj.get("tmdb") is not None else None,
            "metacritic": RatingChild.from_dict(obj.get("metacritic")) if obj.get("metacritic") is not None else None,
            "rotten_tomatoes": RatingChild.from_dict(obj.get("rottenTomatoes")) if obj.get("rottenTomatoes") is not None else None
        })
        return _obj

