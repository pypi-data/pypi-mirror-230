stages:
  - check
  - test
  - deploy

.default_rules:
  rules:
    # Create pipelines for merge request events
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Create a pipeline for the default branch
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # Dont create a branch pipeline while there are open merge requests
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never

.on_version_tag_rule:
  rules:
    # Create a pipeline if a version tag was created
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+([ab]\d+)?$/'

workflow:
  rules:
    # Create pipelines for merge request events
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Create a pipeline for the default branch
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # Create a pipeline if a version tag was created
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+([ab]\d+)?$/'
    # Dont create a branch pipeline while there are open merge requests
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never

include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml

# Setup pip cache so that it can be reused between jobs
variables:
  # Always use python version 3 for imported jobs
  ASDF_PYTHON_VERSION: '3.10'
  # Deploy using upload token
  TWINE_PASSWORD: '${PYPI_UPLOAD_TOKEN}'
  TWINE_USERNAME: '__token__'

default:
  tags:
    - python
    - docker
  interruptible: true
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/python_env:3.8
  before_script:
    - apt-get update
    - python -V
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - rm -rf docs/_build docs/_stubs
    - ls -la
    - pip install .[develop] # set correct version

isort:
  stage: check
  script:
    - pip install isort
    - isort -c -v .

black:
  stage: check
  script:
    - pip install black
    - black --check --config pyproject.toml eta_utility/ test/

flake8:
  stage: check
  script:
    - pip install flake8-json
    - flake8 --version
    - flake8 --toml-config=pyproject.toml --format=codeclimate --tee --output-file=flake8.json eta_utility examples test
  artifacts:
    reports:
      codequality: flake8.json

mypy:
  stage: check
  script:
    - pip install "stable_baselines3>=1.8,<1.9"
    - mypy -V
    - mypy --config-file pyproject.toml

check-julia:
  stage: check
  image: julia:1.7.2
  before_script: []
  script:
    - julia -e '
      using Pkg;
      Pkg.add("JuliaFormatter");
      using JuliaFormatter;
      if !format("eta_utility/ju_extensions", verbose=true) & !format("test/resources/")
      @error "Some files have not been formatted !!!";
      exit(1);
      end'

license_scanning:
  stage: check
  before_script: []
  rules:
    - !reference [.default_rules, rules]

secret_detection:
  stage: check
  before_script: []
  rules:
    - !reference [.default_rules, rules]

test3.8:
  stage: test
  script:
    - pip install pytest pytest-cov
    - pytest --cov
  retry:
    max: 1
    when: script_failure

test3.9:
  stage: test
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/python_env:3.9
  script:
    - pip install pytest pytest-cov
    - pytest --cov
  retry:
    max: 1
    when: script_failure

test3.10:
  stage: test
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/python_env:3.10
  script:
    - pip install pytest pytest-cov
    - pytest --cov
  retry:
    max: 1
    when: script_failure

test3.10_updated_deps:
  stage: test
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/python_env:3.10
  script:
    - pip install --upgrade .[develop] --upgrade-strategy=only-if-needed
    - pip install pytest pytest-cov
    - pytest --cov
  allow_failure: true
  retry:
    max: 1
    when: script_failure

test-julia:
  stage: test
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/pyjulia_env:latest
  before_script:
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - source /usr/src/app/venv/bin/activate
    - python -V
    - pip install .[develop] # set correct version
  script:
    - julia -e '
      ENV["PYTHON"] = Sys.which("python");
      ENV["PYCALL_JL_RUNTIME_PYTHON"] = Sys.which("python");
      using Pkg;
      Pkg.activate("eta_utility/ju_extensions");
      Pkg.instantiate();
      Pkg.test()'
  retry:
    max: 1
    when: script_failure

test-pyjulia:
  stage: test
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/pyjulia_env:latest
  before_script:
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - source /usr/src/app/venv/bin/activate
    - python -V
    - pip install .[develop] # set correct version
    - install-julia
  script:
    - python-jl -m pytest test/test_etax/test_agents.py::TestNSGA2
  retry:
    max: 1
    when: script_failure

linkcheck-docs:
  stage: test
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/pyjulia_env:latest
  before_script:
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - source /usr/src/app/venv/bin/activate
    - python -V
    - pip install .[develop] # set correct version
    - install-julia
  script:
    - apt-get --yes install libgl1-mesa-glx
    - pip install sphinx sphinx-rtd-theme
    - rm -rf docs/_build docs/_stubs
    - cd docs
    - python -m sphinx -b linkcheck . _build/linkcheck
  retry:
    max: 2
    when: script_failure

build_local:
  stage: deploy
  variables:
    TWINE_PASSWORD: '${CI_JOB_TOKEN}'
    TWINE_USERNAME: 'gitlab-ci-token'
  script:
    - rm -rf dist build
    - pip install build twine
    - python -m build --sdist --wheel
    - twine check dist/* && twine upload --verbose --repository-url https://$CI_SERVER_HOST/api/v4/projects/$CI_PROJECT_ID/packages/pypi dist/*
  rules:
    - !reference [.on_version_tag_rule, rules]

# build the sources
build:
  stage: deploy
  needs:
    - pages
    - build_local
  script:
    - rm -rf dist
    - pip install build twine
    - python -m build --sdist --wheel
    - twine check dist/* && twine upload --verbose --repository pypi dist/*
  artifacts:
    name: "eta_utility-build-$CI_COMMIT_REF_NAME-$CI_JOB_STATUS"
    paths:
      - dist/
      - eta_utility.egg-info/
  rules:
    - !reference [.on_version_tag_rule, rules]

pages:
  stage: deploy
  image: $CI_REGISTRY/eta-fabrik/public/eta-utility/pyjulia_env:latest
  before_script:
    - apt-get -y install --no-install-recommends git make curl 
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - source /usr/src/app/venv/bin/activate
    - python -V
    - pip install .[develop] # set correct version
    - install-julia
  script:
    - apt-get --yes install libgl1-mesa-glx
    - pip install sphinx sphinx-rtd-theme
    - rm -rf docs/_build docs/_stubs
    - cd docs
    - make html
    - ls
    - ls _build
    - rm -rf ../public/html/*
    - mv _build/html ../public
  artifacts:
    name: "eta_utility-docs-$CI_COMMIT_REF_NAME"
    paths:
      - public/

# Create readthedocs documentation
readthedocs:
  stage: deploy
  needs:
    - pages
    - build_local
  before_script: []
  script:
    - echo $CI_COMMIT_TAG
    - curl -X POST -d "branches=master" -d "token=$READTHEDOCS_TOKEN" https://readthedocs.org/api/v2/webhook/eta-utility/211185/
  rules:
    - !reference [.on_version_tag_rule, rules]
