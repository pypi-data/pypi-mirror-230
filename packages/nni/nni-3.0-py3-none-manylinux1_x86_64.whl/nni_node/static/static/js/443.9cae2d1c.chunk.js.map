{"version":3,"file":"static/js/443.9cae2d1c.chunk.js","mappings":"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","sources":["components/common/CopyButton.tsx","static/model/experimentsManager.ts","components/experimentManagement/expFunction.ts","components/experimentManagement/experimentConst.ts","components/experimentManagement/Header.tsx","components/experimentManagement/TrialIdColumn.tsx","components/experimentManagement/FilterBtns.tsx","components/title/TitleContext.tsx","components/title/Title.tsx","components/experimentManagement/ExperimentManagerIndex.tsx","components/fluent/ChildrenGap.ts","components/nav/slideNav/NNItabs.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\nimport { TOOLTIPSTYLE } from '@static/const';\n\ninterface CopyButtonProps {\n    value: string;\n    hideTooltip?: boolean;\n}\n\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\n\nconst CopyButton = (props: CopyButtonProps): any => {\n    const { value, hideTooltip } = props;\n    const ref = useRef(null);\n    return (\n        <div>\n            <IconButton\n                iconProps={{ iconName: 'Copy' }}\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\n                    event.stopPropagation();\n                    copy(value);\n                    ref.current && (ref as any).current.show();\n                    setTimeout(() => {\n                        ref.current !== null && (ref as any).current.dismiss();\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\n                }}\n                onMouseDown={(e): void => {\n                    e.stopPropagation();\n                }}\n                onMouseUp={(e): void => {\n                    e.stopPropagation();\n                }}\n            />\n            <TooltipHost\n                hidden={hideTooltip}\n                content='Copied'\n                componentRef={ref}\n                delay={0}\n                tooltipProps={TOOLTIPSTYLE}\n            />\n        </div>\n    );\n};\n\nexport default CopyButton;\n","import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                if (error.response) {\n                    this.errorMessage = error.response.data.error;\n                }\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '@static/interface';\nimport { copyAndSort } from '@static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (\n    val: string | string[],\n    type: string,\n    data: AllExperimentList[]\n): AllExperimentList[] => {\n    if (typeof val === 'string' && val !== '') {\n        return data.filter(temp => temp[type] === val);\n    }\n\n    if (Array.isArray(val) && val.length !== 0) {\n        return data.filter(temp => val.includes(temp[type]));\n    }\n\n    return data;\n};\n\nfunction fillOptions(arr: string[]): any {\n    return arr.map(item => ({ key: item, text: item }));\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\nimport { RevToggleKey } from '../fluent/Icon';\nimport { NNILOGO } from '../nav/slideNav/NNItabs';\nimport { gap15, stackStyle } from '../fluent/ChildrenGap';\n\nexport const Hearder = (): any => (\n    <div className='header'>\n        <div className='headerCon'>\n            <Stack className='nav' horizontal>\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\n                    <span className='desktop-logo'>{NNILOGO}</span>\n                    <span className='logoTitle'>Neural Network Intelligence</span>\n                </StackItem>\n                <StackItem grow={70} className='navOptions'>\n                    <Stack horizontal horizontalAlign='end' tokens={gap15} styles={stackStyle}>\n                        <Link to='/oview' className='experiment'>\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\n                        </Link>\n                    </Stack>\n                </StackItem>\n            </Stack>\n        </div>\n    </div>\n);\n","import * as React from 'react';\nimport { Stack } from '@fluentui/react';\nimport { AllExperimentList } from '@static/interface';\nimport CopyButton from '../common/CopyButton';\n\ninterface TrialIdColumnProps {\n    item: AllExperimentList;\n}\n\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\n    constructor(props: TrialIdColumnProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { item } = this.props;\n        const hostname = window.location.hostname;\n        const protocol = window.location.protocol;\n        const webuiPortal =\n            item.prefixUrl === null\n                ? `${protocol}//${hostname}:${item.port}/oview`\n                : `${protocol}//${hostname}:${item.port}/${this.formatPrefix(item.prefixUrl)}/oview`;\n        return (\n            <Stack horizontal className='ellipsis idCopy'>\n                {item.status === 'STOPPED' ? (\n                    <div className='idColor'>{item.id}</div>\n                ) : (\n                    <a href={webuiPortal} className='link' target='_blank' rel='noopener noreferrer'>\n                        {item.id}\n                    </a>\n                )}\n                <CopyButton value={item.id} />\n            </Stack>\n        );\n    }\n\n    private formatPrefix(prefix): string {\n        if (prefix.startsWith('/')) {\n            prefix = prefix.slice(1);\n        }\n\n        if (prefix.endsWith('/')) {\n            prefix = prefix.slice(0, prefix.length - 1);\n        }\n\n        return prefix;\n    }\n}\n\nexport default TrialIdColumn;\n","import * as React from 'react';\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\nimport { EXPERIMENTSTATUS } from '@static/const';\nimport { fillOptions } from './expFunction';\n\ninterface FilterBtnsProps {\n    platform: string[];\n    selectedStatus: string[];\n    selectedPlatform: string;\n    selectedStartDate: Date;\n    selectedEndDate: Date;\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\n    setSearchSource: () => void;\n}\n\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\n    constructor(props: FilterBtnsProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const {\n            platform,\n            selectedStatus,\n            selectedPlatform,\n            selectedStartDate,\n            selectedEndDate,\n            selectStatus,\n            selectPlatform,\n            getSelectedData,\n            setSearchSource\n        } = this.props;\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    label='Status'\n                    selectedKeys={selectedStatus}\n                    multiSelect\n                    onChange={selectStatus.bind(this)}\n                    placeholder='Select an option'\n                    options={fillOptions(EXPERIMENTSTATUS)}\n                    className='filter-condition-status'\n                />\n                <Dropdown\n                    label='Platform'\n                    selectedKey={selectedPlatform}\n                    onChange={selectPlatform.bind(this)}\n                    placeholder='Select an option'\n                    options={fillOptions(platform)}\n                    className='filter-condition-platform'\n                />\n                <DatePicker\n                    label='Start time'\n                    firstDayOfWeek={DayOfWeek.Sunday}\n                    showMonthPickerAsOverlay={true}\n                    placeholder='Select a date...'\n                    ariaLabel='Select a date'\n                    value={selectedStartDate}\n                    onSelectDate={getSelectedData.bind(this, 'start')}\n                    className='filter-condition-date'\n                />\n                <DatePicker\n                    label='End time'\n                    firstDayOfWeek={DayOfWeek.Sunday}\n                    showMonthPickerAsOverlay={true}\n                    placeholder='Select a date...'\n                    ariaLabel='Select a date'\n                    value={selectedEndDate}\n                    onSelectDate={getSelectedData.bind(this, 'end')}\n                    className='filter-condition-date'\n                />\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\n                    <Icon iconName='Refresh' />\n                    <span className='margin'>Reset</span>\n                </DefaultButton>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default FilterBtns;\n","import * as React from 'react';\n\nexport const TitleContext = React.createContext({\n    text: '',\n    icon: ''\n});\n","import React, { useContext } from 'react';\nimport { Stack, Icon } from '@fluentui/react';\nimport { TitleContext } from './TitleContext';\nimport '@style/experiment/overview/overviewTitle.scss';\n\nexport const Title = (): any => {\n    const { icon, text } = useContext(TitleContext);\n    return (\n        <Stack horizontal className='panelTitle'>\n            <Icon iconName={icon} />\n            <span className='fontColor333'>{text}</span>\n        </Stack>\n    );\n};\n","import * as React from 'react';\nimport {\n    Stack,\n    DetailsList,\n    DefaultButton,\n    Icon,\n    SearchBox,\n    IColumn,\n    IStackTokens,\n    MessageBar,\n    MessageBarType\n} from '@fluentui/react';\nimport { ExperimentsManager } from '@model/experimentsManager';\nimport { expformatTimestamp, copyAndSort } from '@static/function';\nimport { AllExperimentList, SortInfo } from '@static/interface';\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\nimport { Hearder } from './Header';\nimport TrialIdColumn from './TrialIdColumn';\nimport FilterBtns from './FilterBtns';\nimport { TitleContext } from '../title/TitleContext';\nimport { Title } from '../title/Title';\nimport '@style/App.scss';\nimport '@style/nav/nav.scss';\nimport '@style/common/common.scss';\nimport '@style/common/experimentStatusColor.scss';\nimport '@style/common/trialStatus.css';\nimport '@style/experimentManagement/experiment.scss';\n\nconst expTokens: IStackTokens = {\n    childrenGap: 25\n};\n\ninterface ExpListState {\n    columns: IColumn[];\n    platform: string[];\n    errorMessage: string;\n    hideFilter: boolean;\n    searchInputVal: string;\n    selectedStatus: string[];\n    selectedPlatform: string;\n    selectedStartDate?: Date;\n    selectedEndDate?: Date;\n    sortInfo: SortInfo;\n    source: AllExperimentList[];\n    originExperimentList: AllExperimentList[];\n    searchSource: AllExperimentList[];\n}\n\nclass Experiment extends React.Component<{}, ExpListState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            platform: [],\n            columns: this.columns,\n            errorMessage: '',\n            hideFilter: true,\n            searchInputVal: '',\n            selectedStatus: [],\n            selectedPlatform: '',\n            source: [], // data in table\n            originExperimentList: [], // api /experiments-info\n            searchSource: [], // search box search result\n            sortInfo: { field: '', isDescend: false }\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const EXPERIMENTMANAGER = new ExperimentsManager();\n        await EXPERIMENTMANAGER.init();\n        const result = EXPERIMENTMANAGER.getExperimentList();\n        this.setState(() => ({\n            source: result,\n            originExperimentList: result,\n            searchSource: result,\n            platform: EXPERIMENTMANAGER.getPlatformList(),\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\n        }));\n    }\n\n    render(): React.ReactNode {\n        const {\n            platform,\n            hideFilter,\n            selectedStatus,\n            source,\n            selectedPlatform,\n            selectedStartDate,\n            selectedEndDate,\n            errorMessage\n        } = this.state;\n        return (\n            <Stack className='nni experiments-info' style={{ minHeight: window.innerHeight }}>\n                <Hearder />\n                {errorMessage !== '' ? (\n                    <div className='warning'>\n                        <MessageBar messageBarType={MessageBarType.error} isMultiline={true} style={{ width: 400 }}>\n                            {errorMessage}\n                        </MessageBar>\n                    </div>\n                ) : null}\n                <Stack className='contentBox expBackground'>\n                    {/* 64px: navBarHeight; 48: marginTop & Bottom */}\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 112 } }}>\n                        <Stack className='experimentList'>\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\n                                <Title />\n                            </TitleContext.Provider>\n                            <Stack className='box' horizontal>\n                                <div className='search'>\n                                    <SearchBox\n                                        className='search-input'\n                                        placeholder='Search the experiment by name or ID'\n                                        onEscape={this.setOriginSource.bind(this)}\n                                        onClear={this.setOriginSource.bind(this)}\n                                        onChange={this.searchNameAndId.bind(this)}\n                                    />\n                                </div>\n                                <div className='filter'>\n                                    <DefaultButton\n                                        onClick={this.clickFilter.bind(this)}\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\n                                    >\n                                        <Icon iconName='Equalizer' />\n                                        <span className='margin'>Filter</span>\n                                    </DefaultButton>\n                                </div>\n                            </Stack>\n                            <Stack\n                                className={`${hideFilter ? 'hidden' : ''} filter-condition`}\n                                horizontal\n                                tokens={expTokens}\n                            >\n                                <FilterBtns\n                                    platform={platform}\n                                    selectedStatus={selectedStatus}\n                                    selectedPlatform={selectedPlatform}\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    selectedStartDate={selectedStartDate!}\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    selectedEndDate={selectedEndDate!}\n                                    selectStatus={this.selectStatus.bind(this)}\n                                    selectPlatform={this.selectPlatform.bind(this)}\n                                    getSelectedData={this.getSelectedData.bind(this)}\n                                    setSearchSource={this.setSearchSource.bind(this)}\n                                />\n                            </Stack>\n                            <DetailsList\n                                columns={this.columns}\n                                items={source}\n                                setKey='set'\n                                compact={true}\n                                selectionMode={0} // close selector function\n                                className='table'\n                            />\n                        </Stack>\n                    </Stack>\n                </Stack>\n            </Stack>\n        );\n    }\n\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\n        const { columns, source } = this.state;\n        const newColumns: IColumn[] = columns.slice();\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\n        newColumns.forEach((newCol: IColumn) => {\n            if (newCol === currColumn) {\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\n                currColumn.isSorted = true;\n            } else {\n                newCol.isSorted = false;\n                newCol.isSortedDescending = true;\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\n        this.setState(() => ({\n            columns: newColumns,\n            source: newItems,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\n        }));\n    };\n\n    private columns: IColumn[] = [\n        {\n            name: 'Name',\n            key: 'experimentName',\n            fieldName: 'experimentName', // required!\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div>{item.experimentName}</div>\n        },\n        {\n            name: 'ID',\n            key: 'id',\n            fieldName: 'id',\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            className: 'tableHead leftTitle',\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <TrialIdColumn item={item} />\n        },\n        {\n            name: 'Status',\n            key: 'status',\n            fieldName: 'status',\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className={`${item.status} commonStyle`}>{item.status}</div>\n        },\n        {\n            name: 'Port',\n            key: 'port',\n            fieldName: 'port',\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\n                    {item.port !== undefined ? item.port : '--'}\n                </div>\n            )\n        },\n        {\n            name: 'Platform',\n            key: 'platform',\n            fieldName: 'platform',\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\n            isResizable: true,\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className='commonStyle'>{item.platform}</div>\n        },\n        {\n            name: 'Start time',\n            key: 'startTime',\n            fieldName: 'startTime',\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.startTime)}</div>\n        },\n        {\n            name: 'End time',\n            key: 'endTime',\n            fieldName: 'endTime',\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.endTime)}</div>\n        }\n    ];\n\n    private clickFilter(_e: any): void {\n        const { hideFilter } = this.state;\n        if (!hideFilter === true) {\n            this.setSearchSource();\n        }\n        this.setState(() => ({ hideFilter: !hideFilter }));\n    }\n\n    private setOriginSource(): void {\n        let { originExperimentList } = this.state;\n        const { sortInfo } = this.state;\n        if (originExperimentList !== undefined) {\n            originExperimentList = this.commonSelectString(originExperimentList, '');\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\n            this.setState(() => ({\n                source: sortedData\n            }));\n        }\n    }\n\n    private searchNameAndId(_event, newValue): void {\n        const { originExperimentList, sortInfo } = this.state;\n        if (newValue !== undefined) {\n            if (newValue === '') {\n                this.setOriginSource();\n            } else {\n                const searchInput = newValue.trim();\n                let result = originExperimentList.filter(\n                    item =>\n                        (item.experimentName !== null &&\n                            item.experimentName.toLowerCase().includes(searchInput.toLowerCase())) ||\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\n                );\n                result = this.commonSelectString(result, '');\n                const sortedResult = getSortedSource(result, sortInfo);\n                this.setState(() => ({\n                    source: sortedResult,\n                    searchSource: sortedResult\n                }));\n            }\n            this.setState(() => ({\n                searchInputVal: newValue.trim()\n            }));\n        }\n    }\n\n    /***\n     * status, platform\n     * param\n     * data: searchSource\n     * field: no care selected filed\n     */\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\n\n        if (field === 'status') {\n            data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\n        }\n        if (field === 'platform') {\n            data = filterByStatusOrPlatform(selectedStatus, 'status', data);\n        }\n\n        if (field === '') {\n            data = Array.from(\n                new Set([\n                    ...filterByStatusOrPlatform(selectedPlatform, 'platform', data),\n                    ...filterByStatusOrPlatform(selectedStatus, 'status', data)\n                ])\n            );\n        }\n\n        data = data.filter(\n            item =>\n                (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate)) &&\n                (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\n        );\n\n        return data;\n    };\n\n    // status platform startTime endTime\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            const { searchSource, sortInfo, selectedStatus } = this.state;\n            const newSelectedStatus = item.selected\n                ? [...selectedStatus, item.key as string]\n                : selectedStatus.filter(key => key !== item.key);\n            let result = filterByStatusOrPlatform(newSelectedStatus, 'status', searchSource);\n            result = this.commonSelectString(result, 'status');\n            this.setState({\n                selectedStatus: newSelectedStatus,\n                source: getSortedSource(result, sortInfo)\n            });\n        }\n    };\n\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            const { searchSource, sortInfo } = this.state;\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\n            result = this.commonSelectString(result, 'platform');\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\n        }\n    };\n\n    private getSelectedData(type: string, date: Date | null | undefined): void {\n        if (date !== null && date !== undefined) {\n            const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate, searchSource, sortInfo } =\n                this.state;\n            const hasPlatform = selectedPlatform === '' ? false : true;\n\n            // filter status, platform\n            let result = filterByStatusOrPlatform(selectedStatus, 'status', searchSource);\n            if (hasPlatform) {\n                result = result.filter(temp => temp.platform === selectedPlatform);\n            }\n\n            if (type === 'start') {\n                result = result.filter(\n                    item =>\n                        compareDate(new Date(item.startTime), date) &&\n                        (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\n                );\n                this.setState(() => ({\n                    source: getSortedSource(result, sortInfo),\n                    selectedStartDate: date\n                }));\n            } else {\n                result = result.filter(\n                    item =>\n                        compareDate(new Date(item.endTime), date) &&\n                        (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate))\n                );\n                this.setState(() => ({\n                    source: getSortedSource(result, sortInfo),\n                    selectedEndDate: date\n                }));\n            }\n        }\n    }\n\n    // reset\n    private setSearchSource(): void {\n        const { sortInfo, originExperimentList } = this.state;\n        let { searchInputVal } = this.state;\n        let result = JSON.parse(JSON.stringify(originExperimentList));\n        searchInputVal = searchInputVal.trim();\n        // user input some value to filter trial [name, id] first...\n        if (searchInputVal !== '') {\n            // reset experiments list to first filter result\n            result = originExperimentList.filter(\n                item =>\n                    item.id.toLowerCase().includes(searchInputVal.toLowerCase()) ||\n                    (item.experimentName !== null &&\n                        item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()))\n            );\n        }\n        this.setState(() => ({\n            source: getSortedSource(result, sortInfo),\n            selectedStatus: [],\n            selectedPlatform: '',\n            selectedStartDate: undefined,\n            selectedEndDate: undefined\n        }));\n    }\n}\n\nexport default Experiment;\n","import { IStackTokens, IStackStyles } from '@fluentui/react';\n\n// name: gap + specific gap number\n\nconst gap10: IStackTokens = {\n    childrenGap: 10\n};\n\nconst gap15: IStackTokens = {\n    childrenGap: 15\n};\n\nconst stackStyle: IStackStyles = {\n    root: {\n        minWidth: 400,\n        height: 56,\n        display: 'flex',\n        verticalAlign: 'center'\n    }\n};\n\nexport { gap10, gap15, stackStyle };\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { getPrefix } from '@static/function';\nconst activeClassName = 'selected';\nconst OVERVIEWTABS = (\n    <NavLink to='/oview' className={({ isActive }) => (isActive ? `${activeClassName} link` : 'link')}>\n        <span className='common-tabs'>Overview</span>\n    </NavLink>\n);\n\nconst DETAILTABS = (\n    <a href='/detail' className='link'>\n        <span className='common-tabs'>Trials detail</span>\n    </a>\n);\n\nconst NNILOGO = (\n    <NavLink to='/oview'>\n        <img src={(getPrefix() || '') + '/logo.png'} alt='NNI logo' style={{ height: 40 }} />\n    </NavLink>\n);\n\nexport const OVERVIEWTABSNew = () => {\n    const [overview, setOverview] = useState(`${getPrefix() || ''}/icons/overview.png`);\n    return (\n        <NavLink to='/oview' className={({ isActive }) => (isActive ? `${activeClassName} link` : 'link')}>\n            <div\n                className='icon'\n                onClick={() => {\n                    setOverview(`${getPrefix() || ''}/icons/overview-1.png`);\n                }}\n            >\n                {/* <img src={(getPrefix() || '') + '/icons/overview.png'} /> */}\n                <img src={overview} alt='overview' />\n            </div>\n        </NavLink>\n    );\n};\n\nexport { OVERVIEWTABS, DETAILTABS, NNILOGO };\n"],"names":["props","value","hideTooltip","ref","useRef","React","IconButton","iconProps","iconName","styles","icon","fontSize","FontSizes","onClick","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","e","onMouseUp","TooltipHost","hidden","content","componentRef","delay","tooltipProps","TOOLTIPSTYLE","ExperimentsManager","experimentList","platform","errorMessage","getExperimentList","this","getPlatformList","getExpErrorMessage","requestAxios","MANAGER_IP","then","data","platforms","Set","item","undefined","port","JSON","parse","add","sort","a","b","startTime","Array","from","catch","error","response","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","isArray","length","includes","fillOptions","arr","map","key","text","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","className","Stack","horizontal","StackItem","grow","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","gap15","stackStyle","Link","to","CommandBarButton","RevToggleKey","TrialIdColumn","constructor","super","render","hostname","window","location","protocol","webuiPortal","prefixUrl","formatPrefix","status","id","href","target","rel","CopyButton","prefix","startsWith","slice","endsWith","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKeys","multiSelect","onChange","bind","placeholder","options","EXPERIMENTSTATUS","selectedKey","DatePicker","firstDayOfWeek","DayOfWeek","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","Icon","TitleContext","Title","useContext","expTokens","childrenGap","Experiment","state","columns","hideFilter","searchInputVal","originExperimentList","searchSource","async","EXPERIMENTMANAGER","init","result","setState","style","minHeight","innerHeight","MessageBar","messageBarType","MessageBarType","isMultiline","width","Provider","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","DetailsList","items","setKey","compact","selectionMode","onColumnClick","_ev","getColumn","newColumns","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","name","maxWidth","isResizable","onRender","experimentName","expformatTimestamp","endTime","_e","commonSelectString","sortedData","_event","newValue","searchInput","trim","toLowerCase","sortedResult","Date","newSelectedStatus","selected","date","hasPlatform","stringify","gap10","height","NavLink","DETAILTABS","src","getPrefix","alt"],"sourceRoot":""}