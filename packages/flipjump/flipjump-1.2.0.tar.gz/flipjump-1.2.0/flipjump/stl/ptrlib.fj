// ---------- Init


ns stl {
    // Complexity: 2.5w+4
    def ptr_init {
        bit.pointers.ptr_init
        hex.pointers.ptr_init
    }

    // Space Complexity: n+w/4
    //   Initializes a stack of size n (maximal capacity of n bits / hexs / return-addresses).
    // n is the size of the stack.
    def stack_init n {
        hex.pointers.stack_init n
    }
}



// ---------- Functions


ns stl {
    //  Time Complexity: 4w@  (actually a bit smaller)
    // Space Complexity: 8w@  (actually a bit smaller)
    // note: the pop_ret_address is for the future return (counts as space, but not time, complexity).
    def call address @ return_label {
        hex.push_ret_address return_label
        ;address

        pad 2
      return_label:
        hex.pop_ret_address return_label
    }

    //  Time Complexity: 4w@    (actually a bit smaller)
    // Space Complexity: 8.5w@  (actually a bit smaller)
    //
    // note: the pop_ret_address is for the future return (counts as space, but not time, complexity).
    def call address, params_hex_length @ return_label {
        hex.push_ret_address return_label
        ;address

        pad 2
      return_label:
        hex.pop_ret_address return_label
        hex.sp_sub params_hex_length
    }


    //  Time Complexity: w(7phi+29)
    // Space Complexity: 2w@
    // note: jumps to the last-call's pop_ret_address (which counts as time, but not space, complexity).
    def return < hex.pointers.sp {
        hex.ptr_jump hex.pointers.sp
    }


    //  Time Complexity: n(2@)
    // Space Complexity: n(2@+24)
    // (Unsafe if dst is hex.pointers.sp).
    //   dst[:w/4] = sp
    def get_sp dst < hex.pointers.sp {
        hex.mov w/4, dst, hex.pointers.sp
    }
}



// ---------- Fast Call


ns stl {
    // Complexity: @-1
    def fcall label, ret_reg @ ret {
        wflip ret_reg+w, ret, label
        pad 2
      ret:
        wflip ret_reg+w, ret
    }

    // Complexity: 1
    def fret ret_reg {
        ;ret_reg
    }
}
