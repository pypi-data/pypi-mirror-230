{"version":3,"file":"lib_index_js.1e2dc1b3ae89daabd4a4.js","mappings":"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","sources":["webpack://transient-display-data/./src/index.ts","webpack://transient-display-data/./src/transient.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ICommandPalette } from '@jupyterlab/apputils';\n\nimport {\n  CodeConsole,\n  ConsolePanel,\n  IConsoleTracker\n} from '@jupyterlab/console';\n\nimport {\n    TransientHandler\n} from './transient';\n\nimport { AttachedProperty } from '@lumino/properties';\n\nimport { ReadonlyPartialJSONObject } from '@lumino/coreutils';\n\n/**\n * The console widget tracker provider.\n */\nexport const transient: JupyterFrontEndPlugin<void> = {\n  id: 'vatlab/jupyterlab-extension:transient',\n  requires: [IConsoleTracker],\n  optional: [ICommandPalette],\n  activate: activateTransient,\n  autoStart: true\n};\n\nexport default transient;\n\nfunction activateTransient(\n  app: JupyterFrontEnd,\n  tracker: IConsoleTracker,\n  palette: ICommandPalette | null\n) {\n  const { shell } = app;\n  tracker.widgetAdded.connect((sender, widget) => {\n    const console = widget.console;\n\n    const handler = new TransientHandler({\n      sessionContext: console.sessionContext,\n      parent: console\n    });\n    Private.transientHandlerProperty.set(console, handler);\n    console.disposed.connect(() => {\n      handler.dispose();\n    });\n  });\n\n  const { commands } = app;\n  const category = 'Console';\n  const toggleShowTransientMessage = 'console:toggle-show-transient-message';\n\n  // Get the current widget and activate unless the args specify otherwise.\n  function getCurrent(args: ReadonlyPartialJSONObject): ConsolePanel | null {\n    let widget = tracker.currentWidget;\n    let activate = args['activate'] !== false;\n    if (activate && widget) {\n      shell.activateById(widget.id);\n    }\n    return widget;\n  }\n\n  commands.addCommand(toggleShowTransientMessage, {\n    label: args => 'Show Transient Messages',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      const handler = Private.transientHandlerProperty.get(current.console);\n      if (handler) {\n        handler.enabled = !handler.enabled;\n      }\n    },\n    isToggled: () =>\n      tracker.currentWidget !== null &&\n      !! Private.transientHandlerProperty.get(tracker.currentWidget.console)?.enabled,\n    isEnabled: () =>\n      tracker.currentWidget !== null &&\n      tracker.currentWidget === shell.currentWidget\n  });\n\n  if (palette) {\n    palette.addItem({\n      command: toggleShowTransientMessage,\n      category,\n      args: { isPalette: true }\n    });\n  }\n\n  app.contextMenu.addItem({\n    command: toggleShowTransientMessage,\n    selector: '.jp-CodeConsole'\n  });\n}\n\n/*\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An attached property for a console's transient handler.\n   */\n  export const transientHandlerProperty = new AttachedProperty<\n    CodeConsole,\n    TransientHandler | undefined\n  >({\n    name: 'transientHandler',\n    create: () => undefined\n  });\n}","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ISessionContext } from '@jupyterlab/apputils';\n\nimport { CodeCell } from '@jupyterlab/cells';\n\nimport * as nbformat from '@jupyterlab/nbformat';\n\nimport { KernelMessage } from '@jupyterlab/services';\n\nimport { IDisposable } from '@lumino/disposable';\n\nimport { Signal } from '@lumino/signaling';\n\nconst TRANSIENT_CELL_CLASS = 'jp-CodeConsole-transientCell';\n\n/**\n * A handler for capturing API messages from other sessions that should be\n * rendered in a given parent.\n */\nexport class TransientHandler implements IDisposable {\n  /**\n   * Construct a new transient message handler.\n   */\n  constructor(options: TransientHandler.IOptions) {\n    this.sessionContext = options.sessionContext;\n    this.sessionContext.iopubMessage.connect(\n      this.onIOPubMessage,\n      this\n    );\n    this._parent = options.parent;\n  }\n\n  /**\n   * Set whether the handler is able to inject transient cells into a console.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n  }\n\n  /**\n   * The client session used by the foreign handler.\n   */\n  readonly sessionContext: ISessionContext;\n\n  /**\n   * The transient handler's parent receiver.\n   */\n  get parent(): TransientHandler.IReceiver {\n    return this._parent;\n  }\n\n  /**\n   * Test whether the handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose the resources held by the handler.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Handler IOPub messages.\n   *\n   * @returns `true` if the message resulted in a new cell injection or a\n   * previously injected cell being updated and `false` for all other messages.\n   */\n  protected onIOPubMessage(\n    sender: ISessionContext,\n    msg: KernelMessage.IIOPubMessage\n  ): boolean {\n    // Only process messages if Transient cell injection is enabled.\n    if (!this._enabled) {\n      return false;\n    }\n    let kernel = this.sessionContext.session?.kernel;\n    if (!kernel) {\n      return false;\n    }\n\n    // Check whether this message came from an external session.\n    let parent = this._parent;\n    let session = (msg.parent_header as KernelMessage.IHeader).session;\n    if (session === kernel.clientId) {\n      return false;\n    }\n    let msgType = msg.header.msg_type as string;\n    if (msgType !== 'transient_display_data') {\n      return false;\n    }\n    let parentHeader = msg.parent_header as KernelMessage.IHeader;\n    let parentMsgId = parentHeader.msg_id as string;\n    let cell: CodeCell | undefined;\n    cell = this._parent.getCell(parentMsgId);\n    if (!cell) {\n      // if not cell with the same parentMsgId, create a dedicated cell\n      cell = this._newCell(parentMsgId);\n    }\n\n    let output = msg.content as nbformat.IOutput;\n    output.output_type = 'display_data';\n    cell.model.outputs.add(output);\n    parent.update();\n    return true;\n  }\n\n  /**\n   * Create a new code cell for an input originated from a transient session.\n   */\n  private _newCell(parentMsgId: string): CodeCell {\n    let cell = this.parent.createCodeCell();\n    cell.addClass(TRANSIENT_CELL_CLASS);\n    this._parent.addCell(cell, parentMsgId);\n    return cell;\n  }\n\n  private _enabled = true;\n  private _parent: TransientHandler.IReceiver;\n  private _isDisposed = false;\n}\n\n/**\n * A namespace for `TransientHandler` statics.\n */\nexport namespace TransientHandler {\n  /**\n   * The instantiation options for a transient handler.\n   */\n  export interface IOptions {\n    /**\n     * The client session used by the transient handler.\n     */\n    sessionContext: ISessionContext;\n\n    /**\n     * The parent into which the handler will inject code cells.\n     */\n    parent: IReceiver;\n  }\n\n  /**\n   * A receiver of newly created transient cells.\n   */\n  export interface IReceiver {\n    /**\n     * Create a cell.\n     */\n    createCodeCell(): CodeCell;\n\n    /**\n     * Add a newly created cell.\n     */\n    addCell(cell: CodeCell, msgId: string): void;\n\n    /**\n     * Trigger a rendering update on the receiver.\n     */\n    update(): void;\n\n    /**\n     * Get a cell associated with a message id.\n     */\n    getCell(msgId: string): CodeCell | undefined;\n  }\n}\n"],"names":[],"sourceRoot":""}