# -*- coding: utf-8 -*-

"""
petstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from petstore.api_helper import APIHelper
from petstore.configuration import Server
from petstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from petstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from petstore.models.pet import Pet
from petstore.exceptions.error_exception import ErrorException


class PetsController(BaseController):

    """A Controller to access Endpoints in the petstore API."""
    def __init__(self, config):
        super(PetsController, self).__init__(config)

    def create_pets(self,
                    body):
        """Does a POST request to /pets.

        Create a pet and key characteristics

        Args:
            body (Pet): A single Pet object used to create a new Pet

        Returns:
            void: Response from the API. Null response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/pets')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).execute()

    def list_pets(self,
                  limit=None):
        """Does a GET request to /pets.

        List all pets

        Args:
            limit (int, optional): How many items to return at one time (max
                100)

        Returns:
            List[Pet]: Response from the API. A paged array of pets

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/pets')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Pet.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def show_pet_by_id(self,
                       pet_id):
        """Does a GET request to /pets/{petId}.

        Info for a specific pet

        Args:
            pet_id (str): The id of the pet to retrieve

        Returns:
            Pet: Response from the API. Expected response to a valid request

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/pets/{petId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('petId')
                            .value(pet_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Pet.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()
