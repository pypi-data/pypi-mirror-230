# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataEntitiesEntityFullWithAttributesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files_per_drop': 'int',
        'row_delimiter': 'str',
        're_create_table_on_deployment': 'bool',
        'null_text': 'str',
        'format': 'str',
        'last_deployed': 'datetime',
        'last_updated': 'datetime',
        'field_delimiter': 'str',
        'header_lines': 'int',
        'encoding': 'str',
        'serde_properties': 'str',
        'serde': 'str',
        'end_valid_date': 'datetime',
        'start_valid_date': 'datetime',
        'regular_expression': 'str',
        'table_name': 'str',
        'name': 'str',
        'description': 'str',
        'id_provider': 'int',
        'additional_properties': 'str',
        'generate_delta_table': 'bool',
        'id_table_format': 'PersistenceCommonEntitiesDataIngestionTableFormatEnum',
        'source_path': 'str',
        'id_data_intake_process': 'int',
        'id': 'int',
        'tags': 'list[MetadataTagsTagTagTypeSystemCheckDto]',
        'provider_name': 'str',
        'database_name': 'str',
        'data_storage_unit_id': 'int',
        'creation_date': 'datetime',
        'detail': 'str',
        'entity_size': 'int',
        'source': 'str',
        'view_definition': 'str',
        'entity_type': 'DataIngestionEntityTypeEnum',
        'dsu': 'str',
        'image_url': 'str',
        'attributes': 'list[MetadataAttributesAttributeFullDTO]'
    }

    attribute_map = {
        'files_per_drop': 'filesPerDrop',
        'row_delimiter': 'rowDelimiter',
        're_create_table_on_deployment': 'reCreateTableOnDeployment',
        'null_text': 'nullText',
        'format': 'format',
        'last_deployed': 'lastDeployed',
        'last_updated': 'lastUpdated',
        'field_delimiter': 'fieldDelimiter',
        'header_lines': 'headerLines',
        'encoding': 'encoding',
        'serde_properties': 'serdeProperties',
        'serde': 'serde',
        'end_valid_date': 'endValidDate',
        'start_valid_date': 'startValidDate',
        'regular_expression': 'regularExpression',
        'table_name': 'tableName',
        'name': 'name',
        'description': 'description',
        'id_provider': 'idProvider',
        'additional_properties': 'additionalProperties',
        'generate_delta_table': 'generateDeltaTable',
        'id_table_format': 'idTableFormat',
        'source_path': 'sourcePath',
        'id_data_intake_process': 'idDataIntakeProcess',
        'id': 'id',
        'tags': 'tags',
        'provider_name': 'providerName',
        'database_name': 'databaseName',
        'data_storage_unit_id': 'dataStorageUnitId',
        'creation_date': 'creationDate',
        'detail': 'detail',
        'entity_size': 'entitySize',
        'source': 'source',
        'view_definition': 'viewDefinition',
        'entity_type': 'entityType',
        'dsu': 'dsu',
        'image_url': 'imageURL',
        'attributes': 'attributes'
    }

    def __init__(self, files_per_drop=None, row_delimiter=None, re_create_table_on_deployment=None, null_text=None, format=None, last_deployed=None, last_updated=None, field_delimiter=None, header_lines=None, encoding=None, serde_properties=None, serde=None, end_valid_date=None, start_valid_date=None, regular_expression=None, table_name=None, name=None, description=None, id_provider=None, additional_properties=None, generate_delta_table=None, id_table_format=None, source_path=None, id_data_intake_process=None, id=None, tags=None, provider_name=None, database_name=None, data_storage_unit_id=None, creation_date=None, detail=None, entity_size=None, source=None, view_definition=None, entity_type=None, dsu=None, image_url=None, attributes=None):  # noqa: E501
        """MetadataEntitiesEntityFullWithAttributesDto - a model defined in Swagger"""  # noqa: E501
        self._files_per_drop = None
        self._row_delimiter = None
        self._re_create_table_on_deployment = None
        self._null_text = None
        self._format = None
        self._last_deployed = None
        self._last_updated = None
        self._field_delimiter = None
        self._header_lines = None
        self._encoding = None
        self._serde_properties = None
        self._serde = None
        self._end_valid_date = None
        self._start_valid_date = None
        self._regular_expression = None
        self._table_name = None
        self._name = None
        self._description = None
        self._id_provider = None
        self._additional_properties = None
        self._generate_delta_table = None
        self._id_table_format = None
        self._source_path = None
        self._id_data_intake_process = None
        self._id = None
        self._tags = None
        self._provider_name = None
        self._database_name = None
        self._data_storage_unit_id = None
        self._creation_date = None
        self._detail = None
        self._entity_size = None
        self._source = None
        self._view_definition = None
        self._entity_type = None
        self._dsu = None
        self._image_url = None
        self._attributes = None
        self.discriminator = None
        if files_per_drop is not None:
            self.files_per_drop = files_per_drop
        if row_delimiter is not None:
            self.row_delimiter = row_delimiter
        if re_create_table_on_deployment is not None:
            self.re_create_table_on_deployment = re_create_table_on_deployment
        if null_text is not None:
            self.null_text = null_text
        if format is not None:
            self.format = format
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if last_updated is not None:
            self.last_updated = last_updated
        if field_delimiter is not None:
            self.field_delimiter = field_delimiter
        if header_lines is not None:
            self.header_lines = header_lines
        if encoding is not None:
            self.encoding = encoding
        if serde_properties is not None:
            self.serde_properties = serde_properties
        if serde is not None:
            self.serde = serde
        if end_valid_date is not None:
            self.end_valid_date = end_valid_date
        if start_valid_date is not None:
            self.start_valid_date = start_valid_date
        if regular_expression is not None:
            self.regular_expression = regular_expression
        if table_name is not None:
            self.table_name = table_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id_provider is not None:
            self.id_provider = id_provider
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if generate_delta_table is not None:
            self.generate_delta_table = generate_delta_table
        if id_table_format is not None:
            self.id_table_format = id_table_format
        if source_path is not None:
            self.source_path = source_path
        if id_data_intake_process is not None:
            self.id_data_intake_process = id_data_intake_process
        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        if provider_name is not None:
            self.provider_name = provider_name
        if database_name is not None:
            self.database_name = database_name
        if data_storage_unit_id is not None:
            self.data_storage_unit_id = data_storage_unit_id
        if creation_date is not None:
            self.creation_date = creation_date
        if detail is not None:
            self.detail = detail
        if entity_size is not None:
            self.entity_size = entity_size
        if source is not None:
            self.source = source
        if view_definition is not None:
            self.view_definition = view_definition
        if entity_type is not None:
            self.entity_type = entity_type
        if dsu is not None:
            self.dsu = dsu
        if image_url is not None:
            self.image_url = image_url
        if attributes is not None:
            self.attributes = attributes

    @property
    def files_per_drop(self):
        """Gets the files_per_drop of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Entities usually have an associated periodicity. More than one file containing data from the same period can be generated. FilesPerDrop is the number of files expected for an entity in each period of time.  # noqa: E501

        :return: The files_per_drop of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._files_per_drop

    @files_per_drop.setter
    def files_per_drop(self, files_per_drop):
        """Sets the files_per_drop of this MetadataEntitiesEntityFullWithAttributesDto.

        Entities usually have an associated periodicity. More than one file containing data from the same period can be generated. FilesPerDrop is the number of files expected for an entity in each period of time.  # noqa: E501

        :param files_per_drop: The files_per_drop of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._files_per_drop = files_per_drop

    @property
    def row_delimiter(self):
        """Gets the row_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Delimiter to split data by rows. MaximumLength(5).  # noqa: E501

        :return: The row_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._row_delimiter

    @row_delimiter.setter
    def row_delimiter(self, row_delimiter):
        """Sets the row_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.

        Delimiter to split data by rows. MaximumLength(5).  # noqa: E501

        :param row_delimiter: The row_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._row_delimiter = row_delimiter

    @property
    def re_create_table_on_deployment(self):
        """Gets the re_create_table_on_deployment of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        If True, the table associated with this entity will be re-created when the definition of the entity changes.  # noqa: E501

        :return: The re_create_table_on_deployment of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: bool
        """
        return self._re_create_table_on_deployment

    @re_create_table_on_deployment.setter
    def re_create_table_on_deployment(self, re_create_table_on_deployment):
        """Sets the re_create_table_on_deployment of this MetadataEntitiesEntityFullWithAttributesDto.

        If True, the table associated with this entity will be re-created when the definition of the entity changes.  # noqa: E501

        :param re_create_table_on_deployment: The re_create_table_on_deployment of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: bool
        """

        self._re_create_table_on_deployment = re_create_table_on_deployment

    @property
    def null_text(self):
        """Gets the null_text of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        String that defines the Null value. MaximumLength(10).  # noqa: E501

        :return: The null_text of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._null_text

    @null_text.setter
    def null_text(self, null_text):
        """Sets the null_text of this MetadataEntitiesEntityFullWithAttributesDto.

        String that defines the Null value. MaximumLength(10).  # noqa: E501

        :param null_text: The null_text of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._null_text = null_text

    @property
    def format(self):
        """Gets the format of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        The File format. Only applies when the Entity is coming from a file. MaximumLength(10).  # noqa: E501

        :return: The format of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MetadataEntitiesEntityFullWithAttributesDto.

        The File format. Only applies when the Entity is coming from a file. MaximumLength(10).  # noqa: E501

        :param format: The format of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def last_deployed(self):
        """Gets the last_deployed of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Date when the Entity was deployed.  # noqa: E501

        :return: The last_deployed of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this MetadataEntitiesEntityFullWithAttributesDto.

        Date when the Entity was deployed.  # noqa: E501

        :param last_deployed: The last_deployed of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def last_updated(self):
        """Gets the last_updated of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Date when the Entity was updated. NotEmpty.  # noqa: E501

        :return: The last_updated of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MetadataEntitiesEntityFullWithAttributesDto.

        Date when the Entity was updated. NotEmpty.  # noqa: E501

        :param last_updated: The last_updated of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def field_delimiter(self):
        """Gets the field_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Delimiter to split data by columns. MaximumLength(5).  # noqa: E501

        :return: The field_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._field_delimiter

    @field_delimiter.setter
    def field_delimiter(self, field_delimiter):
        """Sets the field_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.

        Delimiter to split data by columns. MaximumLength(5).  # noqa: E501

        :param field_delimiter: The field_delimiter of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._field_delimiter = field_delimiter

    @property
    def header_lines(self):
        """Gets the header_lines of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Number of header lines of the file. NotNull.  # noqa: E501

        :return: The header_lines of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._header_lines

    @header_lines.setter
    def header_lines(self, header_lines):
        """Sets the header_lines of this MetadataEntitiesEntityFullWithAttributesDto.

        Number of header lines of the file. NotNull.  # noqa: E501

        :param header_lines: The header_lines of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._header_lines = header_lines

    @property
    def encoding(self):
        """Gets the encoding of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Specifies the enconding of the Asset, as a text string. MaximumLength(50).  # noqa: E501

        :return: The encoding of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this MetadataEntitiesEntityFullWithAttributesDto.

        Specifies the enconding of the Asset, as a text string. MaximumLength(50).  # noqa: E501

        :param encoding: The encoding of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def serde_properties(self):
        """Gets the serde_properties of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Allows to pass the properties assigned to the SerDe, when SerDe field is defined. This only used if a HDInsight is involved. MaximumLength(200).  # noqa: E501

        :return: The serde_properties of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._serde_properties

    @serde_properties.setter
    def serde_properties(self, serde_properties):
        """Sets the serde_properties of this MetadataEntitiesEntityFullWithAttributesDto.

        Allows to pass the properties assigned to the SerDe, when SerDe field is defined. This only used if a HDInsight is involved. MaximumLength(200).  # noqa: E501

        :param serde_properties: The serde_properties of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._serde_properties = serde_properties

    @property
    def serde(self):
        """Gets the serde of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Optionally specifies a SerDe to use. Only for HDInsight. MaximumLength(100).  # noqa: E501

        :return: The serde of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._serde

    @serde.setter
    def serde(self, serde):
        """Sets the serde of this MetadataEntitiesEntityFullWithAttributesDto.

        Optionally specifies a SerDe to use. Only for HDInsight. MaximumLength(100).  # noqa: E501

        :param serde: The serde of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._serde = serde

    @property
    def end_valid_date(self):
        """Gets the end_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Date of the end of the validity period of the Entity.  # noqa: E501

        :return: The end_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_valid_date

    @end_valid_date.setter
    def end_valid_date(self, end_valid_date):
        """Sets the end_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.

        Date of the end of the validity period of the Entity.  # noqa: E501

        :param end_valid_date: The end_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._end_valid_date = end_valid_date

    @property
    def start_valid_date(self):
        """Gets the start_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Date of the start of the validity period of the Entity. NotNull.  # noqa: E501

        :return: The start_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_valid_date

    @start_valid_date.setter
    def start_valid_date(self, start_valid_date):
        """Sets the start_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.

        Date of the start of the validity period of the Entity. NotNull.  # noqa: E501

        :param start_valid_date: The start_valid_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._start_valid_date = start_valid_date

    @property
    def regular_expression(self):
        """Gets the regular_expression of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Regular expression to match the assetname with this Entity. This expression should match only the files from this Entity, over the rest of Entities. The ?<year>, ?<month>, ?<day> RegEx Groups are supported to automatically expand the dates. NotEmpty, MaximumLength(150).  # noqa: E501

        :return: The regular_expression of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._regular_expression

    @regular_expression.setter
    def regular_expression(self, regular_expression):
        """Sets the regular_expression of this MetadataEntitiesEntityFullWithAttributesDto.

        Regular expression to match the assetname with this Entity. This expression should match only the files from this Entity, over the rest of Entities. The ?<year>, ?<month>, ?<day> RegEx Groups are supported to automatically expand the dates. NotEmpty, MaximumLength(150).  # noqa: E501

        :param regular_expression: The regular_expression of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._regular_expression = regular_expression

    @property
    def table_name(self):
        """Gets the table_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        The name of the table where the content will be populated for this Entity. NotEmpty, MaximumLength(40).  # noqa: E501

        :return: The table_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this MetadataEntitiesEntityFullWithAttributesDto.

        The name of the table where the content will be populated for this Entity. NotEmpty, MaximumLength(40).  # noqa: E501

        :param table_name: The table_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def name(self):
        """Gets the name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        The name of this Entity. NotEmpty, MaximumLength(70).  # noqa: E501

        :return: The name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataEntitiesEntityFullWithAttributesDto.

        The name of this Entity. NotEmpty, MaximumLength(70).  # noqa: E501

        :param name: The name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Description of the entity  # noqa: E501

        :return: The description of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataEntitiesEntityFullWithAttributesDto.

        Description of the entity  # noqa: E501

        :param description: The description of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Identifier of the provider associated with this entity.  # noqa: E501

        :return: The id_provider of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataEntitiesEntityFullWithAttributesDto.

        Identifier of the provider associated with this entity.  # noqa: E501

        :param id_provider: The id_provider of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def additional_properties(self):
        """Gets the additional_properties of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        AdditionalProperties, string typically containing a Json value.  # noqa: E501

        :return: The additional_properties of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this MetadataEntitiesEntityFullWithAttributesDto.

        AdditionalProperties, string typically containing a Json value.  # noqa: E501

        :param additional_properties: The additional_properties of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._additional_properties = additional_properties

    @property
    def generate_delta_table(self):
        """Gets the generate_delta_table of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Flag that determines whether the entity has a delta table generation pending  # noqa: E501

        :return: The generate_delta_table of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: bool
        """
        return self._generate_delta_table

    @generate_delta_table.setter
    def generate_delta_table(self, generate_delta_table):
        """Sets the generate_delta_table of this MetadataEntitiesEntityFullWithAttributesDto.

        Flag that determines whether the entity has a delta table generation pending  # noqa: E501

        :param generate_delta_table: The generate_delta_table of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: bool
        """

        self._generate_delta_table = generate_delta_table

    @property
    def id_table_format(self):
        """Gets the id_table_format of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501


        :return: The id_table_format of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: PersistenceCommonEntitiesDataIngestionTableFormatEnum
        """
        return self._id_table_format

    @id_table_format.setter
    def id_table_format(self, id_table_format):
        """Sets the id_table_format of this MetadataEntitiesEntityFullWithAttributesDto.


        :param id_table_format: The id_table_format of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: PersistenceCommonEntitiesDataIngestionTableFormatEnum
        """

        self._id_table_format = id_table_format

    @property
    def source_path(self):
        """Gets the source_path of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        SourcePath for this entity.  # noqa: E501

        :return: The source_path of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this MetadataEntitiesEntityFullWithAttributesDto.

        SourcePath for this entity.  # noqa: E501

        :param source_path: The source_path of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def id_data_intake_process(self):
        """Gets the id_data_intake_process of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Id of the  data intake process  # noqa: E501

        :return: The id_data_intake_process of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._id_data_intake_process

    @id_data_intake_process.setter
    def id_data_intake_process(self, id_data_intake_process):
        """Sets the id_data_intake_process of this MetadataEntitiesEntityFullWithAttributesDto.

        Id of the  data intake process  # noqa: E501

        :param id_data_intake_process: The id_data_intake_process of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._id_data_intake_process = id_data_intake_process

    @property
    def id(self):
        """Gets the id of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Unique identifier for each Entity. NotNull.  # noqa: E501

        :return: The id of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataEntitiesEntityFullWithAttributesDto.

        Unique identifier for each Entity. NotNull.  # noqa: E501

        :param id: The id of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        List of tags  # noqa: E501

        :return: The tags of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: list[MetadataTagsTagTagTypeSystemCheckDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MetadataEntitiesEntityFullWithAttributesDto.

        List of tags  # noqa: E501

        :param tags: The tags of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: list[MetadataTagsTagTagTypeSystemCheckDto]
        """

        self._tags = tags

    @property
    def provider_name(self):
        """Gets the provider_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Provider name  # noqa: E501

        :return: The provider_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this MetadataEntitiesEntityFullWithAttributesDto.

        Provider name  # noqa: E501

        :param provider_name: The provider_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def database_name(self):
        """Gets the database_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Provider database name  # noqa: E501

        :return: The database_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this MetadataEntitiesEntityFullWithAttributesDto.

        Provider database name  # noqa: E501

        :param database_name: The database_name of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    @property
    def data_storage_unit_id(self):
        """Gets the data_storage_unit_id of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Data Storage Unit Id  # noqa: E501

        :return: The data_storage_unit_id of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._data_storage_unit_id

    @data_storage_unit_id.setter
    def data_storage_unit_id(self, data_storage_unit_id):
        """Sets the data_storage_unit_id of this MetadataEntitiesEntityFullWithAttributesDto.

        Data Storage Unit Id  # noqa: E501

        :param data_storage_unit_id: The data_storage_unit_id of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._data_storage_unit_id = data_storage_unit_id

    @property
    def creation_date(self):
        """Gets the creation_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Creation date for entity  # noqa: E501

        :return: The creation_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this MetadataEntitiesEntityFullWithAttributesDto.

        Creation date for entity  # noqa: E501

        :param creation_date: The creation_date of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def detail(self):
        """Gets the detail of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Detail of entity  # noqa: E501

        :return: The detail of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this MetadataEntitiesEntityFullWithAttributesDto.

        Detail of entity  # noqa: E501

        :param detail: The detail of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def entity_size(self):
        """Gets the entity_size of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Entity size  # noqa: E501

        :return: The entity_size of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: int
        """
        return self._entity_size

    @entity_size.setter
    def entity_size(self, entity_size):
        """Sets the entity_size of this MetadataEntitiesEntityFullWithAttributesDto.

        Entity size  # noqa: E501

        :param entity_size: The entity_size of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: int
        """

        self._entity_size = entity_size

    @property
    def source(self):
        """Gets the source of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Source of entity  # noqa: E501

        :return: The source of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MetadataEntitiesEntityFullWithAttributesDto.

        Source of entity  # noqa: E501

        :param source: The source of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def view_definition(self):
        """Gets the view_definition of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        View definition  # noqa: E501

        :return: The view_definition of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._view_definition

    @view_definition.setter
    def view_definition(self, view_definition):
        """Sets the view_definition of this MetadataEntitiesEntityFullWithAttributesDto.

        View definition  # noqa: E501

        :param view_definition: The view_definition of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._view_definition = view_definition

    @property
    def entity_type(self):
        """Gets the entity_type of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501


        :return: The entity_type of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: DataIngestionEntityTypeEnum
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this MetadataEntitiesEntityFullWithAttributesDto.


        :param entity_type: The entity_type of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: DataIngestionEntityTypeEnum
        """

        self._entity_type = entity_type

    @property
    def dsu(self):
        """Gets the dsu of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Data Storage Unit name  # noqa: E501

        :return: The dsu of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._dsu

    @dsu.setter
    def dsu(self, dsu):
        """Sets the dsu of this MetadataEntitiesEntityFullWithAttributesDto.

        Data Storage Unit name  # noqa: E501

        :param dsu: The dsu of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._dsu = dsu

    @property
    def image_url(self):
        """Gets the image_url of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        Image URL  # noqa: E501

        :return: The image_url of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this MetadataEntitiesEntityFullWithAttributesDto.

        Image URL  # noqa: E501

        :param image_url: The image_url of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def attributes(self):
        """Gets the attributes of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501

        List of attributes of the entity.  # noqa: E501

        :return: The attributes of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :rtype: list[MetadataAttributesAttributeFullDTO]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MetadataEntitiesEntityFullWithAttributesDto.

        List of attributes of the entity.  # noqa: E501

        :param attributes: The attributes of this MetadataEntitiesEntityFullWithAttributesDto.  # noqa: E501
        :type: list[MetadataAttributesAttributeFullDTO]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataEntitiesEntityFullWithAttributesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataEntitiesEntityFullWithAttributesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
