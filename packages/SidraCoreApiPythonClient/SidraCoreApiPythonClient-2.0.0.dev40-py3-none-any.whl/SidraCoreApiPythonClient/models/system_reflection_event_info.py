# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemReflectionEventInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'declaring_type': 'SystemType',
        'reflected_type': 'SystemType',
        'module': 'SystemReflectionModule',
        'custom_attributes': 'list[SystemReflectionCustomAttributeData]',
        'is_collectible': 'bool',
        'metadata_token': 'int',
        'member_type': 'SystemReflectionMemberTypes',
        'attributes': 'SystemReflectionEventAttributes',
        'is_special_name': 'bool',
        'add_method': 'SystemReflectionMethodInfo',
        'remove_method': 'SystemReflectionMethodInfo',
        'raise_method': 'SystemReflectionMethodInfo',
        'is_multicast': 'bool',
        'event_handler_type': 'SystemType'
    }

    attribute_map = {
        'name': 'name',
        'declaring_type': 'declaringType',
        'reflected_type': 'reflectedType',
        'module': 'module',
        'custom_attributes': 'customAttributes',
        'is_collectible': 'isCollectible',
        'metadata_token': 'metadataToken',
        'member_type': 'memberType',
        'attributes': 'attributes',
        'is_special_name': 'isSpecialName',
        'add_method': 'addMethod',
        'remove_method': 'removeMethod',
        'raise_method': 'raiseMethod',
        'is_multicast': 'isMulticast',
        'event_handler_type': 'eventHandlerType'
    }

    def __init__(self, name=None, declaring_type=None, reflected_type=None, module=None, custom_attributes=None, is_collectible=None, metadata_token=None, member_type=None, attributes=None, is_special_name=None, add_method=None, remove_method=None, raise_method=None, is_multicast=None, event_handler_type=None):  # noqa: E501
        """SystemReflectionEventInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._declaring_type = None
        self._reflected_type = None
        self._module = None
        self._custom_attributes = None
        self._is_collectible = None
        self._metadata_token = None
        self._member_type = None
        self._attributes = None
        self._is_special_name = None
        self._add_method = None
        self._remove_method = None
        self._raise_method = None
        self._is_multicast = None
        self._event_handler_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if declaring_type is not None:
            self.declaring_type = declaring_type
        if reflected_type is not None:
            self.reflected_type = reflected_type
        if module is not None:
            self.module = module
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if is_collectible is not None:
            self.is_collectible = is_collectible
        if metadata_token is not None:
            self.metadata_token = metadata_token
        if member_type is not None:
            self.member_type = member_type
        if attributes is not None:
            self.attributes = attributes
        if is_special_name is not None:
            self.is_special_name = is_special_name
        if add_method is not None:
            self.add_method = add_method
        if remove_method is not None:
            self.remove_method = remove_method
        if raise_method is not None:
            self.raise_method = raise_method
        if is_multicast is not None:
            self.is_multicast = is_multicast
        if event_handler_type is not None:
            self.event_handler_type = event_handler_type

    @property
    def name(self):
        """Gets the name of this SystemReflectionEventInfo.  # noqa: E501


        :return: The name of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemReflectionEventInfo.


        :param name: The name of this SystemReflectionEventInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def declaring_type(self):
        """Gets the declaring_type of this SystemReflectionEventInfo.  # noqa: E501


        :return: The declaring_type of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemType
        """
        return self._declaring_type

    @declaring_type.setter
    def declaring_type(self, declaring_type):
        """Sets the declaring_type of this SystemReflectionEventInfo.


        :param declaring_type: The declaring_type of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemType
        """

        self._declaring_type = declaring_type

    @property
    def reflected_type(self):
        """Gets the reflected_type of this SystemReflectionEventInfo.  # noqa: E501


        :return: The reflected_type of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemType
        """
        return self._reflected_type

    @reflected_type.setter
    def reflected_type(self, reflected_type):
        """Sets the reflected_type of this SystemReflectionEventInfo.


        :param reflected_type: The reflected_type of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemType
        """

        self._reflected_type = reflected_type

    @property
    def module(self):
        """Gets the module of this SystemReflectionEventInfo.  # noqa: E501


        :return: The module of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemReflectionModule
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this SystemReflectionEventInfo.


        :param module: The module of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemReflectionModule
        """

        self._module = module

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this SystemReflectionEventInfo.  # noqa: E501


        :return: The custom_attributes of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: list[SystemReflectionCustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this SystemReflectionEventInfo.


        :param custom_attributes: The custom_attributes of this SystemReflectionEventInfo.  # noqa: E501
        :type: list[SystemReflectionCustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def is_collectible(self):
        """Gets the is_collectible of this SystemReflectionEventInfo.  # noqa: E501


        :return: The is_collectible of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_collectible

    @is_collectible.setter
    def is_collectible(self, is_collectible):
        """Sets the is_collectible of this SystemReflectionEventInfo.


        :param is_collectible: The is_collectible of this SystemReflectionEventInfo.  # noqa: E501
        :type: bool
        """

        self._is_collectible = is_collectible

    @property
    def metadata_token(self):
        """Gets the metadata_token of this SystemReflectionEventInfo.  # noqa: E501


        :return: The metadata_token of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this SystemReflectionEventInfo.


        :param metadata_token: The metadata_token of this SystemReflectionEventInfo.  # noqa: E501
        :type: int
        """

        self._metadata_token = metadata_token

    @property
    def member_type(self):
        """Gets the member_type of this SystemReflectionEventInfo.  # noqa: E501


        :return: The member_type of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemReflectionMemberTypes
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this SystemReflectionEventInfo.


        :param member_type: The member_type of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemReflectionMemberTypes
        """

        self._member_type = member_type

    @property
    def attributes(self):
        """Gets the attributes of this SystemReflectionEventInfo.  # noqa: E501


        :return: The attributes of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemReflectionEventAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SystemReflectionEventInfo.


        :param attributes: The attributes of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemReflectionEventAttributes
        """

        self._attributes = attributes

    @property
    def is_special_name(self):
        """Gets the is_special_name of this SystemReflectionEventInfo.  # noqa: E501


        :return: The is_special_name of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_special_name

    @is_special_name.setter
    def is_special_name(self, is_special_name):
        """Sets the is_special_name of this SystemReflectionEventInfo.


        :param is_special_name: The is_special_name of this SystemReflectionEventInfo.  # noqa: E501
        :type: bool
        """

        self._is_special_name = is_special_name

    @property
    def add_method(self):
        """Gets the add_method of this SystemReflectionEventInfo.  # noqa: E501


        :return: The add_method of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemReflectionMethodInfo
        """
        return self._add_method

    @add_method.setter
    def add_method(self, add_method):
        """Sets the add_method of this SystemReflectionEventInfo.


        :param add_method: The add_method of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemReflectionMethodInfo
        """

        self._add_method = add_method

    @property
    def remove_method(self):
        """Gets the remove_method of this SystemReflectionEventInfo.  # noqa: E501


        :return: The remove_method of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemReflectionMethodInfo
        """
        return self._remove_method

    @remove_method.setter
    def remove_method(self, remove_method):
        """Sets the remove_method of this SystemReflectionEventInfo.


        :param remove_method: The remove_method of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemReflectionMethodInfo
        """

        self._remove_method = remove_method

    @property
    def raise_method(self):
        """Gets the raise_method of this SystemReflectionEventInfo.  # noqa: E501


        :return: The raise_method of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemReflectionMethodInfo
        """
        return self._raise_method

    @raise_method.setter
    def raise_method(self, raise_method):
        """Sets the raise_method of this SystemReflectionEventInfo.


        :param raise_method: The raise_method of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemReflectionMethodInfo
        """

        self._raise_method = raise_method

    @property
    def is_multicast(self):
        """Gets the is_multicast of this SystemReflectionEventInfo.  # noqa: E501


        :return: The is_multicast of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_multicast

    @is_multicast.setter
    def is_multicast(self, is_multicast):
        """Sets the is_multicast of this SystemReflectionEventInfo.


        :param is_multicast: The is_multicast of this SystemReflectionEventInfo.  # noqa: E501
        :type: bool
        """

        self._is_multicast = is_multicast

    @property
    def event_handler_type(self):
        """Gets the event_handler_type of this SystemReflectionEventInfo.  # noqa: E501


        :return: The event_handler_type of this SystemReflectionEventInfo.  # noqa: E501
        :rtype: SystemType
        """
        return self._event_handler_type

    @event_handler_type.setter
    def event_handler_type(self, event_handler_type):
        """Sets the event_handler_type of this SystemReflectionEventInfo.


        :param event_handler_type: The event_handler_type of this SystemReflectionEventInfo.  # noqa: E501
        :type: SystemType
        """

        self._event_handler_type = event_handler_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemReflectionEventInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemReflectionEventInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
