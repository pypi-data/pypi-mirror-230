# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureSearchModelsSuggestParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'str',
        'use_fuzzy_matching': 'bool',
        'highlight_post_tag': 'str',
        'highlight_pre_tag': 'str',
        'minimum_coverage': 'float',
        'order_by': 'list[str]',
        'search_fields': 'list[str]',
        'select': 'list[str]',
        'top': 'int'
    }

    attribute_map = {
        'filter': 'filter',
        'use_fuzzy_matching': 'useFuzzyMatching',
        'highlight_post_tag': 'highlightPostTag',
        'highlight_pre_tag': 'highlightPreTag',
        'minimum_coverage': 'minimumCoverage',
        'order_by': 'orderBy',
        'search_fields': 'searchFields',
        'select': 'select',
        'top': 'top'
    }

    def __init__(self, filter=None, use_fuzzy_matching=None, highlight_post_tag=None, highlight_pre_tag=None, minimum_coverage=None, order_by=None, search_fields=None, select=None, top=None):  # noqa: E501
        """MicrosoftAzureSearchModelsSuggestParameters - a model defined in Swagger"""  # noqa: E501
        self._filter = None
        self._use_fuzzy_matching = None
        self._highlight_post_tag = None
        self._highlight_pre_tag = None
        self._minimum_coverage = None
        self._order_by = None
        self._search_fields = None
        self._select = None
        self._top = None
        self.discriminator = None
        if filter is not None:
            self.filter = filter
        if use_fuzzy_matching is not None:
            self.use_fuzzy_matching = use_fuzzy_matching
        if highlight_post_tag is not None:
            self.highlight_post_tag = highlight_post_tag
        if highlight_pre_tag is not None:
            self.highlight_pre_tag = highlight_pre_tag
        if minimum_coverage is not None:
            self.minimum_coverage = minimum_coverage
        if order_by is not None:
            self.order_by = order_by
        if search_fields is not None:
            self.search_fields = search_fields
        if select is not None:
            self.select = select
        if top is not None:
            self.top = top

    @property
    def filter(self):
        """Gets the filter of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The filter of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MicrosoftAzureSearchModelsSuggestParameters.


        :param filter: The filter of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def use_fuzzy_matching(self):
        """Gets the use_fuzzy_matching of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The use_fuzzy_matching of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: bool
        """
        return self._use_fuzzy_matching

    @use_fuzzy_matching.setter
    def use_fuzzy_matching(self, use_fuzzy_matching):
        """Sets the use_fuzzy_matching of this MicrosoftAzureSearchModelsSuggestParameters.


        :param use_fuzzy_matching: The use_fuzzy_matching of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: bool
        """

        self._use_fuzzy_matching = use_fuzzy_matching

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The highlight_post_tag of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this MicrosoftAzureSearchModelsSuggestParameters.


        :param highlight_post_tag: The highlight_post_tag of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The highlight_pre_tag of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this MicrosoftAzureSearchModelsSuggestParameters.


        :param highlight_pre_tag: The highlight_pre_tag of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def minimum_coverage(self):
        """Gets the minimum_coverage of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The minimum_coverage of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: float
        """
        return self._minimum_coverage

    @minimum_coverage.setter
    def minimum_coverage(self, minimum_coverage):
        """Sets the minimum_coverage of this MicrosoftAzureSearchModelsSuggestParameters.


        :param minimum_coverage: The minimum_coverage of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: float
        """

        self._minimum_coverage = minimum_coverage

    @property
    def order_by(self):
        """Gets the order_by of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The order_by of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this MicrosoftAzureSearchModelsSuggestParameters.


        :param order_by: The order_by of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: list[str]
        """

        self._order_by = order_by

    @property
    def search_fields(self):
        """Gets the search_fields of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The search_fields of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this MicrosoftAzureSearchModelsSuggestParameters.


        :param search_fields: The search_fields of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: list[str]
        """

        self._search_fields = search_fields

    @property
    def select(self):
        """Gets the select of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The select of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this MicrosoftAzureSearchModelsSuggestParameters.


        :param select: The select of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: list[str]
        """

        self._select = select

    @property
    def top(self):
        """Gets the top of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501


        :return: The top of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this MicrosoftAzureSearchModelsSuggestParameters.


        :param top: The top of this MicrosoftAzureSearchModelsSuggestParameters.  # noqa: E501
        :type: int
        """

        self._top = top

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureSearchModelsSuggestParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureSearchModelsSuggestParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
