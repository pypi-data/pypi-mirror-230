"use strict";(self.webpackChunk_jupyterlite_litegitpuller=self.webpackChunk_jupyterlite_litegitpuller||[]).push([[14],{14:(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});var a=n(671),r=n(952);class s{constructor(t){this._browserFactory=t.browserFactory,this._contents=t.contents}async clone(t,e){const n=a.PathExt.basename(t);await this._createTree([n]);const r=`${t}/git/trees/${e}?recursive=true`,s=await fetch(r,{method:"GET",headers:{Accept:"application/vnd.github+json","X-GitHub-Api-Version":"2022-11-28","User-Agent":"request"}}).then((t=>t.json())).then((t=>t.tree)),o=Object.values(s).filter((t=>"tree"===t.type)).map((t=>t.path)),i=Object.values(s).filter((t=>"blob"===t.type)),c=new Map;return await this._createTree(o,n).then((async()=>{for(const a of i){const r=await this._getFile(t,a.path,e,n);if(r){const t=c.get(r.type)||[];c.set(r.type,[...t,r.file])}}})),c.forEach(((t,e)=>{console.warn(`The following files have not been uploaded.\nCAUSE: ${e}\nFILES: `,t)})),n}async _createTree(t,e=null){t.sort();for(let n of t){n=e?a.PathExt.join(e,n):n;const t={type:"directory",path:a.PathExt.dirname(n)};await this._contents.get(n,{content:!1}).catch((()=>{this._contents.newUntitled(t).then((async t=>{await this._contents.rename(t.path,n)}))}))}}async _getFile(t,e,n,r=null){var s;const o=r?a.PathExt.join(r,e):e;let i=!1;if(await this._contents.get(o,{content:!1}).then((()=>{i=!0})).catch((()=>{})),i)return{type:"File already exist",file:o};const{defaultBrowser:c}=this._browserFactory,h=`${t}/contents/${e}?ref=${n}`,l=await fetch(h,{method:"GET",headers:{Accept:"application/vnd.github+json","X-GitHub-Api-Version":"2022-11-28","User-Agent":"request"}}).then((t=>t.json())).then((t=>t.download_url)),p=await fetch(l),u=await p.blob(),w=null!==(s=p.headers.get("Content-Type"))&&void 0!==s?s:"";let y=a.PathExt.basename(e),f=0,d=!1;for(;!d;)await this._contents.get(y,{content:!1}).then((()=>{y=`${y}_${f}`,f++})).catch((t=>{d=!0}));const b=new File([u],y,{type:w});await c.model.upload(b).then((async t=>{t.path!==o&&await this._contents.rename(t.path,o)}))}}const o={id:"@jupyterlite/litegitpuller:plugin",autoStart:!0,requires:[r.IFileBrowserFactory],activate:(t,e)=>{if(console.log("JupyterLab extension @jupyterlite/litegitpuller is activated!"),"JupyterLite"!==t.name)return;const n=new URLSearchParams(window.location.search),r=n.get("repo");if(!r)return;const o=n.get("branch")||"main";let i=n.get("urlpath");const c=new URL(r);c.hostname="api.github.com",c.pathname=`/repos${c.pathname}`,i&&(i="/"+a.PathExt.relative(`tree/${a.PathExt.basename(c.href)}`,i)),new s({browserFactory:e,contents:t.serviceManager.contents}).clone(c.href,o).then((async e=>{i&&t.commands.execute("filebrowser:open-path",{path:a.PathExt.join(e,i)})}))}}}}]);