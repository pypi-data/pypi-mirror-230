[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42",
  "setuptools-scm>=7",
]

[project]
name = "geomesher"
description = "Meshing a GeoDataFrame using Gmsh."
readme = { file = "README.rst", content-type = "text/x-rst" }
keywords = [
  'geopandas',
  'mesh',
  'unstructured grid',
]
license = { text = "MIT" }
maintainers = [{ name = "Taher Chegini", email = "cheginit@gmail.com" }]
requires-python = ">=3.8"
classifiers = [
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Science/Research',
  'License :: OSI Approved :: MIT License',
  'Operating System :: OS Independent',
  'Programming Language :: Python',
  "Programming Language :: Python :: 3 :: Only",
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  "Programming Language :: Python :: 3.11",
  'Topic :: Scientific/Engineering',
]
dynamic = [
  "version",
]
dependencies = [
  "geopandas",
  "gmsh",
  "numpy>=1.21",
  "pandas",
  "scipy",
  "shapely>=2",
]
[project.optional-dependencies]
test = [
  "coverage[toml]",
  "pytest-cov",
  "pytest-xdist[psutil]",
]
[project.urls]
Code = "https://github.com/deltares/geomesher"
Home = "https://github.com/deltares/geomesher"
Issues = "https://github.com/deltares/geomesher/issues"

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE"]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
geomesher = ["py.typed"]

[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools_scm]
fallback_version = "999"

[tool.black]
line-length = 100

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.isort]
known-first-party = [
  "geomesher",
]

[tool.ruff]
target-version = 'py38'
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

exclude = [
    "__pycache__",
    ".nox",
]

ignore = [
    "D103",
    "D105",
    "E501",
    "TRY003",
]
line-length = 100
[tool.isort]
default_section = "THIRDPARTY"
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = "geomesher"
line_length = 100
multi_line_output = 3
profile = "black"
use_parentheses = true

[tool.pytest.ini_options]
addopts = "--ignore=noxfile.py -n=auto -v --cov=geomesher --cov-report xml --durations=5"
doctest_optionflags = 'NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER'
filterwarnings = [
  "ignore:.*distutils.*",
  "ignore:.*--rsyncdir command line argument.*",
  "ignore:.*numpy.ndarray size changed.*",
  "ignore:.*invalid value encountered in cast.*",
  "ignore:.*'cgi' is deprecated.*",
]
testpaths = [
  "tests",
  "geomesher"
]

[tool.coverage.report]
exclude_lines = [
  'raise ServiceUnavailableError',
  "if TYPE_CHECKING:"
]
ignore_errors = true

[tool.coverage.run]
branch = true
omit = [
  "**/__init__.py",
  "**/print_versions.py"
]
parallel = true
source = ['geomesher']

[tool.fixit]
disable = [
    "fixit.rules:NoStringTypeAnnotation",  # single lint rule by name
]

[tool.codespell]
skip = "__pycache__,_build,.mypy_cache,.git,./htmlcov,.nox,build,*.ipynb"

[tool.pycln]
all = true
expand_stars = true
no_gitignore = false
verbose = true

[tool.pyright]
exclude = [
  ".nox/",
  "**/__pycache__",
  "**/__init__.py",
  "tests/"
]
include = ["geomesher"]
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
typeCheckingMode = "strict"

[tool.refurb]
python_version = "3.8"
quiet = true
