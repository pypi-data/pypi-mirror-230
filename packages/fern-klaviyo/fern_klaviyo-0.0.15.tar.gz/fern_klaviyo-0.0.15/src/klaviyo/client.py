# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import KlaviyoEnvironment
from .resources.accounts.client import AccountsClient, AsyncAccountsClient
from .resources.campaigns.client import AsyncCampaignsClient, CampaignsClient
from .resources.catalogs.client import AsyncCatalogsClient, CatalogsClient
from .resources.client.client import AsyncClientClient, ClientClient
from .resources.data_privacy.client import AsyncDataPrivacyClient, DataPrivacyClient
from .resources.events.client import AsyncEventsClient, EventsClient
from .resources.flows.client import AsyncFlowsClient, FlowsClient
from .resources.lists.client import AsyncListsClient, ListsClient
from .resources.metrics.client import AsyncMetricsClient, MetricsClient
from .resources.profiles.client import AsyncProfilesClient, ProfilesClient
from .resources.segments.client import AsyncSegmentsClient, SegmentsClient
from .resources.tags.client import AsyncTagsClient, TagsClient
from .resources.templates.client import AsyncTemplatesClient, TemplatesClient


class Klaviyo:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: KlaviyoEnvironment = KlaviyoEnvironment.PRODUCTION,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            revision="2023-08-15",
            api_key=api_key,
            httpx_client=httpx.Client(timeout=timeout),
        )
        self.accounts = AccountsClient(client_wrapper=self._client_wrapper)
        self.campaigns = CampaignsClient(client_wrapper=self._client_wrapper)
        self.catalogs = CatalogsClient(client_wrapper=self._client_wrapper)
        self.data_privacy = DataPrivacyClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.flows = FlowsClient(client_wrapper=self._client_wrapper)
        self.lists = ListsClient(client_wrapper=self._client_wrapper)
        self.metrics = MetricsClient(client_wrapper=self._client_wrapper)
        self.profiles = ProfilesClient(client_wrapper=self._client_wrapper)
        self.segments = SegmentsClient(client_wrapper=self._client_wrapper)
        self.tags = TagsClient(client_wrapper=self._client_wrapper)
        self.templates = TemplatesClient(client_wrapper=self._client_wrapper)
        self.client = ClientClient(client_wrapper=self._client_wrapper)


class AsyncKlaviyo:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: KlaviyoEnvironment = KlaviyoEnvironment.PRODUCTION,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            revision="2023-08-15",
            api_key=api_key,
            httpx_client=httpx.AsyncClient(timeout=timeout),
        )
        self.accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        self.campaigns = AsyncCampaignsClient(client_wrapper=self._client_wrapper)
        self.catalogs = AsyncCatalogsClient(client_wrapper=self._client_wrapper)
        self.data_privacy = AsyncDataPrivacyClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.flows = AsyncFlowsClient(client_wrapper=self._client_wrapper)
        self.lists = AsyncListsClient(client_wrapper=self._client_wrapper)
        self.metrics = AsyncMetricsClient(client_wrapper=self._client_wrapper)
        self.profiles = AsyncProfilesClient(client_wrapper=self._client_wrapper)
        self.segments = AsyncSegmentsClient(client_wrapper=self._client_wrapper)
        self.tags = AsyncTagsClient(client_wrapper=self._client_wrapper)
        self.templates = AsyncTemplatesClient(client_wrapper=self._client_wrapper)
        self.client = AsyncClientClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: KlaviyoEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
