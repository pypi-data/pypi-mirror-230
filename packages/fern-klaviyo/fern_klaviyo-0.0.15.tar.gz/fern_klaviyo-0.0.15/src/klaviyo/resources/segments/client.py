# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic
import typing_extensions

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.get_profile_response_collection import GetProfileResponseCollection
from ...types.get_segment_list_response_collection_compound_document import (
    GetSegmentListResponseCollectionCompoundDocument,
)
from ...types.get_segment_profiles_request_fields_profile_item import GetSegmentProfilesRequestFieldsProfileItem
from ...types.get_segment_relationships_response_collection import GetSegmentRelationshipsResponseCollection
from ...types.get_segment_request_fields_segment_item import GetSegmentRequestFieldsSegmentItem
from ...types.get_segment_retrieve_response_compound_document import GetSegmentRetrieveResponseCompoundDocument
from ...types.get_segment_tag_relationship_list_response_collection import (
    GetSegmentTagRelationshipListResponseCollection,
)
from ...types.get_segments_request_fields_segment_item import GetSegmentsRequestFieldsSegmentItem
from ...types.get_tag_response_collection import GetTagResponseCollection
from ...types.patch_segment_partial_update_response import PatchSegmentPartialUpdateResponse
from ...types.segment_partial_update_query_resource_object import SegmentPartialUpdateQueryResourceObject

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SegmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_segments(
        self,
        *,
        fields_segment: typing.Union[
            typing.Optional[GetSegmentsRequestFieldsSegmentItem], typing.List[GetSegmentsRequestFieldsSegmentItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        filter: typing.Optional[str] = None,
        include: typing.Union[
            typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]
        ],
        page_cursor: typing.Optional[str] = None,
    ) -> GetSegmentListResponseCollectionCompoundDocument:
        """
        Get all segments in an account.

        Filter to request a subset of all segments. Segments can be filtered by `name`, `created`, and `updated` fields.

        Returns a maximum of 10 results per page.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`

        **Scopes:**
        `segments:read`

        Parameters:
            - fields_segment: typing.Union[typing.Optional[GetSegmentsRequestFieldsSegmentItem], typing.List[GetSegmentsRequestFieldsSegmentItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `any`, `equals`<br>`id`: `any`, `equals`<br>`created`: `greater-than`<br>`updated`: `greater-than`

            - include: typing.Union[typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/segments"),
            params=remove_none_from_dict(
                {
                    "fields[segment]": fields_segment,
                    "fields[tag]": fields_tag,
                    "filter": filter,
                    "include": include,
                    "page[cursor]": page_cursor,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentListResponseCollectionCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_segment(
        self,
        id: str,
        *,
        additional_fields_segment: typing.Union[
            typing.Optional[typing_extensions.Literal["profile_count"]],
            typing.List[typing_extensions.Literal["profile_count"]],
        ],
        fields_segment: typing.Union[
            typing.Optional[GetSegmentRequestFieldsSegmentItem], typing.List[GetSegmentRequestFieldsSegmentItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        include: typing.Union[
            typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]
        ],
    ) -> GetSegmentRetrieveResponseCompoundDocument:
        """
        Get a segment with the given segment ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`<br><br>Rate limits when using the `additional-fields[segment]=profile_count` parameter in your API request:<br>Burst: `1/s`<br>Steady: `15/m`<br><br>To learn more about how the `additional-fields` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2023-08-15/docs/rate_limits_and_error_handling) guide.

        **Scopes:**
        `segments:read`

        Parameters:
            - id: str.

            - additional_fields_segment: typing.Union[typing.Optional[typing_extensions.Literal["profile_count"]], typing.List[typing_extensions.Literal["profile_count"]]]. Request additional fields not included by default in the response. Supported values: 'profile_count'

            - fields_segment: typing.Union[typing.Optional[GetSegmentRequestFieldsSegmentItem], typing.List[GetSegmentRequestFieldsSegmentItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}"),
            params=remove_none_from_dict(
                {
                    "additional-fields[segment]": additional_fields_segment,
                    "fields[segment]": fields_segment,
                    "fields[tag]": fields_tag,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentRetrieveResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_segment(
        self, id: str, *, data: SegmentPartialUpdateQueryResourceObject
    ) -> PatchSegmentPartialUpdateResponse:
        """
        Update the name of a segment with the given segment ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`

        **Scopes:**
        `segments:write`

        Parameters:
            - id: str.

            - data: SegmentPartialUpdateQueryResourceObject.
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PatchSegmentPartialUpdateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_segment_relationships_tags(self, id: str) -> GetSegmentTagRelationshipListResponseCollection:
        """
        If `related_resource` is `tags`, returns the tag IDs of all tags associated with the given segment ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `segments:read`
        `tags:read`

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/relationships/tags"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentTagRelationshipListResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_segment_tags(
        self,
        id: str,
        *,
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
    ) -> GetTagResponseCollection:
        """
        Return all tags associated with the given segment ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `segments:read`
        `tags:read`

        Parameters:
            - id: str.

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/tags"),
            params=remove_none_from_dict({"fields[tag]": fields_tag}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTagResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_segment_relationships_profiles(
        self, id: str, *, page_cursor: typing.Optional[str] = None
    ) -> GetSegmentRelationshipsResponseCollection:
        """
        Get all profile membership [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for the given segment ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`

        **Scopes:**
        `profiles:read`
        `segments:read`

        Parameters:
            - id: str.

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/relationships/profiles"
            ),
            params=remove_none_from_dict({"page[cursor]": page_cursor}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentRelationshipsResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_segment_profiles(
        self,
        id: str,
        *,
        additional_fields_profile: typing.Union[
            typing.Optional[typing_extensions.Literal["predictive_analytics"]],
            typing.List[typing_extensions.Literal["predictive_analytics"]],
        ],
        fields_profile: typing.Union[
            typing.Optional[GetSegmentProfilesRequestFieldsProfileItem],
            typing.List[GetSegmentProfilesRequestFieldsProfileItem],
        ],
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
    ) -> GetProfileResponseCollection:
        """
        Get all profiles within the given segment ID.

        Filter to request a subset of all profiles. Profiles can be filtered by `email`, `phone_number`, and `push_token` fields.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`

        **Scopes:**
        `profiles:read`
        `segments:read`

        Parameters:
            - id: str.

            - additional_fields_profile: typing.Union[typing.Optional[typing_extensions.Literal["predictive_analytics"]], typing.List[typing_extensions.Literal["predictive_analytics"]]]. Request additional fields not included by default in the response. Supported values: 'predictive_analytics'

            - fields_profile: typing.Union[typing.Optional[GetSegmentProfilesRequestFieldsProfileItem], typing.List[GetSegmentProfilesRequestFieldsProfileItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`email`: `any`<br>`phone_number`: `any`<br>`push_token`: `any`<br>`_kx`: `equals`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 20. Min: 1. Max: 100.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/profiles"),
            params=remove_none_from_dict(
                {
                    "additional-fields[profile]": additional_fields_profile,
                    "fields[profile]": fields_profile,
                    "filter": filter,
                    "page[cursor]": page_cursor,
                    "page[size]": page_size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetProfileResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSegmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_segments(
        self,
        *,
        fields_segment: typing.Union[
            typing.Optional[GetSegmentsRequestFieldsSegmentItem], typing.List[GetSegmentsRequestFieldsSegmentItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        filter: typing.Optional[str] = None,
        include: typing.Union[
            typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]
        ],
        page_cursor: typing.Optional[str] = None,
    ) -> GetSegmentListResponseCollectionCompoundDocument:
        """
        Get all segments in an account.

        Filter to request a subset of all segments. Segments can be filtered by `name`, `created`, and `updated` fields.

        Returns a maximum of 10 results per page.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`

        **Scopes:**
        `segments:read`

        Parameters:
            - fields_segment: typing.Union[typing.Optional[GetSegmentsRequestFieldsSegmentItem], typing.List[GetSegmentsRequestFieldsSegmentItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `any`, `equals`<br>`id`: `any`, `equals`<br>`created`: `greater-than`<br>`updated`: `greater-than`

            - include: typing.Union[typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/segments"),
            params=remove_none_from_dict(
                {
                    "fields[segment]": fields_segment,
                    "fields[tag]": fields_tag,
                    "filter": filter,
                    "include": include,
                    "page[cursor]": page_cursor,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentListResponseCollectionCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_segment(
        self,
        id: str,
        *,
        additional_fields_segment: typing.Union[
            typing.Optional[typing_extensions.Literal["profile_count"]],
            typing.List[typing_extensions.Literal["profile_count"]],
        ],
        fields_segment: typing.Union[
            typing.Optional[GetSegmentRequestFieldsSegmentItem], typing.List[GetSegmentRequestFieldsSegmentItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        include: typing.Union[
            typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]
        ],
    ) -> GetSegmentRetrieveResponseCompoundDocument:
        """
        Get a segment with the given segment ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`<br><br>Rate limits when using the `additional-fields[segment]=profile_count` parameter in your API request:<br>Burst: `1/s`<br>Steady: `15/m`<br><br>To learn more about how the `additional-fields` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2023-08-15/docs/rate_limits_and_error_handling) guide.

        **Scopes:**
        `segments:read`

        Parameters:
            - id: str.

            - additional_fields_segment: typing.Union[typing.Optional[typing_extensions.Literal["profile_count"]], typing.List[typing_extensions.Literal["profile_count"]]]. Request additional fields not included by default in the response. Supported values: 'profile_count'

            - fields_segment: typing.Union[typing.Optional[GetSegmentRequestFieldsSegmentItem], typing.List[GetSegmentRequestFieldsSegmentItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[typing_extensions.Literal["tags"]], typing.List[typing_extensions.Literal["tags"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}"),
            params=remove_none_from_dict(
                {
                    "additional-fields[segment]": additional_fields_segment,
                    "fields[segment]": fields_segment,
                    "fields[tag]": fields_tag,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentRetrieveResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_segment(
        self, id: str, *, data: SegmentPartialUpdateQueryResourceObject
    ) -> PatchSegmentPartialUpdateResponse:
        """
        Update the name of a segment with the given segment ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`

        **Scopes:**
        `segments:write`

        Parameters:
            - id: str.

            - data: SegmentPartialUpdateQueryResourceObject.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PatchSegmentPartialUpdateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_segment_relationships_tags(self, id: str) -> GetSegmentTagRelationshipListResponseCollection:
        """
        If `related_resource` is `tags`, returns the tag IDs of all tags associated with the given segment ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `segments:read`
        `tags:read`

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/relationships/tags"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentTagRelationshipListResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_segment_tags(
        self,
        id: str,
        *,
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
    ) -> GetTagResponseCollection:
        """
        Return all tags associated with the given segment ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `segments:read`
        `tags:read`

        Parameters:
            - id: str.

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/tags"),
            params=remove_none_from_dict({"fields[tag]": fields_tag}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTagResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_segment_relationships_profiles(
        self, id: str, *, page_cursor: typing.Optional[str] = None
    ) -> GetSegmentRelationshipsResponseCollection:
        """
        Get all profile membership [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for the given segment ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`

        **Scopes:**
        `profiles:read`
        `segments:read`

        Parameters:
            - id: str.

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/relationships/profiles"
            ),
            params=remove_none_from_dict({"page[cursor]": page_cursor}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetSegmentRelationshipsResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_segment_profiles(
        self,
        id: str,
        *,
        additional_fields_profile: typing.Union[
            typing.Optional[typing_extensions.Literal["predictive_analytics"]],
            typing.List[typing_extensions.Literal["predictive_analytics"]],
        ],
        fields_profile: typing.Union[
            typing.Optional[GetSegmentProfilesRequestFieldsProfileItem],
            typing.List[GetSegmentProfilesRequestFieldsProfileItem],
        ],
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
    ) -> GetProfileResponseCollection:
        """
        Get all profiles within the given segment ID.

        Filter to request a subset of all profiles. Profiles can be filtered by `email`, `phone_number`, and `push_token` fields.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`

        **Scopes:**
        `profiles:read`
        `segments:read`

        Parameters:
            - id: str.

            - additional_fields_profile: typing.Union[typing.Optional[typing_extensions.Literal["predictive_analytics"]], typing.List[typing_extensions.Literal["predictive_analytics"]]]. Request additional fields not included by default in the response. Supported values: 'predictive_analytics'

            - fields_profile: typing.Union[typing.Optional[GetSegmentProfilesRequestFieldsProfileItem], typing.List[GetSegmentProfilesRequestFieldsProfileItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`email`: `any`<br>`phone_number`: `any`<br>`push_token`: `any`<br>`_kx`: `equals`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 20. Min: 1. Max: 100.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/segments/{id}/profiles"),
            params=remove_none_from_dict(
                {
                    "additional-fields[profile]": additional_fields_profile,
                    "fields[profile]": fields_profile,
                    "filter": filter,
                    "page[cursor]": page_cursor,
                    "page[size]": page_size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetProfileResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
