# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.get_account_request_fields_account_item import GetAccountRequestFieldsAccountItem
from ...types.get_account_response import GetAccountResponse
from ...types.get_account_response_collection import GetAccountResponseCollection
from ...types.get_accounts_request_fields_account_item import GetAccountsRequestFieldsAccountItem


class AccountsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_accounts(
        self,
        *,
        fields_account: typing.Union[
            typing.Optional[GetAccountsRequestFieldsAccountItem], typing.List[GetAccountsRequestFieldsAccountItem]
        ],
    ) -> GetAccountResponseCollection:
        """
        Retrieve the account(s) associated with a given private API key. This will return 1 account object within the array.

        You can use this to retrieve account-specific data (contact information, timezone, currency, Public API key, etc.) or test if a Private API Key belongs to the correct account prior to performing subsequent actions with the API.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`

        **Scopes:**
        `accounts:read`

        Parameters:
            - fields_account: typing.Union[typing.Optional[GetAccountsRequestFieldsAccountItem], typing.List[GetAccountsRequestFieldsAccountItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/accounts"),
            params=remove_none_from_dict({"fields[account]": fields_account}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_account(
        self,
        id: str,
        *,
        fields_account: typing.Union[
            typing.Optional[GetAccountRequestFieldsAccountItem], typing.List[GetAccountRequestFieldsAccountItem]
        ],
    ) -> GetAccountResponse:
        """
        Retrieve a single account object by its account ID. You can only request the account by which the private API key was generated.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`

        **Scopes:**
        `accounts:read`

        Parameters:
            - id: str. The ID of the account

            - fields_account: typing.Union[typing.Optional[GetAccountRequestFieldsAccountItem], typing.List[GetAccountRequestFieldsAccountItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/accounts/{id}"),
            params=remove_none_from_dict({"fields[account]": fields_account}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAccountsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_accounts(
        self,
        *,
        fields_account: typing.Union[
            typing.Optional[GetAccountsRequestFieldsAccountItem], typing.List[GetAccountsRequestFieldsAccountItem]
        ],
    ) -> GetAccountResponseCollection:
        """
        Retrieve the account(s) associated with a given private API key. This will return 1 account object within the array.

        You can use this to retrieve account-specific data (contact information, timezone, currency, Public API key, etc.) or test if a Private API Key belongs to the correct account prior to performing subsequent actions with the API.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`

        **Scopes:**
        `accounts:read`

        Parameters:
            - fields_account: typing.Union[typing.Optional[GetAccountsRequestFieldsAccountItem], typing.List[GetAccountsRequestFieldsAccountItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/accounts"),
            params=remove_none_from_dict({"fields[account]": fields_account}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_account(
        self,
        id: str,
        *,
        fields_account: typing.Union[
            typing.Optional[GetAccountRequestFieldsAccountItem], typing.List[GetAccountRequestFieldsAccountItem]
        ],
    ) -> GetAccountResponse:
        """
        Retrieve a single account object by its account ID. You can only request the account by which the private API key was generated.<br><br>*Rate limits*:<br>Burst: `1/s`<br>Steady: `15/m`

        **Scopes:**
        `accounts:read`

        Parameters:
            - id: str. The ID of the account

            - fields_account: typing.Union[typing.Optional[GetAccountRequestFieldsAccountItem], typing.List[GetAccountRequestFieldsAccountItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/accounts/{id}"),
            params=remove_none_from_dict({"fields[account]": fields_account}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAccountResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
