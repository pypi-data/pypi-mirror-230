# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .contact_information import ContactInformation


class AccountResponseObjectResourceAttributes(pydantic.BaseModel):
    contact_information: ContactInformation = pydantic.Field(
        description="Contact information for the account. This is used in email footers by default to comply with the CAN-SPAM act."
    )
    industry: str = pydantic.Field(
        description="The kind of business and/or types of goods that the business sells. This is leveraged in Klaviyo analytics and guidance."
    )
    timezone: str = pydantic.Field(
        description="The account's timezone is used when displaying dates and times. This is an IANA timezone. See [the full list here ](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
    )
    preferred_currency: str = pydantic.Field(
        description="The preferred currency for the account. This is the currency used for currency-based metrics in dashboards, analytics, coupons, and templates."
    )
    public_api_key: str = pydantic.Field(
        description="The Public API Key can be used for client-side API calls. [More info here](https://developers.klaviyo.com/en/docs/retrieve_api_credentials)."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
