# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .audiences_sub_object import AudiencesSubObject
from .campaign_partial_update_query_resource_object_attributes_send_options import (
    CampaignPartialUpdateQueryResourceObjectAttributesSendOptions,
)
from .campaign_partial_update_query_resource_object_attributes_tracking_options import (
    CampaignPartialUpdateQueryResourceObjectAttributesTrackingOptions,
)
from .send_strategy_sub_object import SendStrategySubObject


class CampaignPartialUpdateQueryResourceObjectAttributes(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(description="The campaign name")
    audiences: typing.Optional[AudiencesSubObject] = pydantic.Field(
        description="The audiences to be included and/or excluded from the campaign"
    )
    send_options: typing.Optional[CampaignPartialUpdateQueryResourceObjectAttributesSendOptions] = pydantic.Field(
        description="Options to use when sending a campaign"
    )
    tracking_options: typing.Optional[
        CampaignPartialUpdateQueryResourceObjectAttributesTrackingOptions
    ] = pydantic.Field(description="The tracking options associated with the campaign")
    send_strategy: typing.Optional[SendStrategySubObject] = pydantic.Field(
        description="The send strategy the campaign will send with"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
