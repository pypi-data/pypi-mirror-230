# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PredictiveAnalytics(pydantic.BaseModel):
    historic_clv: typing.Optional[float] = pydantic.Field(description="Total value of all historically placed orders")
    predicted_clv: typing.Optional[float] = pydantic.Field(
        description="Predicted value of all placed orders in the next 365 days"
    )
    total_clv: typing.Optional[float] = pydantic.Field(description="Sum of historic and predicted CLV")
    historic_number_of_orders: typing.Optional[int] = pydantic.Field(description="Number of already placed orders")
    predicted_number_of_orders: typing.Optional[float] = pydantic.Field(
        description="Predicted number of placed orders in the next 365 days"
    )
    average_days_between_orders: typing.Optional[float] = pydantic.Field(
        description="Average number of days between orders (None if only one order has been placed)"
    )
    average_order_value: typing.Optional[float] = pydantic.Field(description="Average value of placed orders")
    churn_probability: typing.Optional[float] = pydantic.Field(description="Probability the customer has churned")
    expected_date_of_next_order: typing.Optional[dt.datetime] = pydantic.Field(
        description="Expected date of next order, as calculated at the time of their most recent order"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
