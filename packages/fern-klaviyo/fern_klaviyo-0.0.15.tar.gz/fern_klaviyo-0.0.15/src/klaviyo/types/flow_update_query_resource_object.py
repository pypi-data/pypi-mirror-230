# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .flow_enum import FlowEnum
from .flow_update_query_resource_object_attributes import FlowUpdateQueryResourceObjectAttributes


class FlowUpdateQueryResourceObject(pydantic.BaseModel):
    type: FlowEnum
    id: str = pydantic.Field(description="ID of the Flow to update. Ex: XVTP5Q")
    attributes: FlowUpdateQueryResourceObjectAttributes

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
