# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .server_bis_subscription_create_query_resource_object_attributes_channels_item import (
    ServerBisSubscriptionCreateQueryResourceObjectAttributesChannelsItem,
)
from .server_bis_subscription_create_query_resource_object_attributes_profile import (
    ServerBisSubscriptionCreateQueryResourceObjectAttributesProfile,
)


class ServerBisSubscriptionCreateQueryResourceObjectAttributes(pydantic.BaseModel):
    channels: typing.List[ServerBisSubscriptionCreateQueryResourceObjectAttributesChannelsItem] = pydantic.Field(
        description="The channel(s) through which the profile would like to receive the back in stock notification. This can be leveraged within a back in stock flow to notify the subscriber through their preferred channel(s)."
    )
    profile: typing.Optional[ServerBisSubscriptionCreateQueryResourceObjectAttributesProfile]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
