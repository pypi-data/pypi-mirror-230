# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .subscription_channels import SubscriptionChannels


class ProfileSubscriptionCreateQueryResourceObjectAttributes(pydantic.BaseModel):
    email: typing.Optional[str] = pydantic.Field(
        description="The email address to subscribe or to set on the profile if `channels` is specified and the email channel is omitted."
    )
    phone_number: typing.Optional[str] = pydantic.Field(
        description="The phone number to subscribe or to set on the profile if `channels` is specified and the SMS channel is omitted."
    )
    subscriptions: typing.Optional[SubscriptionChannels] = pydantic.Field(
        description="When provided, this will provide consent for the indicated message types on the specified channels. If omitted, we will subscribe the profile to all message types on the channels corresponding to the provided identifiers."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
