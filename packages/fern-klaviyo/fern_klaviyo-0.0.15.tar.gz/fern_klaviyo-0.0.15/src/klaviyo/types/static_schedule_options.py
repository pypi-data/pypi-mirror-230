# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class StaticScheduleOptions(pydantic.BaseModel):
    datetime: dt.datetime = pydantic.Field(description="The time to send at")
    is_local: typing.Optional[bool] = pydantic.Field(
        description="If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False."
    )
    send_past_recipients_immediately: typing.Optional[bool] = pydantic.Field(
        description="Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
