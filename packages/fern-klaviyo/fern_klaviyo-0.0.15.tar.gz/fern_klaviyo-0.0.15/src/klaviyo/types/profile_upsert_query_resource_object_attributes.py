# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .profile_location import ProfileLocation
from .profile_meta import ProfileMeta


class ProfileUpsertQueryResourceObjectAttributes(pydantic.BaseModel):
    email: typing.Optional[str] = pydantic.Field(description="Individual's email address")
    phone_number: typing.Optional[str] = pydantic.Field(description="Individual's phone number in E.164 format")
    external_id: typing.Optional[str] = pydantic.Field(
        description="A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system."
    )
    anonymous_id: typing.Optional[str] = pydantic.Field(
        description="Id that can be used to identify a profile when other identifiers are not available"
    )
    first_name: typing.Optional[str] = pydantic.Field(description="Individual's first name")
    last_name: typing.Optional[str] = pydantic.Field(description="Individual's last name")
    organization: typing.Optional[str] = pydantic.Field(
        description="Name of the company or organization within the company for whom the individual works"
    )
    title: typing.Optional[str] = pydantic.Field(description="Individual's job title")
    image: typing.Optional[str] = pydantic.Field(description="URL pointing to the location of a profile image")
    location: typing.Optional[ProfileLocation]
    properties: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="An object containing key/value pairs for any custom properties assigned to this profile"
    )
    meta: typing.Optional[ProfileMeta]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
