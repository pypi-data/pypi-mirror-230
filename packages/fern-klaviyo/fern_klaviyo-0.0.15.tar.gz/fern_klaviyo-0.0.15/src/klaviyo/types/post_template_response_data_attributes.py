# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PostTemplateResponseDataAttributes(pydantic.BaseModel):
    name: str = pydantic.Field(description="The name of the template")
    editor_type: str = pydantic.Field(
        description=(
            "`editor_type` has a fixed set of values:\n"
            "* SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template\n"
            "* SIMPLE: A rich text editor template\n"
            "* CODE: A custom HTML template\n"
            "* USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor\n"
        )
    )
    html: str = pydantic.Field(description="The rendered HTML of the template")
    text: typing.Optional[str] = pydantic.Field(description="The template plain_text")
    created: typing.Optional[dt.datetime] = pydantic.Field(
        description="The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)"
    )
    updated: typing.Optional[dt.datetime] = pydantic.Field(
        description="The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
