# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .push_token_unregister_query_resource_object_attributes_platform import (
    PushTokenUnregisterQueryResourceObjectAttributesPlatform,
)
from .push_token_unregister_query_resource_object_attributes_profile import (
    PushTokenUnregisterQueryResourceObjectAttributesProfile,
)
from .push_token_unregister_query_resource_object_attributes_vendor import (
    PushTokenUnregisterQueryResourceObjectAttributesVendor,
)


class PushTokenUnregisterQueryResourceObjectAttributes(pydantic.BaseModel):
    token: str = pydantic.Field(description="A push token from APNS or FCM.")
    platform: PushTokenUnregisterQueryResourceObjectAttributesPlatform = pydantic.Field(
        description="The platform on which the push token was created."
    )
    vendor: PushTokenUnregisterQueryResourceObjectAttributesVendor = pydantic.Field(
        description="The vendor of the push token."
    )
    profile: PushTokenUnregisterQueryResourceObjectAttributesProfile = pydantic.Field(
        description="The profile associated with the push token to create/update"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
