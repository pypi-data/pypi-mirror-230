# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class CatalogItemUpdateQueryResourceObjectAttributes(pydantic.BaseModel):
    title: typing.Optional[str] = pydantic.Field(description="The title of the catalog item.")
    price: typing.Optional[float] = pydantic.Field(
        description="This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant)."
    )
    description: typing.Optional[str] = pydantic.Field(description="A description of the catalog item.")
    url: typing.Optional[str] = pydantic.Field(
        description="URL pointing to the location of the catalog item on your website."
    )
    image_full_url: typing.Optional[str] = pydantic.Field(
        description="URL pointing to the location of a full image of the catalog item."
    )
    image_thumbnail_url: typing.Optional[str] = pydantic.Field(
        description="URL pointing to the location of an image thumbnail of the catalog item"
    )
    images: typing.Optional[typing.List[str]] = pydantic.Field(
        description="List of URLs pointing to the locations of images of the catalog item."
    )
    custom_metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb."
    )
    published: typing.Optional[bool] = pydantic.Field(
        description="Boolean value indicating whether the catalog item is published."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
