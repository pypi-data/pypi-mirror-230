# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class EventResponseObjectResourceAttributes(pydantic.BaseModel):
    timestamp: typing.Optional[int] = pydantic.Field(description="Event timestamp in seconds")
    event_properties: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Event properties, can include attribution data, identifiers and extra properties"
    )
    datetime: typing.Optional[str] = pydantic.Field(
        description="Event timestamp in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)"
    )
    uuid: typing.Optional[str] = pydantic.Field(
        description="A unique identifier for the event, this can be used as a cursor in pagination"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
