# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.get_metric_request_fields_metric_item import GetMetricRequestFieldsMetricItem
from ...types.get_metric_response import GetMetricResponse
from ...types.get_metric_response_collection import GetMetricResponseCollection
from ...types.get_metrics_request_fields_metric_item import GetMetricsRequestFieldsMetricItem
from ...types.metric_aggregate_query_resource_object import MetricAggregateQueryResourceObject
from ...types.post_metric_aggregate_response import PostMetricAggregateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetricsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_metrics(
        self,
        *,
        fields_metric: typing.Union[
            typing.Optional[GetMetricsRequestFieldsMetricItem], typing.List[GetMetricsRequestFieldsMetricItem]
        ],
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
    ) -> GetMetricResponseCollection:
        """
        Get all metrics in an account.

        Requests can be filtered by the following fields:
        integration `name`, integration `category`

        Returns a maximum of 200 results per page.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`

        **Scopes:**
        `metrics:read`

        Parameters:
            - fields_metric: typing.Union[typing.Optional[GetMetricsRequestFieldsMetricItem], typing.List[GetMetricsRequestFieldsMetricItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`integration.name`: `equals`<br>`integration.category`: `equals`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/metrics"),
            params=remove_none_from_dict(
                {"fields[metric]": fields_metric, "filter": filter, "page[cursor]": page_cursor}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMetricResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_metric(
        self,
        id: str,
        *,
        fields_metric: typing.Union[
            typing.Optional[GetMetricRequestFieldsMetricItem], typing.List[GetMetricRequestFieldsMetricItem]
        ],
    ) -> GetMetricResponse:
        """
        Get a metric with the given metric ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`

        **Scopes:**
        `metrics:read`

        Parameters:
            - id: str. Metric ID

            - fields_metric: typing.Union[typing.Optional[GetMetricRequestFieldsMetricItem], typing.List[GetMetricRequestFieldsMetricItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/metrics/{id}"),
            params=remove_none_from_dict({"fields[metric]": fields_metric}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMetricResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def query_metric_aggregates(self, *, data: MetricAggregateQueryResourceObject) -> PostMetricAggregateResponse:
        """
        Query and aggregate event data associated with a metric, including native Klaviyo metrics, integration-specific metrics, and custom events. Queries must be passed in the JSON body of your `POST` request.

        Results can be filtered and grouped by time, event, or profile dimensions.

        To learn more about how to use this endpoint, check out our new [Using the Query Metric Aggregates Endpoint guide](https://developers.klaviyo.com/en/docs/using-the-query-metric-aggregates-endpoint).

        **Request body parameters** (nested under `attributes`):

        * `return_fields`: request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/reference/api_overview#sparse-fieldsets)
        * `sort`: sort results by a specified field, such as `"-timestamp"`
        * `page_cursor`: results can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/reference/api_overview#pagination)
        * `page_size`: limit the number of returned results per page
        * `by`: optional attributes used to group by the aggregation function
            * When using `by` attributes, an empty `dimensions` response is expected when the counts for the events do not have the associated dimension requested by the set `by` attribute. For example, a query including `"by": ["$flow"]` will return an empty dimensions response for counts of metrics not associated with a `$flow`
        * `measurement`: the measurement key supports the following values:
            * `"sum_value"`: perform a summation of the `_Event Value_`, optionally partitioned over any dimension provided in the `by` field
            * `"count"`: counts the number of events associated to a metric, optionally partitioned over any dimension provided in the `by` field
            * `"unique"` counts the number of unique customers associated to a metric, optionally partitioned over any dimension provided in the `by` field
        * `interval`: aggregation interval, such as `"hour"`,`"day"`,`"week"`, and `"month"`
        * `metric_id`: the metric ID used in the aggregation
        * `filter`: list of filters for specific fields, must include time range using ISO 8601 format (`"YYYY-MM-DDTHH:MM:SS.mmmmmm"`)
            * The time range can be filtered by providing a `greater-or-equal` filter on the datetime field, such as `"greater-or-equal(datetime,2021-07-01T00:00:00)"` and a `less-than` filter on the same datetime field, such as `"less-than(datetime,2022-07-01T00:00:00)"`
            * The time range may span a maximum of one year. Time range dates may be set to a maximum of 5 years prior to the current date
            * Filter the list of supported aggregate dimensions using the common filter syntax, such as `"equals(URL,\"https://www.klaviyo.com/\")"`
        * `timezone`: the timezone used when processing the query. Case sensitive. This field is validated against a list of common timezones from the [IANA Time Zone Database](https://www.iana.org/time-zones)
            * While the payload accepts a timezone, the response datetimes returned will be in UTC.

        For a comprehensive list of native Klaviyo metrics and their associated attributes for grouping and filtering, please refer to the [metrics attributes guide](https://developers.klaviyo.com/en/docs/supported_metrics_and_attributes).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `metrics:read`

        Parameters:
            - data: MetricAggregateQueryResourceObject.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/metric-aggregates"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostMetricAggregateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMetricsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_metrics(
        self,
        *,
        fields_metric: typing.Union[
            typing.Optional[GetMetricsRequestFieldsMetricItem], typing.List[GetMetricsRequestFieldsMetricItem]
        ],
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
    ) -> GetMetricResponseCollection:
        """
        Get all metrics in an account.

        Requests can be filtered by the following fields:
        integration `name`, integration `category`

        Returns a maximum of 200 results per page.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`

        **Scopes:**
        `metrics:read`

        Parameters:
            - fields_metric: typing.Union[typing.Optional[GetMetricsRequestFieldsMetricItem], typing.List[GetMetricsRequestFieldsMetricItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`integration.name`: `equals`<br>`integration.category`: `equals`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/metrics"),
            params=remove_none_from_dict(
                {"fields[metric]": fields_metric, "filter": filter, "page[cursor]": page_cursor}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMetricResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_metric(
        self,
        id: str,
        *,
        fields_metric: typing.Union[
            typing.Optional[GetMetricRequestFieldsMetricItem], typing.List[GetMetricRequestFieldsMetricItem]
        ],
    ) -> GetMetricResponse:
        """
        Get a metric with the given metric ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`

        **Scopes:**
        `metrics:read`

        Parameters:
            - id: str. Metric ID

            - fields_metric: typing.Union[typing.Optional[GetMetricRequestFieldsMetricItem], typing.List[GetMetricRequestFieldsMetricItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/metrics/{id}"),
            params=remove_none_from_dict({"fields[metric]": fields_metric}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMetricResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def query_metric_aggregates(self, *, data: MetricAggregateQueryResourceObject) -> PostMetricAggregateResponse:
        """
        Query and aggregate event data associated with a metric, including native Klaviyo metrics, integration-specific metrics, and custom events. Queries must be passed in the JSON body of your `POST` request.

        Results can be filtered and grouped by time, event, or profile dimensions.

        To learn more about how to use this endpoint, check out our new [Using the Query Metric Aggregates Endpoint guide](https://developers.klaviyo.com/en/docs/using-the-query-metric-aggregates-endpoint).

        **Request body parameters** (nested under `attributes`):

        * `return_fields`: request specific fields using [sparse fieldsets](https://developers.klaviyo.com/en/reference/api_overview#sparse-fieldsets)
        * `sort`: sort results by a specified field, such as `"-timestamp"`
        * `page_cursor`: results can be paginated with [cursor-based pagination](https://developers.klaviyo.com/en/reference/api_overview#pagination)
        * `page_size`: limit the number of returned results per page
        * `by`: optional attributes used to group by the aggregation function
            * When using `by` attributes, an empty `dimensions` response is expected when the counts for the events do not have the associated dimension requested by the set `by` attribute. For example, a query including `"by": ["$flow"]` will return an empty dimensions response for counts of metrics not associated with a `$flow`
        * `measurement`: the measurement key supports the following values:
            * `"sum_value"`: perform a summation of the `_Event Value_`, optionally partitioned over any dimension provided in the `by` field
            * `"count"`: counts the number of events associated to a metric, optionally partitioned over any dimension provided in the `by` field
            * `"unique"` counts the number of unique customers associated to a metric, optionally partitioned over any dimension provided in the `by` field
        * `interval`: aggregation interval, such as `"hour"`,`"day"`,`"week"`, and `"month"`
        * `metric_id`: the metric ID used in the aggregation
        * `filter`: list of filters for specific fields, must include time range using ISO 8601 format (`"YYYY-MM-DDTHH:MM:SS.mmmmmm"`)
            * The time range can be filtered by providing a `greater-or-equal` filter on the datetime field, such as `"greater-or-equal(datetime,2021-07-01T00:00:00)"` and a `less-than` filter on the same datetime field, such as `"less-than(datetime,2022-07-01T00:00:00)"`
            * The time range may span a maximum of one year. Time range dates may be set to a maximum of 5 years prior to the current date
            * Filter the list of supported aggregate dimensions using the common filter syntax, such as `"equals(URL,\"https://www.klaviyo.com/\")"`
        * `timezone`: the timezone used when processing the query. Case sensitive. This field is validated against a list of common timezones from the [IANA Time Zone Database](https://www.iana.org/time-zones)
            * While the payload accepts a timezone, the response datetimes returned will be in UTC.

        For a comprehensive list of native Klaviyo metrics and their associated attributes for grouping and filtering, please refer to the [metrics attributes guide](https://developers.klaviyo.com/en/docs/supported_metrics_and_attributes).<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `metrics:read`

        Parameters:
            - data: MetricAggregateQueryResourceObject.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/metric-aggregates"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostMetricAggregateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
