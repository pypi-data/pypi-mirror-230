# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic
import typing_extensions

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.flow_update_query_resource_object import FlowUpdateQueryResourceObject
from ...types.get_flow_action_flow_message_relationship_response_collection import (
    GetFlowActionFlowMessageRelationshipResponseCollection,
)
from ...types.get_flow_action_flow_relationship_response import GetFlowActionFlowRelationshipResponse
from ...types.get_flow_action_flow_request_fields_flow_item import GetFlowActionFlowRequestFieldsFlowItem
from ...types.get_flow_action_messages_request_fields_flow_message_item import (
    GetFlowActionMessagesRequestFieldsFlowMessageItem,
)
from ...types.get_flow_action_messages_request_sort import GetFlowActionMessagesRequestSort
from ...types.get_flow_action_relationships_messages_request_sort import GetFlowActionRelationshipsMessagesRequestSort
from ...types.get_flow_action_request_fields_flow_action_item import GetFlowActionRequestFieldsFlowActionItem
from ...types.get_flow_action_request_fields_flow_item import GetFlowActionRequestFieldsFlowItem
from ...types.get_flow_action_request_fields_flow_message_item import GetFlowActionRequestFieldsFlowMessageItem
from ...types.get_flow_action_request_include_item import GetFlowActionRequestIncludeItem
from ...types.get_flow_action_response import GetFlowActionResponse
from ...types.get_flow_action_response_collection import GetFlowActionResponseCollection
from ...types.get_flow_action_response_compound_document import GetFlowActionResponseCompoundDocument
from ...types.get_flow_flow_action_relationship_list_response_collection import (
    GetFlowFlowActionRelationshipListResponseCollection,
)
from ...types.get_flow_flow_actions_request_fields_flow_action_item import GetFlowFlowActionsRequestFieldsFlowActionItem
from ...types.get_flow_flow_actions_request_sort import GetFlowFlowActionsRequestSort
from ...types.get_flow_message_action_request_fields_flow_action_item import (
    GetFlowMessageActionRequestFieldsFlowActionItem,
)
from ...types.get_flow_message_flow_action_relationship_response import GetFlowMessageFlowActionRelationshipResponse
from ...types.get_flow_message_request_fields_flow_action_item import GetFlowMessageRequestFieldsFlowActionItem
from ...types.get_flow_message_request_fields_flow_message_item import GetFlowMessageRequestFieldsFlowMessageItem
from ...types.get_flow_message_request_fields_template_item import GetFlowMessageRequestFieldsTemplateItem
from ...types.get_flow_message_request_include_item import GetFlowMessageRequestIncludeItem
from ...types.get_flow_message_response_collection import GetFlowMessageResponseCollection
from ...types.get_flow_message_response_compound_document import GetFlowMessageResponseCompoundDocument
from ...types.get_flow_message_template_relationship_response import GetFlowMessageTemplateRelationshipResponse
from ...types.get_flow_message_template_request_fields_template_item import (
    GetFlowMessageTemplateRequestFieldsTemplateItem,
)
from ...types.get_flow_relationships_flow_actions_request_sort import GetFlowRelationshipsFlowActionsRequestSort
from ...types.get_flow_request_fields_flow_action_item import GetFlowRequestFieldsFlowActionItem
from ...types.get_flow_request_fields_flow_item import GetFlowRequestFieldsFlowItem
from ...types.get_flow_request_include_item import GetFlowRequestIncludeItem
from ...types.get_flow_response import GetFlowResponse
from ...types.get_flow_response_collection_compound_document import GetFlowResponseCollectionCompoundDocument
from ...types.get_flow_response_compound_document import GetFlowResponseCompoundDocument
from ...types.get_flow_tag_relationship_list_response_collection import GetFlowTagRelationshipListResponseCollection
from ...types.get_flows_request_fields_flow_action_item import GetFlowsRequestFieldsFlowActionItem
from ...types.get_flows_request_fields_flow_item import GetFlowsRequestFieldsFlowItem
from ...types.get_flows_request_include_item import GetFlowsRequestIncludeItem
from ...types.get_flows_request_sort import GetFlowsRequestSort
from ...types.get_tag_response_collection import GetTagResponseCollection
from ...types.get_template_response import GetTemplateResponse
from ...types.patch_flow_response import PatchFlowResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FlowsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_flows(
        self,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowsRequestFieldsFlowActionItem], typing.List[GetFlowsRequestFieldsFlowActionItem]
        ],
        fields_flow: typing.Union[
            typing.Optional[GetFlowsRequestFieldsFlowItem], typing.List[GetFlowsRequestFieldsFlowItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        filter: typing.Optional[str] = None,
        include: typing.Union[typing.Optional[GetFlowsRequestIncludeItem], typing.List[GetFlowsRequestIncludeItem]],
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowsRequestSort] = None,
    ) -> GetFlowResponseCollectionCompoundDocument:
        """
        Get all flows in an account.

        Returns a maximum of 50 flows per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - fields_flow_action: typing.Union[typing.Optional[GetFlowsRequestFieldsFlowActionItem], typing.List[GetFlowsRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow: typing.Union[typing.Optional[GetFlowsRequestFieldsFlowItem], typing.List[GetFlowsRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`status`: `equals`<br>`archived`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`trigger_type`: `equals`

            - include: typing.Union[typing.Optional[GetFlowsRequestIncludeItem], typing.List[GetFlowsRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 50.

            - sort: typing.Optional[GetFlowsRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/flows"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow]": fields_flow,
                    "fields[tag]": fields_tag,
                    "filter": filter,
                    "include": include,
                    "page[cursor]": page_cursor,
                    "page[size]": page_size,
                    "sort": sort,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowResponseCollectionCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowRequestFieldsFlowActionItem], typing.List[GetFlowRequestFieldsFlowActionItem]
        ],
        fields_flow: typing.Union[
            typing.Optional[GetFlowRequestFieldsFlowItem], typing.List[GetFlowRequestFieldsFlowItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        include: typing.Union[typing.Optional[GetFlowRequestIncludeItem], typing.List[GetFlowRequestIncludeItem]],
    ) -> GetFlowResponseCompoundDocument:
        """
        Get a flow with the given flow ID.

        Include parameters can be provided to get the following related resource data: `flow-actions`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowRequestFieldsFlowActionItem], typing.List[GetFlowRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow: typing.Union[typing.Optional[GetFlowRequestFieldsFlowItem], typing.List[GetFlowRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[GetFlowRequestIncludeItem], typing.List[GetFlowRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow]": fields_flow,
                    "fields[tag]": fields_tag,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_flow(self, id: str, *, data: FlowUpdateQueryResourceObject) -> PatchFlowResponse:
        """
        Update the status of a flow with the given flow ID, and all actions in that flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:write`

        Parameters:
            - id: str. ID of the Flow to update. Ex: XVTP5Q

            - data: FlowUpdateQueryResourceObject.
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PatchFlowResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_action(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowActionRequestFieldsFlowActionItem],
            typing.List[GetFlowActionRequestFieldsFlowActionItem],
        ],
        fields_flow_message: typing.Union[
            typing.Optional[GetFlowActionRequestFieldsFlowMessageItem],
            typing.List[GetFlowActionRequestFieldsFlowMessageItem],
        ],
        fields_flow: typing.Union[
            typing.Optional[GetFlowActionRequestFieldsFlowItem], typing.List[GetFlowActionRequestFieldsFlowItem]
        ],
        include: typing.Union[
            typing.Optional[GetFlowActionRequestIncludeItem], typing.List[GetFlowActionRequestIncludeItem]
        ],
    ) -> GetFlowActionResponseCompoundDocument:
        """
        Get a flow action from a flow with the given flow action ID.

        Include parameters can be provided to get the following related resource data: `flow`, `flow-messages`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowActionRequestFieldsFlowActionItem], typing.List[GetFlowActionRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow_message: typing.Union[typing.Optional[GetFlowActionRequestFieldsFlowMessageItem], typing.List[GetFlowActionRequestFieldsFlowMessageItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow: typing.Union[typing.Optional[GetFlowActionRequestFieldsFlowItem], typing.List[GetFlowActionRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[GetFlowActionRequestIncludeItem], typing.List[GetFlowActionRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow-message]": fields_flow_message,
                    "fields[flow]": fields_flow,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_message(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowMessageRequestFieldsFlowActionItem],
            typing.List[GetFlowMessageRequestFieldsFlowActionItem],
        ],
        fields_flow_message: typing.Union[
            typing.Optional[GetFlowMessageRequestFieldsFlowMessageItem],
            typing.List[GetFlowMessageRequestFieldsFlowMessageItem],
        ],
        fields_template: typing.Union[
            typing.Optional[GetFlowMessageRequestFieldsTemplateItem],
            typing.List[GetFlowMessageRequestFieldsTemplateItem],
        ],
        include: typing.Union[
            typing.Optional[GetFlowMessageRequestIncludeItem], typing.List[GetFlowMessageRequestIncludeItem]
        ],
    ) -> GetFlowMessageResponseCompoundDocument:
        """
        Get the flow message of a flow with the given message ID.

        Include parameters can be provided to get the following related resource data: 'flow-actions'<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowMessageRequestFieldsFlowActionItem], typing.List[GetFlowMessageRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow_message: typing.Union[typing.Optional[GetFlowMessageRequestFieldsFlowMessageItem], typing.List[GetFlowMessageRequestFieldsFlowMessageItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_template: typing.Union[typing.Optional[GetFlowMessageRequestFieldsTemplateItem], typing.List[GetFlowMessageRequestFieldsTemplateItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[GetFlowMessageRequestIncludeItem], typing.List[GetFlowMessageRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow-message]": fields_flow_message,
                    "fields[template]": fields_template,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_flow_actions(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowFlowActionsRequestFieldsFlowActionItem],
            typing.List[GetFlowFlowActionsRequestFieldsFlowActionItem],
        ],
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowFlowActionsRequestSort] = None,
    ) -> GetFlowActionResponseCollection:
        """
        Get all flow actions associated with the given flow ID.

        Returns a maximum of 50 flows per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowFlowActionsRequestFieldsFlowActionItem], typing.List[GetFlowFlowActionsRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`action_type`: `any`, `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 50.

            - sort: typing.Optional[GetFlowFlowActionsRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/flow-actions"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "filter": filter,
                    "page[cursor]": page_cursor,
                    "page[size]": page_size,
                    "sort": sort,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_relationships_flow_actions(
        self,
        id: str,
        *,
        filter: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowRelationshipsFlowActionsRequestSort] = None,
    ) -> GetFlowFlowActionRelationshipListResponseCollection:
        """
        Get all [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for flow actions associated with the given flow ID.

        Flow action relationships can be sorted by the following fields, in ascending and descending order:
        `id`,  `status`, `created`, `updated`

        Use filters to narrow your results.

        Returns a maximum of 50 flow action relationships per request, which can be paginated with offset pagination. Offset pagination uses the following parameters: `page[size]` and `page[number]`.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`action_type`: `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 100.

            - sort: typing.Optional[GetFlowRelationshipsFlowActionsRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/relationships/flow-actions"
            ),
            params=remove_none_from_dict({"filter": filter, "page[size]": page_size, "sort": sort}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowFlowActionRelationshipListResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_relationships_tags(self, id: str) -> GetFlowTagRelationshipListResponseCollection:
        """
        Return the tag IDs of all tags associated with the given flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`
        `tags:read`

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/relationships/tags"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowTagRelationshipListResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_tags(
        self,
        id: str,
        *,
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
    ) -> GetTagResponseCollection:
        """
        Return all tags associated with the given flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`
        `tags:read`

        Parameters:
            - id: str.

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/tags"),
            params=remove_none_from_dict({"fields[tag]": fields_tag}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTagResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_action_flow(
        self,
        id: str,
        *,
        fields_flow: typing.Union[
            typing.Optional[GetFlowActionFlowRequestFieldsFlowItem], typing.List[GetFlowActionFlowRequestFieldsFlowItem]
        ],
    ) -> GetFlowResponse:
        """
        Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow: typing.Union[typing.Optional[GetFlowActionFlowRequestFieldsFlowItem], typing.List[GetFlowActionFlowRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/flow"),
            params=remove_none_from_dict({"fields[flow]": fields_flow}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_action_relationships_flow(self, id: str) -> GetFlowActionFlowRelationshipResponse:
        """
        Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/relationships/flow"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionFlowRelationshipResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_action_messages(
        self,
        id: str,
        *,
        fields_flow_message: typing.Union[
            typing.Optional[GetFlowActionMessagesRequestFieldsFlowMessageItem],
            typing.List[GetFlowActionMessagesRequestFieldsFlowMessageItem],
        ],
        filter: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowActionMessagesRequestSort] = None,
    ) -> GetFlowMessageResponseCollection:
        """
        Get all flow messages associated with the given action ID.

        Flow messages can be sorted by the following fields, in ascending and descending order:

        ascending: `id`,  `name`, `created`, `updated`
        descending: `-id`,  `-name`, `-created`, `-updated`

        Returns a maximum of 50 flows per request, which can be paginated with offset pagination. Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_message: typing.Union[typing.Optional[GetFlowActionMessagesRequestFieldsFlowMessageItem], typing.List[GetFlowActionMessagesRequestFieldsFlowMessageItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 100.

            - sort: typing.Optional[GetFlowActionMessagesRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/flow-messages"),
            params=remove_none_from_dict(
                {"fields[flow-message]": fields_flow_message, "filter": filter, "page[size]": page_size, "sort": sort}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_action_relationships_messages(
        self,
        id: str,
        *,
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowActionRelationshipsMessagesRequestSort] = None,
    ) -> GetFlowActionFlowMessageRelationshipResponseCollection:
        """
        Get all relationships for flow messages associated with the given flow action ID.

        Returns a maximum of 50 flow message relationships per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 50.

            - sort: typing.Optional[GetFlowActionRelationshipsMessagesRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/relationships/flow-messages"
            ),
            params=remove_none_from_dict(
                {"filter": filter, "page[cursor]": page_cursor, "page[size]": page_size, "sort": sort}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionFlowMessageRelationshipResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_message_action(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowMessageActionRequestFieldsFlowActionItem],
            typing.List[GetFlowMessageActionRequestFieldsFlowActionItem],
        ],
    ) -> GetFlowActionResponse:
        """
        Get the flow action for a flow message with the given message ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowMessageActionRequestFieldsFlowActionItem], typing.List[GetFlowMessageActionRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/flow-action"),
            params=remove_none_from_dict({"fields[flow-action]": fields_flow_action}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_message_relationships_action(self, id: str) -> GetFlowMessageFlowActionRelationshipResponse:
        """
        Get the [relationship](https://developers.klaviyo.com/en/reference/api_overview#relationships) for a flow message's flow action, given the flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/relationships/flow-action"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageFlowActionRelationshipResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_message_relationships_template(self, id: str) -> GetFlowMessageTemplateRelationshipResponse:
        """
        Returns the ID of the related template<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `templates:read`

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/relationships/template"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageTemplateRelationshipResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_flow_message_template(
        self,
        id: str,
        *,
        fields_template: typing.Union[
            typing.Optional[GetFlowMessageTemplateRequestFieldsTemplateItem],
            typing.List[GetFlowMessageTemplateRequestFieldsTemplateItem],
        ],
    ) -> GetTemplateResponse:
        """
        Return the related template<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `templates:read`

        Parameters:
            - id: str.

            - fields_template: typing.Union[typing.Optional[GetFlowMessageTemplateRequestFieldsTemplateItem], typing.List[GetFlowMessageTemplateRequestFieldsTemplateItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/template"),
            params=remove_none_from_dict({"fields[template]": fields_template}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTemplateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFlowsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_flows(
        self,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowsRequestFieldsFlowActionItem], typing.List[GetFlowsRequestFieldsFlowActionItem]
        ],
        fields_flow: typing.Union[
            typing.Optional[GetFlowsRequestFieldsFlowItem], typing.List[GetFlowsRequestFieldsFlowItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        filter: typing.Optional[str] = None,
        include: typing.Union[typing.Optional[GetFlowsRequestIncludeItem], typing.List[GetFlowsRequestIncludeItem]],
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowsRequestSort] = None,
    ) -> GetFlowResponseCollectionCompoundDocument:
        """
        Get all flows in an account.

        Returns a maximum of 50 flows per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - fields_flow_action: typing.Union[typing.Optional[GetFlowsRequestFieldsFlowActionItem], typing.List[GetFlowsRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow: typing.Union[typing.Optional[GetFlowsRequestFieldsFlowItem], typing.List[GetFlowsRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`status`: `equals`<br>`archived`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`trigger_type`: `equals`

            - include: typing.Union[typing.Optional[GetFlowsRequestIncludeItem], typing.List[GetFlowsRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 50.

            - sort: typing.Optional[GetFlowsRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/flows"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow]": fields_flow,
                    "fields[tag]": fields_tag,
                    "filter": filter,
                    "include": include,
                    "page[cursor]": page_cursor,
                    "page[size]": page_size,
                    "sort": sort,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowResponseCollectionCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowRequestFieldsFlowActionItem], typing.List[GetFlowRequestFieldsFlowActionItem]
        ],
        fields_flow: typing.Union[
            typing.Optional[GetFlowRequestFieldsFlowItem], typing.List[GetFlowRequestFieldsFlowItem]
        ],
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
        include: typing.Union[typing.Optional[GetFlowRequestIncludeItem], typing.List[GetFlowRequestIncludeItem]],
    ) -> GetFlowResponseCompoundDocument:
        """
        Get a flow with the given flow ID.

        Include parameters can be provided to get the following related resource data: `flow-actions`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowRequestFieldsFlowActionItem], typing.List[GetFlowRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow: typing.Union[typing.Optional[GetFlowRequestFieldsFlowItem], typing.List[GetFlowRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[GetFlowRequestIncludeItem], typing.List[GetFlowRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow]": fields_flow,
                    "fields[tag]": fields_tag,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_flow(self, id: str, *, data: FlowUpdateQueryResourceObject) -> PatchFlowResponse:
        """
        Update the status of a flow with the given flow ID, and all actions in that flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:write`

        Parameters:
            - id: str. ID of the Flow to update. Ex: XVTP5Q

            - data: FlowUpdateQueryResourceObject.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}"),
            json=jsonable_encoder({"data": data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PatchFlowResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_action(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowActionRequestFieldsFlowActionItem],
            typing.List[GetFlowActionRequestFieldsFlowActionItem],
        ],
        fields_flow_message: typing.Union[
            typing.Optional[GetFlowActionRequestFieldsFlowMessageItem],
            typing.List[GetFlowActionRequestFieldsFlowMessageItem],
        ],
        fields_flow: typing.Union[
            typing.Optional[GetFlowActionRequestFieldsFlowItem], typing.List[GetFlowActionRequestFieldsFlowItem]
        ],
        include: typing.Union[
            typing.Optional[GetFlowActionRequestIncludeItem], typing.List[GetFlowActionRequestIncludeItem]
        ],
    ) -> GetFlowActionResponseCompoundDocument:
        """
        Get a flow action from a flow with the given flow action ID.

        Include parameters can be provided to get the following related resource data: `flow`, `flow-messages`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowActionRequestFieldsFlowActionItem], typing.List[GetFlowActionRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow_message: typing.Union[typing.Optional[GetFlowActionRequestFieldsFlowMessageItem], typing.List[GetFlowActionRequestFieldsFlowMessageItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow: typing.Union[typing.Optional[GetFlowActionRequestFieldsFlowItem], typing.List[GetFlowActionRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[GetFlowActionRequestIncludeItem], typing.List[GetFlowActionRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow-message]": fields_flow_message,
                    "fields[flow]": fields_flow,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_message(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowMessageRequestFieldsFlowActionItem],
            typing.List[GetFlowMessageRequestFieldsFlowActionItem],
        ],
        fields_flow_message: typing.Union[
            typing.Optional[GetFlowMessageRequestFieldsFlowMessageItem],
            typing.List[GetFlowMessageRequestFieldsFlowMessageItem],
        ],
        fields_template: typing.Union[
            typing.Optional[GetFlowMessageRequestFieldsTemplateItem],
            typing.List[GetFlowMessageRequestFieldsTemplateItem],
        ],
        include: typing.Union[
            typing.Optional[GetFlowMessageRequestIncludeItem], typing.List[GetFlowMessageRequestIncludeItem]
        ],
    ) -> GetFlowMessageResponseCompoundDocument:
        """
        Get the flow message of a flow with the given message ID.

        Include parameters can be provided to get the following related resource data: 'flow-actions'<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowMessageRequestFieldsFlowActionItem], typing.List[GetFlowMessageRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_flow_message: typing.Union[typing.Optional[GetFlowMessageRequestFieldsFlowMessageItem], typing.List[GetFlowMessageRequestFieldsFlowMessageItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - fields_template: typing.Union[typing.Optional[GetFlowMessageRequestFieldsTemplateItem], typing.List[GetFlowMessageRequestFieldsTemplateItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - include: typing.Union[typing.Optional[GetFlowMessageRequestIncludeItem], typing.List[GetFlowMessageRequestIncludeItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#relationships
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "fields[flow-message]": fields_flow_message,
                    "fields[template]": fields_template,
                    "include": include,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageResponseCompoundDocument, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_flow_actions(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowFlowActionsRequestFieldsFlowActionItem],
            typing.List[GetFlowFlowActionsRequestFieldsFlowActionItem],
        ],
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowFlowActionsRequestSort] = None,
    ) -> GetFlowActionResponseCollection:
        """
        Get all flow actions associated with the given flow ID.

        Returns a maximum of 50 flows per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowFlowActionsRequestFieldsFlowActionItem], typing.List[GetFlowFlowActionsRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`action_type`: `any`, `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 50.

            - sort: typing.Optional[GetFlowFlowActionsRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/flow-actions"),
            params=remove_none_from_dict(
                {
                    "fields[flow-action]": fields_flow_action,
                    "filter": filter,
                    "page[cursor]": page_cursor,
                    "page[size]": page_size,
                    "sort": sort,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_relationships_flow_actions(
        self,
        id: str,
        *,
        filter: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowRelationshipsFlowActionsRequestSort] = None,
    ) -> GetFlowFlowActionRelationshipListResponseCollection:
        """
        Get all [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for flow actions associated with the given flow ID.

        Flow action relationships can be sorted by the following fields, in ascending and descending order:
        `id`,  `status`, `created`, `updated`

        Use filters to narrow your results.

        Returns a maximum of 50 flow action relationships per request, which can be paginated with offset pagination. Offset pagination uses the following parameters: `page[size]` and `page[number]`.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`action_type`: `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 100.

            - sort: typing.Optional[GetFlowRelationshipsFlowActionsRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/relationships/flow-actions"
            ),
            params=remove_none_from_dict({"filter": filter, "page[size]": page_size, "sort": sort}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowFlowActionRelationshipListResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_relationships_tags(self, id: str) -> GetFlowTagRelationshipListResponseCollection:
        """
        Return the tag IDs of all tags associated with the given flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`
        `tags:read`

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/relationships/tags"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowTagRelationshipListResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_tags(
        self,
        id: str,
        *,
        fields_tag: typing.Union[
            typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]
        ],
    ) -> GetTagResponseCollection:
        """
        Return all tags associated with the given flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`
        `tags:read`

        Parameters:
            - id: str.

            - fields_tag: typing.Union[typing.Optional[typing_extensions.Literal["name"]], typing.List[typing_extensions.Literal["name"]]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flows/{id}/tags"),
            params=remove_none_from_dict({"fields[tag]": fields_tag}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTagResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_action_flow(
        self,
        id: str,
        *,
        fields_flow: typing.Union[
            typing.Optional[GetFlowActionFlowRequestFieldsFlowItem], typing.List[GetFlowActionFlowRequestFieldsFlowItem]
        ],
    ) -> GetFlowResponse:
        """
        Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow: typing.Union[typing.Optional[GetFlowActionFlowRequestFieldsFlowItem], typing.List[GetFlowActionFlowRequestFieldsFlowItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/flow"),
            params=remove_none_from_dict({"fields[flow]": fields_flow}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_action_relationships_flow(self, id: str) -> GetFlowActionFlowRelationshipResponse:
        """
        Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/relationships/flow"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionFlowRelationshipResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_action_messages(
        self,
        id: str,
        *,
        fields_flow_message: typing.Union[
            typing.Optional[GetFlowActionMessagesRequestFieldsFlowMessageItem],
            typing.List[GetFlowActionMessagesRequestFieldsFlowMessageItem],
        ],
        filter: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowActionMessagesRequestSort] = None,
    ) -> GetFlowMessageResponseCollection:
        """
        Get all flow messages associated with the given action ID.

        Flow messages can be sorted by the following fields, in ascending and descending order:

        ascending: `id`,  `name`, `created`, `updated`
        descending: `-id`,  `-name`, `-created`, `-updated`

        Returns a maximum of 50 flows per request, which can be paginated with offset pagination. Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_message: typing.Union[typing.Optional[GetFlowActionMessagesRequestFieldsFlowMessageItem], typing.List[GetFlowActionMessagesRequestFieldsFlowMessageItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 100.

            - sort: typing.Optional[GetFlowActionMessagesRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/flow-messages"),
            params=remove_none_from_dict(
                {"fields[flow-message]": fields_flow_message, "filter": filter, "page[size]": page_size, "sort": sort}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_action_relationships_messages(
        self,
        id: str,
        *,
        filter: typing.Optional[str] = None,
        page_cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        sort: typing.Optional[GetFlowActionRelationshipsMessagesRequestSort] = None,
    ) -> GetFlowActionFlowMessageRelationshipResponseCollection:
        """
        Get all relationships for flow messages associated with the given flow action ID.

        Returns a maximum of 50 flow message relationships per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - filter: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`

            - page_cursor: typing.Optional[str]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#pagination

            - page_size: typing.Optional[int]. Default: 50. Min: 1. Max: 50.

            - sort: typing.Optional[GetFlowActionRelationshipsMessagesRequestSort]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sorting
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-actions/{id}/relationships/flow-messages"
            ),
            params=remove_none_from_dict(
                {"filter": filter, "page[cursor]": page_cursor, "page[size]": page_size, "sort": sort}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionFlowMessageRelationshipResponseCollection, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_message_action(
        self,
        id: str,
        *,
        fields_flow_action: typing.Union[
            typing.Optional[GetFlowMessageActionRequestFieldsFlowActionItem],
            typing.List[GetFlowMessageActionRequestFieldsFlowActionItem],
        ],
    ) -> GetFlowActionResponse:
        """
        Get the flow action for a flow message with the given message ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.

            - fields_flow_action: typing.Union[typing.Optional[GetFlowMessageActionRequestFieldsFlowActionItem], typing.List[GetFlowMessageActionRequestFieldsFlowActionItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/flow-action"),
            params=remove_none_from_dict({"fields[flow-action]": fields_flow_action}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowActionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_message_relationships_action(self, id: str) -> GetFlowMessageFlowActionRelationshipResponse:
        """
        Get the [relationship](https://developers.klaviyo.com/en/reference/api_overview#relationships) for a flow message's flow action, given the flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `flows:read`

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/relationships/flow-action"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageFlowActionRelationshipResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_message_relationships_template(self, id: str) -> GetFlowMessageTemplateRelationshipResponse:
        """
        Returns the ID of the related template<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `templates:read`

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/relationships/template"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFlowMessageTemplateRelationshipResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_flow_message_template(
        self,
        id: str,
        *,
        fields_template: typing.Union[
            typing.Optional[GetFlowMessageTemplateRequestFieldsTemplateItem],
            typing.List[GetFlowMessageTemplateRequestFieldsTemplateItem],
        ],
    ) -> GetTemplateResponse:
        """
        Return the related template<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`

        **Scopes:**
        `templates:read`

        Parameters:
            - id: str.

            - fields_template: typing.Union[typing.Optional[GetFlowMessageTemplateRequestFieldsTemplateItem], typing.List[GetFlowMessageTemplateRequestFieldsTemplateItem]]. For more information please visit https://developers.klaviyo.com/en/v2023-08-15/reference/api-overview#sparse-fieldsets
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/flow-messages/{id}/template"),
            params=remove_none_from_dict({"fields[template]": fields_template}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTemplateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
