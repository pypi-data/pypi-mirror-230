# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .campaign_message_create_query_resource_object_attributes_content import (
    CampaignMessageCreateQueryResourceObjectAttributesContent,
)
from .render_options_sub_object import RenderOptionsSubObject


class CampaignMessageCreateQueryResourceObjectAttributes(pydantic.BaseModel):
    channel: str = pydantic.Field(description="The channel the message is to be sent on (email or sms, for example)")
    label: typing.Optional[str] = pydantic.Field(description="The label or name on the message")
    content: typing.Optional[CampaignMessageCreateQueryResourceObjectAttributesContent] = pydantic.Field(
        description="Additional attributes relating to the content of the message"
    )
    render_options: typing.Optional[RenderOptionsSubObject] = pydantic.Field(
        description="Additional options for rendering the message"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
