# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .device_metadata_environment import DeviceMetadataEnvironment
from .device_metadata_klaviyo_sdk import DeviceMetadataKlaviyoSdk
from .device_metadata_os_name import DeviceMetadataOsName


class DeviceMetadata(pydantic.BaseModel):
    device_id: typing.Optional[str] = pydantic.Field(
        description="Relatively stable ID for the device. Will update on app uninstall and reinstall"
    )
    klaviyo_sdk: typing.Optional[DeviceMetadataKlaviyoSdk] = pydantic.Field(
        description="The name of the SDK used to create the push token."
    )
    sdk_version: typing.Optional[str] = pydantic.Field(
        description="The version of the SDK used to create the push token"
    )
    device_model: typing.Optional[str] = pydantic.Field(description="The model of the device")
    os_name: typing.Optional[DeviceMetadataOsName] = pydantic.Field(
        description="The name of the operating system on the device."
    )
    os_version: typing.Optional[str] = pydantic.Field(description="The version of the operating system on the device")
    manufacturer: typing.Optional[str] = pydantic.Field(description="The manufacturer of the device")
    app_name: typing.Optional[str] = pydantic.Field(description="The name of the app that created the push token")
    app_version: typing.Optional[str] = pydantic.Field(description="The version of the app that created the push token")
    app_build: typing.Optional[str] = pydantic.Field(description="The build of the app that created the push token")
    app_id: typing.Optional[str] = pydantic.Field(description="The ID of the app that created the push token")
    environment: typing.Optional[DeviceMetadataEnvironment] = pydantic.Field(
        description="The environment in which the push token was created"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
