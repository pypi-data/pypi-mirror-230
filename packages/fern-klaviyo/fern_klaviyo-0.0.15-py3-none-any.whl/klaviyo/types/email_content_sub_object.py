# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class EmailContentSubObject(pydantic.BaseModel):
    subject: typing.Optional[str] = pydantic.Field(description="The subject of the message")
    preview_text: typing.Optional[str] = pydantic.Field(description="Preview text associated with the message")
    from_email: typing.Optional[str] = pydantic.Field(description="The email the message should be sent from")
    from_label: typing.Optional[str] = pydantic.Field(description="The label associated with the from_email")
    reply_to_email: typing.Optional[str] = pydantic.Field(description="Optional Reply-To email address")
    cc_email: typing.Optional[str] = pydantic.Field(description="Optional CC email address")
    bcc_email: typing.Optional[str] = pydantic.Field(description="Optional BCC email address")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
