# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .utm_params_sub_object import UtmParamsSubObject


class EmailTrackingOptionsSubObject(pydantic.BaseModel):
    is_add_utm: typing.Optional[bool] = pydantic.Field(
        description="Whether the campaign needs UTM parameters. If set to False, UTM params will not be used."
    )
    utm_params: typing.Optional[typing.List[UtmParamsSubObject]] = pydantic.Field(
        description="A list of UTM parameters. If an empty list is given and is_add_utm is True, uses company defaults."
    )
    is_tracking_clicks: typing.Optional[bool] = pydantic.Field(
        description="Whether the campaign is tracking click events. If not specified, uses company defaults."
    )
    is_tracking_opens: typing.Optional[bool] = pydantic.Field(
        description="Whether the campaign is tracking open events. If not specified, uses company defaults."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
