# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PatchCatalogVariantResponseDataAttributes(pydantic.BaseModel):
    external_id: typing.Optional[str] = pydantic.Field(
        description="The ID of the catalog item variant in an external system."
    )
    title: typing.Optional[str] = pydantic.Field(description="The title of the catalog item variant.")
    description: typing.Optional[str] = pydantic.Field(description="A description of the catalog item variant.")
    sku: typing.Optional[str] = pydantic.Field(description="The SKU of the catalog item variant.")
    inventory_policy: typing.Optional[str] = pydantic.Field(
        description=(
            "This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:\n"
            "`1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.\n"
            "`0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.\n"
        )
    )
    inventory_quantity: typing.Optional[float] = pydantic.Field(
        description="The quantity of the catalog item variant currently in stock."
    )
    price: typing.Optional[float] = pydantic.Field(
        description="This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item)."
    )
    url: typing.Optional[str] = pydantic.Field(
        description="URL pointing to the location of the catalog item variant on your website."
    )
    image_full_url: typing.Optional[str] = pydantic.Field(
        description="URL pointing to the location of a full image of the catalog item variant."
    )
    image_thumbnail_url: typing.Optional[str] = pydantic.Field(
        description="URL pointing to the location of an image thumbnail of the catalog item variant."
    )
    images: typing.Optional[typing.List[str]] = pydantic.Field(
        description="List of URLs pointing to the locations of images of the catalog item variant."
    )
    custom_metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb."
    )
    published: typing.Optional[bool] = pydantic.Field(
        description="Boolean value indicating whether the catalog item variant is published."
    )
    created: typing.Optional[dt.datetime] = pydantic.Field(
        description="Date and time when the catalog item  variant was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)."
    )
    updated: typing.Optional[dt.datetime] = pydantic.Field(
        description="Date and time when the catalog item variant was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
