# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .profile_location_latitude import ProfileLocationLatitude
from .profile_location_longitude import ProfileLocationLongitude


class ProfileLocation(pydantic.BaseModel):
    address_1: typing.Optional[str] = pydantic.Field(alias="address1", description="First line of street address")
    address_2: typing.Optional[str] = pydantic.Field(alias="address2", description="Second line of street address")
    city: typing.Optional[str] = pydantic.Field(description="City name")
    country: typing.Optional[str] = pydantic.Field(description="Country name")
    latitude: typing.Optional[ProfileLocationLatitude] = pydantic.Field(
        description="Latitude coordinate. We recommend providing a precision of four decimal places."
    )
    longitude: typing.Optional[ProfileLocationLongitude] = pydantic.Field(
        description="Longitude coordinate. We recommend providing a precision of four decimal places."
    )
    region: typing.Optional[str] = pydantic.Field(description="Region within a country, such as state or province")
    zip: typing.Optional[str] = pydantic.Field(description="Zip code")
    timezone: typing.Optional[str] = pydantic.Field(
        description="Time zone name. We recommend using time zones from the IANA Time Zone Database."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
