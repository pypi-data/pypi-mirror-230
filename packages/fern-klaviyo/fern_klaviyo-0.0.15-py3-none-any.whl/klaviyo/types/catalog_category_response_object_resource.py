# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .catalog_category_enum import CatalogCategoryEnum
from .catalog_category_response_object_resource_attributes import CatalogCategoryResponseObjectResourceAttributes
from .object_links import ObjectLinks


class CatalogCategoryResponseObjectResource(pydantic.BaseModel):
    type: CatalogCategoryEnum
    id: str = pydantic.Field(
        description="The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`."
    )
    attributes: CatalogCategoryResponseObjectResourceAttributes
    links: ObjectLinks

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
