# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class SmsMarketing(pydantic.BaseModel):
    consent: str = pydantic.Field(description="The consent status for SMS marketing.")
    timestamp: dt.datetime = pydantic.Field(
        description="The timestamp when consent record or updated for SMS marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)."
    )
    method: str = pydantic.Field(description="The method by which the profile was subscribed to SMS marketing.")
    method_detail: str = pydantic.Field(
        description="Additional details about the method which the profile was subscribed to SMS marketing. This may be empty if no details were provided."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
