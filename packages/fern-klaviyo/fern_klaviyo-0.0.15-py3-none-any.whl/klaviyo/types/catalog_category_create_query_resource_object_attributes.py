# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime


class CatalogCategoryCreateQueryResourceObjectAttributes(pydantic.BaseModel):
    external_id: str = pydantic.Field(description="The ID of the catalog category in an external system.")
    name: str = pydantic.Field(description="The name of the catalog category.")
    integration_type: typing.Optional[typing_extensions.Literal["$custom"]]
    catalog_type: typing.Optional[str] = pydantic.Field(
        description='The type of catalog. Currently only "$default" is supported.'
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
