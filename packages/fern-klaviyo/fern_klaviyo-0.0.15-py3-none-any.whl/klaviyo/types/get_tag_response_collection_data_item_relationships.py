# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .get_tag_response_collection_data_item_relationships_campaigns import (
    GetTagResponseCollectionDataItemRelationshipsCampaigns,
)
from .get_tag_response_collection_data_item_relationships_flows import (
    GetTagResponseCollectionDataItemRelationshipsFlows,
)
from .get_tag_response_collection_data_item_relationships_lists import (
    GetTagResponseCollectionDataItemRelationshipsLists,
)
from .get_tag_response_collection_data_item_relationships_segments import (
    GetTagResponseCollectionDataItemRelationshipsSegments,
)
from .get_tag_response_collection_data_item_relationships_tag_group import (
    GetTagResponseCollectionDataItemRelationshipsTagGroup,
)


class GetTagResponseCollectionDataItemRelationships(pydantic.BaseModel):
    tag_group: typing.Optional[GetTagResponseCollectionDataItemRelationshipsTagGroup] = pydantic.Field(
        alias="tag-group"
    )
    lists: typing.Optional[GetTagResponseCollectionDataItemRelationshipsLists]
    segments: typing.Optional[GetTagResponseCollectionDataItemRelationshipsSegments]
    campaigns: typing.Optional[GetTagResponseCollectionDataItemRelationshipsCampaigns]
    flows: typing.Optional[GetTagResponseCollectionDataItemRelationshipsFlows]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
