from typing import Tuple, Iterator, Any
import grpc
import sys
from functools import partial
from sylk.commons.interceptors import sylk_client_pre_rpc, SylkSimpleAuth
import logging
from google.protobuf import empty_pb2
from google.protobuf import any_pb2

from .sylk.Packages.v1 import Packages_pb2_grpc as Packages_v1_service, Packages_pb2
from .sylk.Methods.v1 import Methods_pb2_grpc as Methods_v1_service, Methods_pb2
from .sylk.Users.v1 import Users_pb2_grpc as Users_v1_service, Users_pb2
from .sylk.Enums.v1 import Enums_pb2_grpc as Enums_v1_service, Enums_pb2
from .sylk.Messages.v1 import Messages_pb2_grpc as Messages_v1_service, Messages_pb2
from .sylk.Activities.v1 import Activities_pb2_grpc as Activities_v1_service, Activities_pb2
from .sylk.Organizations.v1 import Organizations_pb2_grpc as Organizations_v1_service, Organizations_pb2
from .sylk.Fields.v1 import Fields_pb2_grpc as Fields_v1_service, Fields_pb2
from .sylk.Projects.v1 import Projects_pb2_grpc as Projects_v1_service, Projects_pb2
from .sylk.EnumValues.v1 import EnumValues_pb2_grpc as EnumValues_v1_service, EnumValues_pb2
from .sylk.Services.v1 import Services_pb2_grpc as Services_v1_service, Services_pb2
from .sylk.Folders.v2 import Folders_pb2_grpc as Folders_v2_service, Folders_pb2
from .sylk.Packages.v2 import Packages_pb2_grpc as Packages_v2_service, Packages_pb2
from .sylk.Services.v2 import Services_pb2_grpc as Services_v2_service, Services_pb2
from .sylk.Messages.v2 import Messages_pb2_grpc as Messages_v2_service, Messages_pb2
from .sylk.Tags.v2 import Tags_pb2_grpc as Tags_v2_service, Tags_pb2
from .sylk.Enums.v2 import Enums_pb2_grpc as Enums_v2_service, Enums_pb2
from .sylk.EnumValues.v2 import EnumValues_pb2_grpc as EnumValues_v2_service
from .sylk.Methods.v2 import Methods_pb2_grpc as Methods_v2_service

from .sylk.Fields.v2 import Fields_pb2_grpc as Fields_v2_service, Fields_pb2
from .sylk.Integrations.v2 import Integrations_pb2_grpc as Integrations_v2_service
from .sylk.ActivityLog.v1 import ActivityLog_pb2 as ActivityLog_v1
from .sylk.SylkUser.v1 import SylkUser_pb2 as SylkUser_v1
from .sylk.SylkMethod.v1 import SylkMethod_pb2 as SylkMethod_v1
from .sylk.SylkPackage.v1 import SylkPackage_pb2 as SylkPackage_v1
from .sylk.SylkCommons.v1 import SylkCommons_pb2 as SylkCommons_v1
from .sylk.SylkMessage.v1 import SylkMessage_pb2 as SylkMessage_v1
from .sylk.SylkConfigs.v1 import SylkConfigs_pb2 as SylkConfigs_v1
from .sylk.SylkClient.v1 import SylkClient_pb2 as SylkClient_v1
from .sylk.SylkProject.v1 import SylkProject_pb2 as SylkProject_v1
from .sylk.SylkEnumValue.v1 import SylkEnumValue_pb2 as SylkEnumValue_v1
from .sylk.SylkField.v1 import SylkField_pb2 as SylkField_v1
from .sylk.SylkServer.v1 import SylkServer_pb2 as SylkServer_v1
from .sylk.SylkApi.v1 import SylkApi_pb2 as SylkApi_v1
from .sylk.Sylk.v1 import Sylk_pb2 as Sylk_v1
from .sylk.SylkService.v1 import SylkService_pb2 as SylkService_v1
from .sylk.SylkEnum.v1 import SylkEnum_pb2 as SylkEnum_v1
from .sylk.SylkOrganization.v1 import SylkOrganization_pb2 as SylkOrganization_v1
from .sylk.Folders.v2 import Folders_pb2 as Folders_v2
from .sylk.SylkPackage.v2 import SylkPackage_pb2 as SylkPackage_v2
from .sylk.Sylk.v2 import Sylk_pb2 as Sylk_v2
from .sylk.Packages.v2 import Packages_pb2 as Packages_v2
from .sylk.Services.v2 import Services_pb2 as Services_v2
from .sylk.Messages.v2 import Messages_pb2 as Messages_v2
from .sylk.Tags.v2 import Tags_pb2 as Tags_v2
from .sylk.SylkService.v2 import SylkService_pb2 as SylkService_v2
from .sylk.SylkMessage.v2 import SylkMessage_pb2 as SylkMessage_v2
from .sylk.SylkEnum.v2 import SylkEnum_pb2 as SylkEnum_v2
from .sylk.Enums.v2 import Enums_pb2 as Enums_v2
from .sylk.EnumValues.v2 import EnumValues_pb2 as EnumValues_v2
from .sylk.Methods.v2 import Methods_pb2 as Methods_v2
from .sylk.Fields.v2 import Fields_pb2 as Fields_v2
from .sylk.Integrations.v2 import Integrations_pb2 as Integrations_v2

# For available channel options in python visit https://github.com/grpc/grpc/blob/v1.46.x/include/grpc/impl/codegen/grpc_types.h
_CHANNEL_OPTIONS = (("grpc.keepalive_permit_without_calls", 1),
	("grpc.keepalive_time_ms", 120000),
	("grpc.keepalive_timeout_ms", 20000),
	("grpc.http2.min_time_between_pings_ms", 120000),
	("grpc.http2.max_pings_without_data", 1),)

# Global metadata
_METADATA = (('sylk-version','0.2.0'),)

# Global auth key that will be verified by sylk client
_GLOBAL_AUTH_KEY = None

# Generated thanks to [sylk.build](https://www.sylk.build)



class Packages_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Packages/v1/Packages.proto
	Service: Packages
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Packages_v1_stub = Packages_v1_service.PackagesStub(self.channel)

	def GetPackage_WithCall(self, request: SylkApi_v1.GetPackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetPackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v1_stub.GetPackage.with_call(request,metadata=metadata)

	
	def GetPackage(self, request: SylkApi_v1.GetPackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetPackageResponse:
		"""sylk - """

		return self.Packages_v1_stub.GetPackage(request,metadata=metadata)

	
	def CreatePackage_WithCall(self, request: SylkApi_v1.CreatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreatePackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v1_stub.CreatePackage.with_call(request,metadata=metadata)

	
	def CreatePackage(self, request: SylkApi_v1.CreatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreatePackageResponse:
		"""sylk - """

		return self.Packages_v1_stub.CreatePackage(request,metadata=metadata)

	
	def DeletePackage_WithCall(self, request: SylkApi_v1.DeletePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeletePackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v1_stub.DeletePackage.with_call(request,metadata=metadata)

	
	def DeletePackage(self, request: SylkApi_v1.DeletePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeletePackageResponse:
		"""sylk - """

		return self.Packages_v1_stub.DeletePackage(request,metadata=metadata)

	
	def UpdatePackage_WithCall(self, request: SylkApi_v1.UpdatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdatePackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v1_stub.UpdatePackage.with_call(request,metadata=metadata)

	
	def UpdatePackage(self, request: SylkApi_v1.UpdatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdatePackageResponse:
		"""sylk - """

		return self.Packages_v1_stub.UpdatePackage(request,metadata=metadata)

	
	def ListPackages_WithCall(self, request: SylkApi_v1.ListPackagesRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[SylkApi_v1.GetPackageResponse], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v1_stub.ListPackages.with_call(request,metadata=metadata)

	
	def ListPackages(self, request: SylkApi_v1.ListPackagesRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[SylkApi_v1.GetPackageResponse]:
		"""sylk - """

		return self.Packages_v1_stub.ListPackages(request,metadata=metadata)


class Methods_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Methods/v1/Methods.proto
	Service: Methods
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Methods_v1_stub = Methods_v1_service.MethodsStub(self.channel)

	def CreateMethod_WithCall(self, request: SylkApi_v1.CreateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v1_stub.CreateMethod.with_call(request,metadata=metadata)

	
	def CreateMethod(self, request: SylkApi_v1.CreateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateMethodResponse:
		"""sylk - """

		return self.Methods_v1_stub.CreateMethod(request,metadata=metadata)

	
	def GetMethod_WithCall(self, request: SylkApi_v1.GetMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v1_stub.GetMethod.with_call(request,metadata=metadata)

	
	def GetMethod(self, request: SylkApi_v1.GetMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetMethodResponse:
		"""sylk - """

		return self.Methods_v1_stub.GetMethod(request,metadata=metadata)

	
	def DeleteMethod_WithCall(self, request: SylkApi_v1.DeleteMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v1_stub.DeleteMethod.with_call(request,metadata=metadata)

	
	def DeleteMethod(self, request: SylkApi_v1.DeleteMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteMethodResponse:
		"""sylk - """

		return self.Methods_v1_stub.DeleteMethod(request,metadata=metadata)

	
	def UpdateMethod_WithCall(self, request: SylkApi_v1.UpdateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v1_stub.UpdateMethod.with_call(request,metadata=metadata)

	
	def UpdateMethod(self, request: SylkApi_v1.UpdateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateMethodResponse:
		"""sylk - """

		return self.Methods_v1_stub.UpdateMethod(request,metadata=metadata)


class Users_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Users/v1/Users.proto
	Service: Users
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Users_v1_stub = Users_v1_service.UsersStub(self.channel)

	def CreateUser_WithCall(self, request: SylkApi_v1.CreateUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.CreateUser.with_call(request,metadata=metadata)

	
	def CreateUser(self, request: SylkApi_v1.CreateUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateUserResponse:
		"""sylk - """

		return self.Users_v1_stub.CreateUser(request,metadata=metadata)

	
	def GetAccessToken_WithCall(self, request: SylkApi_v1.GetAccessTokenRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetAccessTokenResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.GetAccessToken.with_call(request,metadata=metadata)

	
	def GetAccessToken(self, request: SylkApi_v1.GetAccessTokenRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetAccessTokenResponse:
		"""sylk - """
		return self.Users_v1_stub.GetAccessToken(request,metadata=metadata)

	
	def CreateAccessToken_WithCall(self, request: SylkApi_v1.CreateAccessTokenRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateAccessTokenResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.CreateAccessToken.with_call(request,metadata=metadata)

	
	def CreateAccessToken(self, request: SylkApi_v1.CreateAccessTokenRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateAccessTokenResponse:
		"""sylk - """

		return self.Users_v1_stub.CreateAccessToken(request,metadata=metadata)

	
	def GetUser_WithCall(self, request: SylkApi_v1.GetUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.GetUser.with_call(request,metadata=metadata)

	
	def GetUser(self, request: SylkApi_v1.GetUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetUserResponse:
		"""sylk - """

		return self.Users_v1_stub.GetUser(request,metadata=metadata)

	
	def ListAccessTokens_WithCall(self, request: SylkApi_v1.ListAccessTokensRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[SylkApi_v1.GetAccessTokenResponse], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.ListAccessTokens.with_call(request,metadata=metadata)

	
	def ListAccessTokens(self, request: SylkApi_v1.ListAccessTokensRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[SylkApi_v1.GetAccessTokenResponse]:
		"""sylk - """

		return self.Users_v1_stub.ListAccessTokens(request,metadata=metadata)

	
	def RevokeAccessToken_WithCall(self, request: SylkApi_v1.RevokeAccessTokenRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.RevokeAccessTokenResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.RevokeAccessToken.with_call(request,metadata=metadata)

	
	def RevokeAccessToken(self, request: SylkApi_v1.RevokeAccessTokenRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.RevokeAccessTokenResponse:
		"""sylk - """

		return self.Users_v1_stub.RevokeAccessToken(request,metadata=metadata)

	
	def UpdateUser_WithCall(self, request: SylkApi_v1.UpdateUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Users_v1_stub.UpdateUser.with_call(request,metadata=metadata)

	
	def UpdateUser(self, request: SylkApi_v1.UpdateUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateUserResponse:
		"""sylk - """

		return self.Users_v1_stub.UpdateUser(request,metadata=metadata)


class Enums_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Enums/v1/Enums.proto
	Service: Enums
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Enums_v1_stub = Enums_v1_service.EnumsStub(self.channel)

	def GetEnum_WithCall(self, request: SylkApi_v1.GetEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v1_stub.GetEnum.with_call(request,metadata=metadata)

	
	def GetEnum(self, request: SylkApi_v1.GetEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetEnumResponse:
		"""sylk - """

		return self.Enums_v1_stub.GetEnum(request,metadata=metadata)

	
	def UpdateEnum_WithCall(self, request: SylkApi_v1.UpdateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v1_stub.UpdateEnum.with_call(request,metadata=metadata)

	
	def UpdateEnum(self, request: SylkApi_v1.UpdateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateEnumResponse:
		"""sylk - """

		return self.Enums_v1_stub.UpdateEnum(request,metadata=metadata)

	
	def DeleteEnum_WithCall(self, request: SylkApi_v1.DeleteEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v1_stub.DeleteEnum.with_call(request,metadata=metadata)

	
	def DeleteEnum(self, request: SylkApi_v1.DeleteEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteEnumResponse:
		"""sylk - """

		return self.Enums_v1_stub.DeleteEnum(request,metadata=metadata)

	
	def CreateEnum_WithCall(self, request: SylkApi_v1.CreateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v1_stub.CreateEnum.with_call(request,metadata=metadata)

	
	def CreateEnum(self, request: SylkApi_v1.CreateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateEnumResponse:
		"""sylk - """

		return self.Enums_v1_stub.CreateEnum(request,metadata=metadata)


class Messages_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Messages/v1/Messages.proto
	Service: Messages
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Messages_v1_stub = Messages_v1_service.MessagesStub(self.channel)

	def GetMessage_WithCall(self, request: SylkApi_v1.GetMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v1_stub.GetMessage.with_call(request,metadata=metadata)

	
	def GetMessage(self, request: SylkApi_v1.GetMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetMessageResponse:
		"""sylk - """

		return self.Messages_v1_stub.GetMessage(request,metadata=metadata)

	
	def UpdateMessage_WithCall(self, request: SylkApi_v1.UpdateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v1_stub.UpdateMessage.with_call(request,metadata=metadata)

	
	def UpdateMessage(self, request: SylkApi_v1.UpdateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateMessageResponse:
		"""sylk - """

		return self.Messages_v1_stub.UpdateMessage(request,metadata=metadata)

	
	def CreateMessage_WithCall(self, request: SylkApi_v1.CreateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v1_stub.CreateMessage.with_call(request,metadata=metadata)

	
	def CreateMessage(self, request: SylkApi_v1.CreateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateMessageResponse:
		"""sylk - """

		return self.Messages_v1_stub.CreateMessage(request,metadata=metadata)

	
	def DeleteMessage_WithCall(self, request: SylkApi_v1.DeleteMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v1_stub.DeleteMessage.with_call(request,metadata=metadata)

	
	def DeleteMessage(self, request: SylkApi_v1.DeleteMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteMessageResponse:
		"""sylk - """

		return self.Messages_v1_stub.DeleteMessage(request,metadata=metadata)


class Activities_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Activities/v1/Activities.proto
	Service: Activities
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Activities_v1_stub = Activities_v1_service.ActivitiesStub(self.channel)

	def ListActivityLogs_WithCall(self, request: ActivityLog_v1.ListActivityLogsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[ActivityLog_v1.ActivityLog], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Activities_v1_stub.ListActivityLogs.with_call(request,metadata=metadata)

	
	def ListActivityLogs(self, request: ActivityLog_v1.ListActivityLogsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[ActivityLog_v1.ActivityLog]:
		"""sylk - """

		return self.Activities_v1_stub.ListActivityLogs(request,metadata=metadata)

	
	def GetActivityLogs_WithCall(self, request: ActivityLog_v1.ListActivityLogsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[ActivityLog_v1.GetActivityLogsResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Activities_v1_stub.GetActivityLogs.with_call(request,metadata=metadata)

	
	def GetActivityLogs(self, request: ActivityLog_v1.ListActivityLogsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> ActivityLog_v1.GetActivityLogsResponse:
		"""sylk - """

		return self.Activities_v1_stub.GetActivityLogs(request,metadata=metadata)


class Organizations_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Organizations/v1/Organizations.proto
	Service: Organizations
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Organizations_v1_stub = Organizations_v1_service.OrganizationsStub(self.channel)

	def AcceprUserInvite_WithCall(self, request: SylkApi_v1.AcceptUserInviteRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.AcceptUserInviteResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.AcceprUserInvite.with_call(request,metadata=metadata)

	
	def AcceprUserInvite(self, request: SylkApi_v1.AcceptUserInviteRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.AcceptUserInviteResponse:
		"""sylk - """

		return self.Organizations_v1_stub.AcceprUserInvite(request,metadata=metadata)

	
	def GetOrganization_WithCall(self, request: SylkApi_v1.GetOrganizationRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetOrganizationResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.GetOrganization.with_call(request,metadata=metadata)

	
	def GetOrganization(self, request: SylkApi_v1.GetOrganizationRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetOrganizationResponse:
		"""sylk - """

		return self.Organizations_v1_stub.GetOrganization(request,metadata=metadata)

	
	def UpdateOrganization_WithCall(self, request: SylkApi_v1.UpdateOrganizationRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateOrganizationResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.UpdateOrganization.with_call(request,metadata=metadata)

	
	def UpdateOrganization(self, request: SylkApi_v1.UpdateOrganizationRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateOrganizationResponse:
		"""sylk - """

		return self.Organizations_v1_stub.UpdateOrganization(request,metadata=metadata)

	
	def ListOrganizations_WithCall(self, request: SylkApi_v1.ListOrganizationsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[SylkApi_v1.GetOrganizationResponse], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.ListOrganizations.with_call(request,metadata=metadata)

	
	def ListOrganizations(self, request: SylkApi_v1.ListOrganizationsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[SylkApi_v1.GetOrganizationResponse]:
		"""sylk - """

		return self.Organizations_v1_stub.ListOrganizations(request,metadata=metadata)

	
	def AddUser_WithCall(self, request: SylkApi_v1.AddUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.AddUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.AddUser.with_call(request,metadata=metadata)

	
	def AddUser(self, request: SylkApi_v1.AddUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.AddUserResponse:
		"""sylk - """

		return self.Organizations_v1_stub.AddUser(request,metadata=metadata)

	
	def UpdateUserStatus_WithCall(self, request: SylkApi_v1.UpdateUserStatusRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateUserStatusResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.UpdateUserStatus.with_call(request,metadata=metadata)

	
	def UpdateUserStatus(self, request: SylkApi_v1.UpdateUserStatusRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateUserStatusResponse:
		"""sylk - """

		return self.Organizations_v1_stub.UpdateUserStatus(request,metadata=metadata)

	
	def RemoveUser_WithCall(self, request: SylkApi_v1.RemoveUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.RemoveUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.RemoveUser.with_call(request,metadata=metadata)

	
	def RemoveUser(self, request: SylkApi_v1.RemoveUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.RemoveUserResponse:
		"""sylk - """

		return self.Organizations_v1_stub.RemoveUser(request,metadata=metadata)

	
	def UpdateUserRole_WithCall(self, request: SylkApi_v1.UpdateUserRoleRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateUserRoleResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Organizations_v1_stub.UpdateUserRole.with_call(request,metadata=metadata)

	
	def UpdateUserRole(self, request: SylkApi_v1.UpdateUserRoleRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateUserRoleResponse:
		"""sylk - """

		return self.Organizations_v1_stub.UpdateUserRole(request,metadata=metadata)


class Fields_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Fields/v1/Fields.proto
	Service: Fields
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Fields_v1_stub = Fields_v1_service.FieldsStub(self.channel)

	def CreateField_WithCall(self, request: SylkApi_v1.CreateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v1_stub.CreateField.with_call(request,metadata=metadata)

	
	def CreateField(self, request: SylkApi_v1.CreateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateFieldResponse:
		"""sylk - """

		return self.Fields_v1_stub.CreateField(request,metadata=metadata)

	
	def GetField_WithCall(self, request: SylkApi_v1.GetFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v1_stub.GetField.with_call(request,metadata=metadata)

	
	def GetField(self, request: SylkApi_v1.GetFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetFieldResponse:
		"""sylk - """

		return self.Fields_v1_stub.GetField(request,metadata=metadata)

	
	def DeleteField_WithCall(self, request: SylkApi_v1.DeleteFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v1_stub.DeleteField.with_call(request,metadata=metadata)

	
	def DeleteField(self, request: SylkApi_v1.DeleteFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteFieldResponse:
		"""sylk - """

		return self.Fields_v1_stub.DeleteField(request,metadata=metadata)

	
	def UpdateField_WithCall(self, request: SylkApi_v1.UpdateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v1_stub.UpdateField.with_call(request,metadata=metadata)

	
	def UpdateField(self, request: SylkApi_v1.UpdateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateFieldResponse:
		"""sylk - """

		return self.Fields_v1_stub.UpdateField(request,metadata=metadata)


class Projects_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Projects/v1/Projects.proto
	Service: Projects
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Projects_v1_stub = Projects_v1_service.ProjectsStub(self.channel)

	def UpdateUserRoleProject_WithCall(self, request: SylkApi_v1.UpdateUserRoleRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateUserRoleResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.UpdateUserRoleProject.with_call(request,metadata=metadata)

	
	def UpdateUserRoleProject(self, request: SylkApi_v1.UpdateUserRoleRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateUserRoleResponse:
		"""sylk - """

		return self.Projects_v1_stub.UpdateUserRoleProject(request,metadata=metadata)

	
	def RemoveUserProject_WithCall(self, request: SylkApi_v1.RemoveUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.RemoveUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.RemoveUserProject.with_call(request,metadata=metadata)

	
	def RemoveUserProject(self, request: SylkApi_v1.RemoveUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.RemoveUserResponse:
		"""sylk - """

		return self.Projects_v1_stub.RemoveUserProject(request,metadata=metadata)

	
	def AddUserProject_WithCall(self, request: SylkApi_v1.AddUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.AddUserResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.AddUserProject.with_call(request,metadata=metadata)

	
	def AddUserProject(self, request: SylkApi_v1.AddUserRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.AddUserResponse:
		"""sylk - """

		return self.Projects_v1_stub.AddUserProject(request,metadata=metadata)

	
	def GetProject_WithCall(self, request: SylkApi_v1.GetProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetProjectResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.GetProject.with_call(request,metadata=metadata)

	
	def GetProject(self, request: SylkApi_v1.GetProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetProjectResponse:
		"""sylk - """

		return self.Projects_v1_stub.GetProject(request,metadata=metadata)

	
	def UpdateProject_WithCall(self, request: SylkApi_v1.UpdateProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateProjectResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.UpdateProject.with_call(request,metadata=metadata)

	
	def UpdateProject(self, request: SylkApi_v1.UpdateProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateProjectResponse:
		"""sylk - """

		return self.Projects_v1_stub.UpdateProject(request,metadata=metadata)

	
	def CreateProject_WithCall(self, request: SylkApi_v1.CreateProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateProjectResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.CreateProject.with_call(request,metadata=metadata)

	
	def CreateProject(self, request: SylkApi_v1.CreateProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateProjectResponse:
		"""sylk - """

		return self.Projects_v1_stub.CreateProject(request,metadata=metadata)

	
	def DeleteProject_WithCall(self, request: SylkApi_v1.DeleteProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteProjectResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.DeleteProject.with_call(request,metadata=metadata)

	
	def DeleteProject(self, request: SylkApi_v1.DeleteProjectRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteProjectResponse:
		"""sylk - """

		return self.Projects_v1_stub.DeleteProject(request,metadata=metadata)

	
	def ListProjects_WithCall(self, request: SylkApi_v1.ListProjectsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[SylkApi_v1.GetProjectResponse], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.ListProjects.with_call(request,metadata=metadata)

	
	def ListProjects(self, request: SylkApi_v1.ListProjectsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[SylkApi_v1.GetProjectResponse]:
		"""sylk - """

		return self.Projects_v1_stub.ListProjects(request,metadata=metadata)

	
	def UpdateUserStatusProject_WithCall(self, request: SylkApi_v1.UpdateUserStatusRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateUserStatusResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Projects_v1_stub.UpdateUserStatusProject.with_call(request,metadata=metadata)

	
	def UpdateUserStatusProject(self, request: SylkApi_v1.UpdateUserStatusRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateUserStatusResponse:
		"""sylk - """

		return self.Projects_v1_stub.UpdateUserStatusProject(request,metadata=metadata)


class EnumValues_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/EnumValues/v1/EnumValues.proto
	Service: EnumValues
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.EnumValues_v1_stub = EnumValues_v1_service.EnumValuesStub(self.channel)

	def GetEnumValue_WithCall(self, request: SylkApi_v1.GetEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v1_stub.GetEnumValue.with_call(request,metadata=metadata)

	
	def GetEnumValue(self, request: SylkApi_v1.GetEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v1_stub.GetEnumValue(request,metadata=metadata)

	
	def CreateEnumValue_WithCall(self, request: SylkApi_v1.CreateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v1_stub.CreateEnumValue.with_call(request,metadata=metadata)

	
	def CreateEnumValue(self, request: SylkApi_v1.CreateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v1_stub.CreateEnumValue(request,metadata=metadata)

	
	def DeleteEnumValue_WithCall(self, request: SylkApi_v1.DeleteEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v1_stub.DeleteEnumValue.with_call(request,metadata=metadata)

	
	def DeleteEnumValue(self, request: SylkApi_v1.DeleteEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v1_stub.DeleteEnumValue(request,metadata=metadata)

	
	def UpdateEnumValue_WithCall(self, request: SylkApi_v1.UpdateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v1_stub.UpdateEnumValue.with_call(request,metadata=metadata)

	
	def UpdateEnumValue(self, request: SylkApi_v1.UpdateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v1_stub.UpdateEnumValue(request,metadata=metadata)


class Services_v1:
	"""
	service class generated by sylk.build

	File: protos/sylk/Services/v1/Services.proto
	Service: Services
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Services_v1_stub = Services_v1_service.ServicesStub(self.channel)

	def CreateService_WithCall(self, request: SylkApi_v1.CreateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.CreateServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v1_stub.CreateService.with_call(request,metadata=metadata)

	
	def CreateService(self, request: SylkApi_v1.CreateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.CreateServiceResponse:
		"""sylk - """

		return self.Services_v1_stub.CreateService(request,metadata=metadata)

	
	def GetService_WithCall(self, request: SylkApi_v1.GetServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.GetServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v1_stub.GetService.with_call(request,metadata=metadata)

	
	def GetService(self, request: SylkApi_v1.GetServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.GetServiceResponse:
		"""sylk - """

		return self.Services_v1_stub.GetService(request,metadata=metadata)

	
	def UpdateService_WithCall(self, request: SylkApi_v1.UpdateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.UpdateServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v1_stub.UpdateService.with_call(request,metadata=metadata)

	
	def UpdateService(self, request: SylkApi_v1.UpdateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.UpdateServiceResponse:
		"""sylk - """

		return self.Services_v1_stub.UpdateService(request,metadata=metadata)

	
	def ListServices_WithCall(self, request: SylkApi_v1.ListServicesRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[SylkApi_v1.GetServiceResponse], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v1_stub.ListServices.with_call(request,metadata=metadata)

	
	def ListServices(self, request: SylkApi_v1.ListServicesRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[SylkApi_v1.GetServiceResponse]:
		"""sylk - """

		return self.Services_v1_stub.ListServices(request,metadata=metadata)

	
	def DeleteService_WithCall(self, request: SylkApi_v1.DeleteServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[SylkApi_v1.DeleteServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v1_stub.DeleteService.with_call(request,metadata=metadata)

	
	def DeleteService(self, request: SylkApi_v1.DeleteServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> SylkApi_v1.DeleteServiceResponse:
		"""sylk - """

		return self.Services_v1_stub.DeleteService(request,metadata=metadata)


class Folders_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Folders/v2/Folders.proto
	Service: Folders
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Folders_v2_stub = Folders_v2_service.FoldersStub(self.channel)

	def GetFolder_WithCall(self, request: Folders_v2.GetFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Folders_v2.Folder, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Folders_v2_stub.GetFolder.with_call(request,metadata=metadata)

	
	def GetFolder(self, request: Folders_v2.GetFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Folders_v2.Folder:
		"""sylk - """

		return self.Folders_v2_stub.GetFolder(request,metadata=metadata)

	
	def CreateFolder_WithCall(self, request: Folders_v2.CreateFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Folders_v2.Folder, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Folders_v2_stub.CreateFolder.with_call(request,metadata=metadata)

	
	def CreateFolder(self, request: Folders_v2.CreateFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Folders_v2.Folder:
		"""sylk - """

		return self.Folders_v2_stub.CreateFolder(request,metadata=metadata)

	
	def ListFolders_WithCall(self, request: Folders_v2.ListFoldersRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[Folders_v2.Folder], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Folders_v2_stub.ListFolders.with_call(request,metadata=metadata)

	
	def ListFolders(self, request: Folders_v2.ListFoldersRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[Folders_v2.Folder]:
		"""sylk - """

		return self.Folders_v2_stub.ListFolders(request,metadata=metadata)

	
	def DeleteFolder_WithCall(self, request: Folders_v2.DeleteFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Folders_v2_stub.DeleteFolder.with_call(request,metadata=metadata)

	
	def DeleteFolder(self, request: Folders_v2.DeleteFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Folders_v2_stub.DeleteFolder(request,metadata=metadata)

	
	def UpdateFolder_WithCall(self, request: Folders_v2.UpdateFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Folders_v2.Folder, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Folders_v2_stub.UpdateFolder.with_call(request,metadata=metadata)

	
	def UpdateFolder(self, request: Folders_v2.UpdateFolderRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Folders_v2.Folder:
		"""sylk - """

		return self.Folders_v2_stub.UpdateFolder(request,metadata=metadata)


class Packages_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Packages/v2/Packages.proto
	Service: Packages
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Packages_v2_stub = Packages_v2_service.PackagesStub(self.channel)

	def GetPackage_WithCall(self, request: Packages_v2.GetPackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Packages_v2.GetPackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v2_stub.GetPackage.with_call(request,metadata=metadata)

	
	def GetPackage(self, request: Packages_v2.GetPackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Packages_v2.GetPackageResponse:
		"""sylk - """

		return self.Packages_v2_stub.GetPackage(request,metadata=metadata)

	
	def CreatePackage_WithCall(self, request: Packages_v2.CreatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Packages_v2.CreatePackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v2_stub.CreatePackage.with_call(request,metadata=metadata)

	
	def CreatePackage(self, request: Packages_v2.CreatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Packages_v2.CreatePackageResponse:
		"""sylk - """

		return self.Packages_v2_stub.CreatePackage(request,metadata=metadata)

	
	def DeletePackage_WithCall(self, request: Packages_v2.DeletePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v2_stub.DeletePackage.with_call(request,metadata=metadata)

	
	def DeletePackage(self, request: Packages_v2.DeletePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Packages_v2_stub.DeletePackage(request,metadata=metadata)

	
	def UpdatePackage_WithCall(self, request: Packages_v2.UpdatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Packages_v2.UpdatePackageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Packages_v2_stub.UpdatePackage.with_call(request,metadata=metadata)

	
	def UpdatePackage(self, request: Packages_v2.UpdatePackageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Packages_v2.UpdatePackageResponse:
		"""sylk - """

		return self.Packages_v2_stub.UpdatePackage(request,metadata=metadata)


class Services_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Services/v2/Services.proto
	Service: Services
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Services_v2_stub = Services_v2_service.ServicesStub(self.channel)

	def GetService_WithCall(self, request: Services_v2.GetServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Services_v2.GetServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v2_stub.GetService.with_call(request,metadata=metadata)

	
	def GetService(self, request: Services_v2.GetServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Services_v2.GetServiceResponse:
		"""sylk - """

		return self.Services_v2_stub.GetService(request,metadata=metadata)

	
	def DeleteService_WithCall(self, request: Services_v2.DeleteServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v2_stub.DeleteService.with_call(request,metadata=metadata)

	
	def DeleteService(self, request: Services_v2.DeleteServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Services_v2_stub.DeleteService(request,metadata=metadata)

	
	def CreateService_WithCall(self, request: Services_v2.CreateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Services_v2.CreateServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v2_stub.CreateService.with_call(request,metadata=metadata)

	
	def CreateService(self, request: Services_v2.CreateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Services_v2.CreateServiceResponse:
		"""sylk - """

		return self.Services_v2_stub.CreateService(request,metadata=metadata)

	
	def UpdateService_WithCall(self, request: Services_v2.UpdateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Services_v2.UpdateServiceResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Services_v2_stub.UpdateService.with_call(request,metadata=metadata)

	
	def UpdateService(self, request: Services_v2.UpdateServiceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Services_v2.UpdateServiceResponse:
		"""sylk - """

		return self.Services_v2_stub.UpdateService(request,metadata=metadata)


class Messages_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Messages/v2/Messages.proto
	Service: Messages
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Messages_v2_stub = Messages_v2_service.MessagesStub(self.channel)

	def GetMessage_WithCall(self, request: Messages_v2.GetMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Messages_v2.GetMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v2_stub.GetMessage.with_call(request,metadata=metadata)

	
	def GetMessage(self, request: Messages_v2.GetMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Messages_v2.GetMessageResponse:
		"""sylk - """

		return self.Messages_v2_stub.GetMessage(request,metadata=metadata)

	
	def CreateMessage_WithCall(self, request: Messages_v2.CreateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Messages_v2.CreateMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v2_stub.CreateMessage.with_call(request,metadata=metadata)

	
	def CreateMessage(self, request: Messages_v2.CreateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Messages_v2.CreateMessageResponse:
		"""sylk - """

		return self.Messages_v2_stub.CreateMessage(request,metadata=metadata)

	
	def UpdateMessage_WithCall(self, request: Messages_v2.UpdateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Messages_v2.UpdateMessageResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v2_stub.UpdateMessage.with_call(request,metadata=metadata)

	
	def UpdateMessage(self, request: Messages_v2.UpdateMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Messages_v2.UpdateMessageResponse:
		"""sylk - """

		return self.Messages_v2_stub.UpdateMessage(request,metadata=metadata)

	
	def DeleteMessage_WithCall(self, request: Messages_v2.DeleteMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Messages_v2_stub.DeleteMessage.with_call(request,metadata=metadata)

	
	def DeleteMessage(self, request: Messages_v2.DeleteMessageRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Messages_v2_stub.DeleteMessage(request,metadata=metadata)


class Tags_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Tags/v2/Tags.proto
	Service: Tags
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Tags_v2_stub = Tags_v2_service.TagsStub(self.channel)

	def GetTag_WithCall(self, request: Tags_v2.GetTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Tags_v2.Tag, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.GetTag.with_call(request,metadata=metadata)

	
	def GetTag(self, request: Tags_v2.GetTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tags_v2.Tag:
		"""sylk - """

		return self.Tags_v2_stub.GetTag(request,metadata=metadata)

	
	def UpdateTag_WithCall(self, request: Tags_v2.UpdateTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Tags_v2.Tag, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.UpdateTag.with_call(request,metadata=metadata)

	
	def UpdateTag(self, request: Tags_v2.UpdateTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tags_v2.Tag:
		"""sylk - """

		return self.Tags_v2_stub.UpdateTag(request,metadata=metadata)

	
	def CreateTag_WithCall(self, request: Tags_v2.CreateTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Tags_v2.Tag, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.CreateTag.with_call(request,metadata=metadata)

	
	def CreateTag(self, request: Tags_v2.CreateTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tags_v2.Tag:
		"""sylk - """

		return self.Tags_v2_stub.CreateTag(request,metadata=metadata)

	
	def DeleteTag_WithCall(self, request: Tags_v2.DeleteTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.DeleteTag.with_call(request,metadata=metadata)

	
	def DeleteTag(self, request: Tags_v2.DeleteTagRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Tags_v2_stub.DeleteTag(request,metadata=metadata)

	
	def TagResource_WithCall(self, request: Tags_v2.TagResourceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.TagResource.with_call(request,metadata=metadata)

	
	def TagResource(self, request: Tags_v2.TagResourceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Tags_v2_stub.TagResource(request,metadata=metadata)

	
	def ListTags_WithCall(self, request: Tags_v2.ListTagsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[Tags_v2.Tag], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.ListTags.with_call(request,metadata=metadata)

	
	def ListTags(self, request: Tags_v2.ListTagsRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[Tags_v2.Tag]:
		"""sylk - """

		return self.Tags_v2_stub.ListTags(request,metadata=metadata)

	
	def UntagResource_WithCall(self, request: Tags_v2.UntagResourceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Tags_v2_stub.UntagResource.with_call(request,metadata=metadata)

	
	def UntagResource(self, request: Tags_v2.UntagResourceRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Tags_v2_stub.UntagResource(request,metadata=metadata)


class Enums_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Enums/v2/Enums.proto
	Service: Enums
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Enums_v2_stub = Enums_v2_service.EnumsStub(self.channel)

	def GetEnum_WithCall(self, request: Enums_v2.GetEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Enums_v2.GetEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v2_stub.GetEnum.with_call(request,metadata=metadata)

	
	def GetEnum(self, request: Enums_v2.GetEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Enums_v2.GetEnumResponse:
		"""sylk - """

		return self.Enums_v2_stub.GetEnum(request,metadata=metadata)

	
	def CreateEnum_WithCall(self, request: Enums_v2.CreateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Enums_v2.CreateEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v2_stub.CreateEnum.with_call(request,metadata=metadata)

	
	def CreateEnum(self, request: Enums_v2.CreateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Enums_v2.CreateEnumResponse:
		"""sylk - """

		return self.Enums_v2_stub.CreateEnum(request,metadata=metadata)

	
	def DeleteEnum_WithCall(self, request: Enums_v2.DeleteEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v2_stub.DeleteEnum.with_call(request,metadata=metadata)

	
	def DeleteEnum(self, request: Enums_v2.DeleteEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Enums_v2_stub.DeleteEnum(request,metadata=metadata)

	
	def UpdateEnum_WithCall(self, request: Enums_v2.UpdateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Enums_v2.UpdateEnumResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Enums_v2_stub.UpdateEnum.with_call(request,metadata=metadata)

	
	def UpdateEnum(self, request: Enums_v2.UpdateEnumRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Enums_v2.UpdateEnumResponse:
		"""sylk - """

		return self.Enums_v2_stub.UpdateEnum(request,metadata=metadata)


class EnumValues_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/EnumValues/v2/EnumValues.proto
	Service: EnumValues
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.EnumValues_v2_stub = EnumValues_v2_service.EnumValuesStub(self.channel)

	def GetEnumValue_WithCall(self, request: EnumValues_v2.GetEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[EnumValues_v2.GetEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v2_stub.GetEnumValue.with_call(request,metadata=metadata)

	
	def GetEnumValue(self, request: EnumValues_v2.GetEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> EnumValues_v2.GetEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v2_stub.GetEnumValue(request,metadata=metadata)

	
	def CreateEnumValue_WithCall(self, request: EnumValues_v2.CreateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[EnumValues_v2.CreateEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v2_stub.CreateEnumValue.with_call(request,metadata=metadata)

	
	def CreateEnumValue(self, request: EnumValues_v2.CreateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> EnumValues_v2.CreateEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v2_stub.CreateEnumValue(request,metadata=metadata)

	
	def UpdateEnumValue_WithCall(self, request: EnumValues_v2.UpdateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[EnumValues_v2.UpdateEnumValueResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v2_stub.UpdateEnumValue.with_call(request,metadata=metadata)

	
	def UpdateEnumValue(self, request: EnumValues_v2.UpdateEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> EnumValues_v2.UpdateEnumValueResponse:
		"""sylk - """

		return self.EnumValues_v2_stub.UpdateEnumValue(request,metadata=metadata)

	
	def DeleteEnumValue_WithCall(self, request: EnumValues_v2.DeleteEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.EnumValues_v2_stub.DeleteEnumValue.with_call(request,metadata=metadata)

	
	def DeleteEnumValue(self, request: EnumValues_v2.DeleteEnumValueRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.EnumValues_v2_stub.DeleteEnumValue(request,metadata=metadata)


class Methods_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Methods/v2/Methods.proto
	Service: Methods
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Methods_v2_stub = Methods_v2_service.MethodsStub(self.channel)

	def GetMethod_WithCall(self, request: Methods_v2.GetMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Methods_v2.GetMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v2_stub.GetMethod.with_call(request,metadata=metadata)

	
	def GetMethod(self, request: Methods_v2.GetMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Methods_v2.GetMethodResponse:
		"""sylk - """

		return self.Methods_v2_stub.GetMethod(request,metadata=metadata)

	
	def CreateMethod_WithCall(self, request: Methods_v2.CreateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Methods_v2.CreateMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v2_stub.CreateMethod.with_call(request,metadata=metadata)

	
	def CreateMethod(self, request: Methods_v2.CreateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Methods_v2.CreateMethodResponse:
		"""sylk - """

		return self.Methods_v2_stub.CreateMethod(request,metadata=metadata)

	
	def UpdateMethod_WithCall(self, request: Methods_v2.UpdateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Methods_v2.UpdateMethodResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v2_stub.UpdateMethod.with_call(request,metadata=metadata)

	
	def UpdateMethod(self, request: Methods_v2.UpdateMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Methods_v2.UpdateMethodResponse:
		"""sylk - """

		return self.Methods_v2_stub.UpdateMethod(request,metadata=metadata)

	
	def DeleteMethod_WithCall(self, request: Methods_v2.DeleteMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Methods_v2_stub.DeleteMethod.with_call(request,metadata=metadata)

	
	def DeleteMethod(self, request: Methods_v2.DeleteMethodRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Methods_v2_stub.DeleteMethod(request,metadata=metadata)


class Fields_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Fields/v2/Fields.proto
	Service: Fields
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Fields_v2_stub = Fields_v2_service.FieldsStub(self.channel)

	def GetField_WithCall(self, request: Fields_v2.GetFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Fields_v2.GetFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v2_stub.GetField.with_call(request,metadata=metadata)

	
	def GetField(self, request: Fields_v2.GetFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Fields_v2.GetFieldResponse:
		"""sylk - """

		return self.Fields_v2_stub.GetField(request,metadata=metadata)

	
	def CreateField_WithCall(self, request: Fields_v2.CreateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Fields_v2.CreateFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v2_stub.CreateField.with_call(request,metadata=metadata)

	
	def CreateField(self, request: Fields_v2.CreateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Fields_v2.CreateFieldResponse:
		"""sylk - """

		return self.Fields_v2_stub.CreateField(request,metadata=metadata)

	
	def UpdateField_WithCall(self, request: Fields_v2.UpdateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Fields_v2.UpdateFieldResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v2_stub.UpdateField.with_call(request,metadata=metadata)

	
	def UpdateField(self, request: Fields_v2.UpdateFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Fields_v2.UpdateFieldResponse:
		"""sylk - """

		return self.Fields_v2_stub.UpdateField(request,metadata=metadata)

	
	def DeleteField_WithCall(self, request: Fields_v2.DeleteFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[empty_pb2.Empty, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Fields_v2_stub.DeleteField.with_call(request,metadata=metadata)

	
	def DeleteField(self, request: Fields_v2.DeleteFieldRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> empty_pb2.Empty:
		"""sylk - """

		return self.Fields_v2_stub.DeleteField(request,metadata=metadata)


class Integrations_v2:
	"""
	service class generated by sylk.build

	File: protos/sylk/Integrations/v2/Integrations.proto
	Service: Integrations
	Version: v2
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.Integrations_v2_stub = Integrations_v2_service.IntegrationsStub(self.channel)

	def GetIntegration_WithCall(self, request: Integrations_v2.GetIntegrationRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Integrations_v2.GetIntegrationResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.Integrations_v2_stub.GetIntegration.with_call(request,metadata=metadata)

	
	def GetIntegration(self, request: Integrations_v2.GetIntegrationRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Integrations_v2.GetIntegrationResponse:
		"""sylk - """

		return self.Integrations_v2_stub.GetIntegration(request,metadata=metadata)