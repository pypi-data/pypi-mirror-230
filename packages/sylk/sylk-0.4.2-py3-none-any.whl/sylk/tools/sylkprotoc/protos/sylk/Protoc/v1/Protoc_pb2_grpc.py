# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from sylk.tools.sylkprotoc.protos.sylk.API.v1 import API_pb2 as sylk_dot_API_dot_v1_dot_API__pb2


class ProtocStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CodeGenerate = channel.stream_unary(
                '/Protoc/CodeGenerate',
                request_serializer=sylk_dot_API_dot_v1_dot_API__pb2.GenerateFilesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Compile = channel.unary_stream(
                '/Protoc/Compile',
                request_serializer=sylk_dot_API_dot_v1_dot_API__pb2.CompileRequest.SerializeToString,
                response_deserializer=sylk_dot_API_dot_v1_dot_API__pb2.File.FromString,
                )


class ProtocServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CodeGenerate(self, request_iterator, context):
        """[sylk] - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compile(self, request, context):
        """[sylk] - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProtocServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CodeGenerate': grpc.stream_unary_rpc_method_handler(
                    servicer.CodeGenerate,
                    request_deserializer=sylk_dot_API_dot_v1_dot_API__pb2.GenerateFilesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Compile': grpc.unary_stream_rpc_method_handler(
                    servicer.Compile,
                    request_deserializer=sylk_dot_API_dot_v1_dot_API__pb2.CompileRequest.FromString,
                    response_serializer=sylk_dot_API_dot_v1_dot_API__pb2.File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Protoc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Protoc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CodeGenerate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Protoc/CodeGenerate',
            sylk_dot_API_dot_v1_dot_API__pb2.GenerateFilesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Protoc/Compile',
            sylk_dot_API_dot_v1_dot_API__pb2.CompileRequest.SerializeToString,
            sylk_dot_API_dot_v1_dot_API__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
