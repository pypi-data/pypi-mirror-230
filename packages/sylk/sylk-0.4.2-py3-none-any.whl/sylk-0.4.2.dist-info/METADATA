Metadata-Version: 2.1
Name: sylk
Version: 0.4.2
Summary: Sylk CLI, Build and Manage your Protocol Buffers.
Author-email: Sylk Developers <contact@sylk.build>
License: Copyright (c) 2023 sylk.build
        
        Permission is hereby granted, free of charge, to any person obtaining
        a copy of this software and associated documentation files (the
        "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish,
        distribute, sublicense, and/or sell copies of the Software, and to
        permit persons to whom the Software is furnished to do so, subject to
        the following conditions:
        
        The above copyright notice and this permission notice shall be
        included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Project-URL: repository, https://github.com/sylk-build/sylk
Project-URL: homepage, https://www.sylk.build/
Project-URL: documentation, https://docs.sylk.build
Keywords: grpc,micro-services,cli,protobuf,framework
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pluggy <1.0,>=0.3
Requires-Dist: inquirer
Requires-Dist: prettytable
Requires-Dist: protobuf <=4.23.2
Requires-Dist: grpcio ==1.54.2
Requires-Dist: grpcio-tools ==1.54.2
Provides-Extra: build
Requires-Dist: build ; extra == 'build'
Requires-Dist: twine ; extra == 'build'
Provides-Extra: dev
Requires-Dist: bumpver ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: sylk-docs ; extra == 'docs'

#Sylk build CLI

[<img height="34" alt="Sylk Logo" src="https://s3.eu-central-1.amazonaws.com/assets.sylk.build/logo/sylk-logo-full.png">](https://sylk.build)      [<img height="16" alt="Sylk Downloads" src="https://static.pepy.tech/personalized-badge/sylk?period=total&units=international_system&left_color=brightgreen&right_color=grey&left_text=Downloads">](https://pepy.tech/project/sylk)    [<img height="16" alt="Python 3.7+" src="https://img.shields.io/badge/python-3.7+-blue.svg">](https://www.python.org/downloads/release/python-370/)


[Sylk.build](https://sylk.build) is your go-to toolkit for accelerating Protocol Buffers (protobuf) development across multiple languages. with Sylk.build, you can quickly develop, deploy, and scale your data structures, irrespective of the programming language you're using.

## Elevate Your Protobuf Development Experience

Welcome to [sylk.build](https://www.sylk.build), the ultimate toolkit for working with Protocol Buffers (`protobuf`). We're here to simplify your serialization and data interchange tasks using cutting-edge technology stacks like `HTTP2` and `gRPC`.

### Why Choose Sylk.build?

1. **Protobuf-Centric**: Designed to enhance your experience in working with Protocol Buffers for any project.
2. **Multi-Language Support**: Use Python, TypeScript, Go, or NodeJS for your protobuf implementations. More languages are in the pipeline!
3. **Flexibility and Efficiency**: Thanks to protobuf, enjoy high-speed, efficient data serialization and deserialization.

| **Language**  | **Server** | **Client** | **Status**  |
|---------------|------------|------------|-------------|
| Python        | **V**      | **V**      | Stable      |
| TypeScript    | **V**      | **V**      | Stable      |
| Go            | **V**      | **V**      | Stable      |
| webpack       | --         | **V**      | Stable      |
| Java          | **X**      | **X**      | Planned     |
| C#.NET        | **X**      | **X**      | Planned     |
| Rust          | **X**      | **X**      | Planned     |

ðŸ‘‰ **Learn More**: Dive deeper into the capabilities of sylk.build through our [Official Documentation](https://www.docs.sylk.build).

# Installation
Install from pip
```sh
pip install sylk
```
# Features:

- __CLI__ Well structerd CLI wrapper to create, edit, run and debug a RPC call to gRPC services
- __Generated Code__ Auto-Generated code classes for Services implemantations and client stubs
    * [Python](./docs/source/languages/python.md)
    * [Typescript](./docs/source/languages/typescript.md)
    * [Go](./docs/source/languages/go.md)
- __Plugins__ Highly pluggable API allow us to create and publish "Extensions" without breaking the code:
    * Readme generator
    * Languages Builder - (Python, Typescript & Go)
    * Proto Builder
    * Dockerize (In-development)
    * Migrate gRPC services to sylk.build project
- __Templating__ As a sylk.build project grows you can template it and share it to your peers for remote work (Branching) or as a 'Built-in' template to be used by other co-workers
- __Unified Extensions__ We have been working on unification process of `Protobuf` Extensions (Calles Custom Options) which will allow us in the future to release more pluggable features directly into your sylk.build workspace

__Tutorials:__
- [Quick Start](https://www.sylk.build/docs/quick-start)

## Quick Start 

> __Note__ Please refer to [CLI docs](https://docs.sylk.build/) for any question you got, also make sute to use the CLI help `sylk --help` should give you an additional information on every command you may possibly run

To create a [new sylk.build](https://docs.sylk.build/cli/commands#newn) project run the following command:
```sh
sylk new <YourProject>
```
> __Note__ you can create a new project based on template to get started quickly
Sample Python server (Clients are available both in TS + PY)
```sh
sylk n <YourProject> --template @sylk/TodoAppPy
```

Then you will need to navigate into your project

> __Note__ if you didnt specified the `--path` argument when creating new project by default it will create a project under your current directory

```sh
cd <YourProject>
```

After you are under the new project directory you can go ahead and [create sylk.build resources](./docs/source/commands/commands.md#sylk-generate) with those simple commands:

> __Note__ Please note that every sub-command of `generate` and `new` can be shortend with the first letter e.g : `sylk g p` is equivalent to `sylk generate package`

```sh
# Generate new package to hold messages
sylk generate package foo.bar.v1
# Generate new service to hold RPC's (Methods)
sylk generate service foo.bar.v1.SomeService
# Generate message under specified package
sylk generate message foo.bar.v1.SomeMessage
# Generate RPC (Method) under specified service
# Same as running `sylk g r foo/bar/v1/SomeService/GetSomething`
sylk generate rpc foo.bar.v1.SomeService.GetSomething
```
<!-- > __Note__ Make sure before creating new RPC on service that you have imported at least 1 package to be used by the service. for more information visit -> [Package Docs](https://docs.sylk.build/cli/resources/package) -->

> __Note__ Passing full resource paths can be used with __'/'__ to resamble the filesystem paths or __'.'__ seperators as native protobuf syntax, both act the same.

> __Note__ You can create resource with thier full paths or just with passing the resource name itself, the CLI prompter will ask you which parent you want to attach the new resource.

After you had generated your resources for the project and modified the code (See the docs for more explanation on how to develop your project and make changes [Sample Project](https://docs.sylk.build/cli/quick-start)).

You can now [build your project](https://docs.sylk.build/cli/commands#build) and [run your server](https://docs.sylk.build/cli/commands#run) with those simple commands:

```sh
# First build your project
sylk build
# Then run the server
sylk run 
```

> __Note__ you can auto-build your resources if applicable straight when you are generating them with adding `--build` argument to `sylk generate` comands.

You can use now your client code that has been autogenerated in your specified language(s) on creating the project.

> __Pro-Tip:__ you can always make your commands even shorter with replacing `sylk` with `sylk`

# CLI Usage

Get to know the commands supported by sylk.build CLI and start to use their powers !
__All listed commands can be found here:__
[sylk.build CLI API](https://docs.sylk.build/cli/commands)

The sylk CLI module is essantially a wrapper to the `Architect API` which is just to construct a well defined resource metadata which later on can be used by the `Builder API` to build all resources files (Code files & .proto files)

> __Note__ Each sylk.build CLI command can be called with the abbreviated `sylk`

> __Note__ The CLI has verbose logging system that can be changed accoriding to your needs. we do recommand to keep it to ERROR as default to not overload you with multiple lines for each command - to change the default behaviour run your commands with `sylk --loglevel DEBUG <sub-command>`

## Contribute
Your contributions are always welcome! For guidelines on how to contribute, please check our development guidelines.

## Two Modes of Interaction
- **CLI**: Kick-start your protobuf projects with our easy-to-use CLI.
- **Python API**: Ideal for advanced customization and control over your protobuf files.

## Additional Resources
- [Awesome gRPC](https://github.com/grpc-ecosystem/awesome-grpc)
- [Google's API Design Guide](https://cloud.google.com/apis/design/)

---
__Created with love by Sylk team. 2023 Â© Sylk Tchnologies, Inc.__
