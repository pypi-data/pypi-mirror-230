# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_utils.ipynb.

# %% auto 0
__all__ = ['key1st', 'idx1st', 'arg1st', 'getattrs', 'safemake', 'typenone', 'tryattrs', 'safegetspec', 'safegetsig',
           'dropna_args', 'dropcls_args', 'filterargvals', 'funkws', 'kwskws', 'kwsopt', 'kwsadd', 'kwsobj',
           'unpack_optout']

# %% ../nbs/02_utils.ipynb 4
import inspect
from typing import Type, Union, Callable
from atyp import AnyQ, IntQ, BoolQ, CallQ, DictQ, CallQ, FlagFunc, FlagFuncQ

# %% ../nbs/02_utils.ipynb 5
from .types import (ArgsTuple, ispself, ispcls, isargvalnil,)
from idfunc import isany

# %% ../nbs/02_utils.ipynb 8
def key1st(dct: dict, keys: list, flag: FlagFunc = isany, default: AnyQ = None, fallback: BoolQ = True,) -> AnyQ:
    gen = (dct[key] for key in keys if key in dct and flag(dct[key]))
    dflt = default or (dct.get(keys[-1], None) if (keys and fallback) else None)
    return next(gen, dflt)

# %% ../nbs/02_utils.ipynb 9
def idx1st(*args, flag: FlagFunc = isany, fallback: BoolQ = True, default: AnyQ = None) -> IntQ:
    gen = (i for i in range(len(args)) if flag(args[i]))
    dflt = default or (len(args) - 1 if (args and fallback) else None)
    return next(gen, dflt)

# %% ../nbs/02_utils.ipynb 10
def arg1st(*args, flag: FlagFunc = isany, fallback: BoolQ = True, default: AnyQ = None) -> int:
    '''Returns the first argument that satisfies the flag function.'''
    gen = (arg for arg in args if flag(arg))
    dflt = default or (args[-1] if (args and fallback) else None)
    return next(gen, dflt)

# %% ../nbs/02_utils.ipynb 12
def getattrs(obj, attrs: Union[list, dict] = None,  avals: Union[list, dict] = None) -> dict:
    '''
    Get attribute values of an object.

    Parameters
    ----------
    obj : Any
        The object whose attributes you want to get.
    attrs : list | dict, optional
        A list of attribute names or a dictionary of {attr: value}.
    avals : list | dict, optional
        Default values to use for attributes, only used when `attrs` is a list.

    Returns
    -------
    attrs : dict
        A dictionary containing {attr: value} from obj.
    '''
    adict = attrs if isinstance(attrs, dict) else {}

    if not adict:
        akeys = list(attrs) if isinstance(attrs, (list, tuple, dict)) else []
        avals = [None] * len(akeys) if avals is None else avals
        if isinstance(avals, dict): avals = avals.values()
        adict = {k: avals[i] for i, k in enumerate(akeys) if i < len(avals)}

    return {k: getattr(obj, k, v) for k, v in adict.items()}

# %% ../nbs/02_utils.ipynb 14
def safemake(cls, *args, **kwargs) -> AnyQ:
    '''
    Safely create an object from a class.

    Parameters
    ----------
    cls : Type
        The class to instantiate.
    args : tuple
        Positional arguments for the class constructor.
    kwargs : dict
        Keyword arguments for the class constructor.

    Returns
    -------
    AnyQ
        The instantiated object or None if an exception occurs.
    '''
    try: return cls(*args, **kwargs)
    except Exception as e: return None

def typenone(obj: AnyQ, cls: Type) -> AnyQ:
    '''Return `obj` if it `cls` or `None` otherwise try `cls()` else `None`'''    
    if isinstance(obj, (cls, type(None))): return obj
    return safemake(cls)

# %% ../nbs/02_utils.ipynb 16
def tryattrs(
    call: Callable,
    func: Callable,
    attrs: list = ['__call__', '__new__', '__init__', ], 
    default: AnyQ = None,
    *args, **kwargs
) -> AnyQ:
    spec, errs = None, []
    
    try:
        spec = func(call)
    except Exception as err:
        errs.append(err)    
    if spec is not None: 
        return spec
    
    for attr in attrs:
        try: 
            spec = func(getattr(call, attr, None))
        except Exception as err: 
            errs.append(err)    
        if spec is not None: 
            return spec
    return default

# %% ../nbs/02_utils.ipynb 18
def safegetspec(func: Callable) -> inspect.FullArgSpec:
    default = inspect.FullArgSpec([], None, None, None, [], None, dict())
    return tryattrs(func, inspect.getfullargspec, attrs=[], default=default)

def safegetsig(func: Callable) -> inspect.FullArgSpec:
    default = inspect.Signature()
    return tryattrs(func, inspect.signature, attrs=[], default=default)

# %% ../nbs/02_utils.ipynb 21
def dropna_args(**kwargs) -> dict:
    '''Drop `KW_ONLY` and `Parameter.empty` values from `args`'''
    return {k: v for k, v in kwargs.items() if not isargvalnil(v)} 

def dropcls_args(**kwargs) -> dict:
    '''Drop `cls` and `self` from `args`'''
    return {k: v for k, v in kwargs.items() if not (ispcls(v) or ispself(v))}

def filterargvals(__dropna: bool = True, __dropcls: bool = True, **kwargs) -> ArgsTuple:
    adict = kwargs.copy()
    if __dropna:
        adict = dropna_args(**adict)
    if __dropcls:
        adict = dropcls_args(**adict)
    return tuple(adict.items())

# %% ../nbs/02_utils.ipynb 23
def funkws(func: CallQ = None, **kwargs) -> dict:
    '''Filter keyword arguments to function signature'''
    if not func: return kwargs    
    sig = inspect.signature(func)
    return {k: v for k, v in kwargs.items() if k in sig.parameters}

def kwskws(kws: DictQ = None, **kwargs) -> dict:    
    '''merge kwargs into kws if kws is not None otherwise return kwargs'''
    if not kws: return kwargs
    return {**kws, **{k: v for k, v in kwargs.items() if k in kws}}

def kwsopt(kws: DictQ = None, **kwargs) -> dict:
    '''optional overrides for `kws`'''
    return kwskws(kws, **kwargs)

def kwsadd(kws: DictQ = None, **kwargs) -> dict:    
    '''add missing kwargs to `kws`'''
    if not kws: return kwargs
    return {**kws, **{k: v for k, v in kwargs.items() if k not in kws or kws[k] is None}}

def kwsobj(obj: Type, attr: str, **kwargs) -> AnyQ:
    '''Get attribute from `kwargs` or `obj`'''
    if not obj: return None
    return kwargs.get(attr, getattr(obj, attr, None))

# %% ../nbs/02_utils.ipynb 25
def unpack_optout(output: tuple, expected: int = 1) -> tuple:
    '''Unpacks the output of a function with any number of optional return values.'''
    res = output if isinstance(output, tuple) else (output,)
    try:
        res, *opt = res
        if len(opt) < expected:
            opt += [None] * (expected - len(opt))        
        return res, *tuple(opt)
    except TypeError:
        return res, *tuple([None] * max((expected), 1))
    return output
