# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/14_dyn.ipynb.

# %% auto 0
__all__ = ['getattrname', 'setattrname', 'getdattr', 'setdattr', 'setattrval', 'update_dattr', 'setkwsdattr']

# %% ../nbs/14_dyn.ipynb 4
from .utils import arg1st
from atyp import AnyQ, StrQ
from typing import Any
from .utils import insclsattr

# %% ../nbs/14_dyn.ipynb 5
def getattrname(obj, dattr: str) -> AnyQ:
    '''Get the dynamic attribute's attribute name
        
    Parameters
    ----------
    dattr : str
        The name of the dynamic attribute.
        
    Returns
    -------
    name : str, None
        The name of the dynamic attribute.
    
    Notes
    -----
    This is a helper function for `getdattr` and `getdattrval`. 
        It is just a wrapper for `getattr(obj, dattr, None)`.    
    '''    
    return getattr(obj, dattr, None)    

def setattrname(obj, dattr: str, value: StrQ = None, **kwargs) -> AnyQ:
    '''Update the attribute name corresponding to a given dynamic attribute.
    i.e. `setattr(getattr(self, dattr), kwargs.get(dattr, getattr(self, dattr)))`

    Parameters
    ----------
    obj : Any
        The object whose attribute you want to update.

    dattr : str
        Dynamic attribute key.

    value : str, optional
        The new attribute name.

    **kwargs : dict
        Keyword arguments.

    Returns
    -------
    None
    '''
    cur = getattrname(obj, dattr)
    kws = kwargs.get(dattr, None)
    return setattr(obj, dattr, arg1st(value, kws, cur))    

def getdattr(obj, dattr: str, default: AnyQ = None) -> AnyQ:
    '''Fetch the value of a dynamic attribute based on its name.
    i.e. `getattr(self, getattr(self, dattr), default)`

    Parameters
    ----------
    dattr : str
        The dynamic attribute's name.

    default : AnyQ
        The default value to return if the attribute does not exist.

    Returns
    -------
    AnyQ
        The value of the attribute named by the value of the attribute `dattr`.

    Examples
    --------
    >>> # These are equivalent
    >>> getdattr(obj, dattr, default)
    >>>
    >>> # Get the value of the attr named by the value of the attribute `dattr`
    >>> try:
    >>>     return getattr(obj, getattr(obj, attr, None), default)
    >>> except TypeError:
    >>>     return default

    '''
    attr = getattrname(obj, dattr, None) # get the dyanmic attribute's attribute name
    if attr is None: return default      # if the attr name doesn't exist return default
    return getattr(obj, attr, None)      # get the dynamic attribute's value

def setdattr(obj, dattr: str, value: AnyQ = None):
    '''Set the value of a dynamic attribute based on its name.
    i.e. `setattr(self, getattr(self, dattr), default)`

    Parameters
    ----------
    dattr : str
        The dynamic attribute's name.

    value : AnyQ
        The value to set the attribute to.
    '''
    aname = getattrname(dattr) # get the dyanmic attribute's attribute name
    if aname is None: return   # if the attr name doesn't exist return default
    setattr(obj, aname, value) # get the dynamic attribute's value


def setattrval(obj, aname: str, value: StrQ = None, **kwargs): 
    '''Update the value of a given dynamic attribute.

    Parameters
    ----------
    obj : Any
        The object whose attribute you want to update.

    aname : str
        Dynamic attribute name.

    value : str, optional
        The new attribute name.

    **kwargs : dict
        Keyword arguments.
    '''       
    if aname is None: return        
    cur = getattr(obj, aname, None)
    kws = kwargs.get(aname, None)
    setattr(obj, aname, arg1st(value, kws, cur))

def update_dattr(obj, dattr: str, **kwargs):
    '''Update both the attribute name and its value for a given dynamic attribute.

    Parameters
    ----------
    dattr : str
        Dynamic attribute key.

    **kwargs : dict
        Keyword arguments, which should contain the dynamic attribute key and a value.
        i.e. `getattr(self, dattr)` should be in kwargs.
    '''
    setattrname(obj, dattr, **kwargs)
    aname = getattrname(dattr)
    setattrval(aname, **kwargs)

# %% ../nbs/14_dyn.ipynb 6
def setkwsdattr(obj: Any, dattr: str, **kwargs) -> dict:
    '''Set default values for `kws` based on the name and value of a given dynamic attribute.'''
    attr = insclsattr(obj, dattr, None)
    kwargs.setdefault(dattr, attr)
    if attr is None: return kwargs

    # kwargs = setkwsattr(obj, attr, None, **kwargs)
    aval = insclsattr(obj, attr, None)
    kwargs.setdefault(attr, aval)
    return kwargs
