# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_types.ipynb.

# %% auto 0
__all__ = ['AttrLvl', 'AttrSpec', 'ArgsTuple', 'AttrSrcs', 'AttrSrcsQ', 'AttrPrefQ', 'isp', 'iscls', 'isint', 'isstr', 'islist',
           'isdict', 'istuple', 'islistordict', 'isiter', 'isset', 'isallstr', 'isdundstr', 'isself', 'ispself',
           'ispcls', 'isempty', 'ispempty', 'iskwotype', 'iskwonly', 'ispkwonly', 'isargvalnil', 'isdefarg']

# %% ../nbs/00_types.ipynb 4
import inspect

from inspect import Parameter
from dataclasses import _KW_ONLY_TYPE
from atyp import AnyQ
from typing import Any, Set, Type, List, Dict, Tuple, Union, Literal, Optional, TypeAlias, TypeGuard, Iterable

# %% ../nbs/00_types.ipynb 6
AttrLvl: TypeAlias = Union[int, Type]
AttrSpec: TypeAlias = Union[List[str], Tuple[str], Dict[str, AnyQ]]
ArgsTuple: TypeAlias = Tuple[Tuple[str, Any], ...]

# %% ../nbs/00_types.ipynb 7
AttrSrcs: TypeAlias = Tuple['AttrSrc', ...]
AttrSrcsQ: TypeAlias = Optional[AttrSrcs]
AttrPrefQ: TypeAlias = Optional[Union['AttrPref', AttrSrcs]]

# %% ../nbs/00_types.ipynb 10
def isp(p: Parameter) -> TypeGuard[Parameter]:
    '''
    Check if parameter is of type `Parameter`.

    Parameters
    ----------
    p : Parameter
        The parameter to check.

    Returns
    -------
    TypeGuard[Parameter]
        True if `p` is a `Parameter`, False otherwise.
    '''
    return isinstance(p, Parameter)

def iscls(obj: Type) -> TypeGuard[Type]:
    '''
    Check if object is a class. An alias for `inspect.isclass`.

    Parameters
    ----------
    obj : Type
        The object to check.

    Returns
    -------
    TypeGuard[Type]
        True if `obj` is a class, False otherwise.
    '''
    return inspect.isclass(obj)

def isint(x) -> TypeGuard[int]:
    '''
    Check if `x` is an `int`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[int]
        True if `x` is an `int`, False otherwise.
    '''
    return isinstance(x, int)

def isstr(x) -> TypeGuard[str]:
    '''
    Check if `x` is an `str`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[str]
        True if `x` is an `str`, False otherwise.
    '''
    return isinstance(x, str)

def islist(x) -> TypeGuard[list]:
    '''
    Check if `x` is a `list`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[list]
        True if `x` is a `list`, False otherwise.
    '''
    return isinstance(x, list)

def isdict(x) -> TypeGuard[dict]:
    '''
    Check if `x` is a `dict`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[dict]
        True if `x` is a `dict`, False otherwise.
    '''
    return isinstance(x, dict)

def istuple(x) -> TypeGuard[tuple]:
    '''
    Check if `x` is a `tuple`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[tuple]
        True if `x` is a `tuple`, False otherwise.
    '''
    return isinstance(x, tuple)

def islistordict(x) -> TypeGuard[Union[list, dict]]:
    '''
    Check if `x` is a `list` or `dict`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[Union[list, dict]
        True if `x` is a `list` or `dict`, False otherwise.
    '''
    return islist(x) or isdict(x)


def isiter(x) -> TypeGuard[Iterable]:
    '''
    Check if `x` is an `Iterable`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[Iterable]
        True if `x` is an `Iterable`, False otherwise.
    '''
    return isinstance(x, Iterable)

def isset(x) -> TypeGuard[Set]:
    '''
    Check if `x` is an `Set`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[Set]
        True if `x` is an `Set`, False otherwise.
    '''
    return isinstance(x, Set)

# %% ../nbs/00_types.ipynb 11
def isallstr(x: Any) -> TypeGuard[Iterable[str]]:
    '''
    Check if `x` is an `Iterable[str]`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[dict]
        True if `x` is an `Iterable[str]`, False otherwise.
    '''
    return isiter(x) and all(isstr(e) for e in x)

# %% ../nbs/00_types.ipynb 13
def isdundstr(s: str) -> TypeGuard[str]:
    return isstr(s) and s.startswith('__') and s.endswith('__') and len(s) > 4

# %% ../nbs/00_types.ipynb 15
def isself(x: Any) -> TypeGuard[Literal['self']]:
    '''
    Check if `x` is `"self"`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[Literal['self']]
        True if `x` is `"self"`, False otherwise.
    '''
    return x == 'self'


def ispself(p: Parameter) -> TypeGuard[Parameter]:
    '''
    Check if p is "self".

    Parameters
    ----------
    p : Parameter
        The parameter to check.

    Returns
    -------
    TypeGuard[Parameter.empty]
        True if `p` is "self", False otherwise.
    '''
    return isp(p) and isself(p.name)


def ispcls(p: Parameter) -> TypeGuard[Parameter]:
    '''
    Check if p is "cls".

    Parameters
    ----------
    p : Parameter
        The parameter to check.

    Returns
    -------
    TypeGuard[Parameter.empty]
        True if `p` is "cls", False otherwise.
    '''
    return isp(p) and p.name == 'cls'

# %% ../nbs/00_types.ipynb 17
def isempty(x: Any) -> TypeGuard[Parameter.empty]:
    '''
    Check if parameter is `Parameter.empty`.

    Parameters
    ----------
    p : Parameter
        The parameter to check.

    Returns
    -------
    TypeGuard[Parameter.empty]
        True if `p` is `Parameter.empty`, False otherwise.
    '''
    return x == Parameter.empty


def ispempty(p: Parameter) -> TypeGuard[Parameter.empty]:
    '''
    Check if p is of type `Parameter.empty`.

    Parameters
    ----------
    p : Parameter
        The parameter to check.

    Returns
    -------
    TypeGuard[Parameter.empty]
        True if `p` is `Parameter.empty`, False otherwise.
    '''
    return isp(p) and isempty(p.default)

# %% ../nbs/00_types.ipynb 19
def iskwotype(x: Any) -> TypeGuard[_KW_ONLY_TYPE]:
    '''
    Check if x is of type `dataclasses.KW_ONLY`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[dataclasses.KW_ONLY]
        True if `x` is `dataclasses.KW_ONLY`, False otherwise.
    '''
    return isinstance(x, _KW_ONLY_TYPE)

def iskwonly(x: Any) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''
    Check if x is of type `Parameter.KEYWORD_ONLY`.

    Parameters
    ----------
    x : Any
        The variable to check.

    Returns
    -------
    TypeGuard[Parameter.KEYWORD_ONLY]
        True if `x` is `Parameter.KEYWORD_ONLY`, False otherwise.
    '''
    return x == Parameter.KEYWORD_ONLY

def ispkwonly(p: Parameter) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''
    Check if p is of type `Parameter.KEYWORD_ONLY`.

    Parameters
    ----------
    p : Parameter
        The parameter to check.

    Returns
    -------
    TypeGuard[Parameter.KEYWORD_ONLY]
        True if `p` is `Parameter.KEYWORD_ONLY`, False otherwise.
    '''
    return isp(p) and iskwonly(p.kind)

# %% ../nbs/00_types.ipynb 21
def isargvalnil(v: Any) -> bool:
    '''Checks if `v` of an argument is `Parameter.empty`, `Parameter.KEYWORD_ONLY`, or `dataclasses.KW_ONLY`.'''
    return (iskwotype(v) or isempty(v) or iskwonly(v))

# %% ../nbs/00_types.ipynb 22
def isdefarg(p: Union[Any, Tuple[str, Any], Parameter]) -> bool:
    '''Checks if `p` is a default argument.'''
    if isp(p):
        return not isargvalnil(p.default)
    elif istuple(p) and len(p) == 2:
        arg, val = p
        return not isargvalnil(val)
    return not isargvalnil(p)    
