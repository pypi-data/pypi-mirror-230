[project]
name = "pyauthorizer"
readme = "README.md"
description = "A simple authorizer for python projects"
dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
    "Topic :: Scientific/Engineering",
]
authors = []
maintainers = []
keywords = ["license", "license-generator"]
license = { text = "Apache 2.0" }
requires-python = ">=3.7"
dependencies = ["click", "cryptography>=41.0.0"]

[project.urls]
"Documentation" = "https://github.com/msclock/pyauthorizer.git"
"Source" = "https://github.com/msclock/pyauthorizer.git"
"Tracker" = "https://github.com/msclock/pyauthorizer/issues"

[project.optional-dependencies]
test = ["pytest >= 5.2", "pytest-mock >= 3.8.2"]
dev = ["black >= 22.8", "build >= 0.8", "pip >= 21.1", "twine >= 4.0"]

[project.scripts]
pyauthorizer = "pyauthorizer.cli:commands"

[build-system]
requires = ["setuptools", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
namespaces = false

[tool.setuptools.package-data]
pyauthorizer = ["**/*"]

[tool.setuptools_scm]
write_to = "pyauthorizer/_version.py"

[tool.check-sdist]
sdist-only = ["pyauthorizer/_version.py"]

[tool.ruff]
select = [
    "E",
    "F",
    "W",      # flake8
    "B",      # flake8-bugbear
    "I",      # isort
    "N",      # pep8-naming
    "ARG",    # flake8-unused-arguments
    "C4",     # flake8-comprehensions
    "EM",     # flake8-errmsg
    "ICN",    # flake8-import-conventions
    "ISC",    # flake8-implicit-str-concat
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "RUF100", # Ruff-specific
    "SIM",    # flake8-simplify
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
]
ignore = [
    "PLR",     # Design related pylint
    "E501",    # Line too long (Black is enough)
    "PT011",   # Too broad with raises in pytest
    "PT004",   # Fixture that doesn't return needs underscore (no, it is fine)
    "SIM118",  # iter(x) is not always the same as iter(x.keys())
    "ARG001",  # Ignore unused arguments
    "PLW0603", # We're fine with global vars
]
target-version = "py37"
src = ["pyauthorizer"]
unfixable = ["T20"]
exclude = []
line-length = 120

[tool.black]
line-length = 120
target-version = ['py37', 'py38', 'py39', 'py310']
