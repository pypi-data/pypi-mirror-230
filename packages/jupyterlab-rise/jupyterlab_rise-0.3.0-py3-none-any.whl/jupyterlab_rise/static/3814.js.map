{"version":3,"file":"3814.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ModelDB } from '@jupyterlab/observables';\nimport * as models from '@jupyter/ydoc';\nimport { Signal } from '@lumino/signaling';\nconst globalModelDBMutex = models.createMutex();\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default selection style.\n     */\n    CodeEditor.defaultSelectionStyle = {\n        className: '',\n        displayName: '',\n        color: 'black'\n    };\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options) {\n            this._isDisposed = false;\n            this._mimeTypeChanged = new Signal(this);\n            this._sharedModelSwitched = new Signal(this);\n            options = options || {};\n            if (options.modelDB) {\n                this.modelDB = options.modelDB;\n            }\n            else {\n                this.modelDB = new ModelDB();\n            }\n            this.sharedModel = models.createStandaloneCell({\n                cell_type: this.type,\n                id: options.id\n            });\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            const value = this.modelDB.createString('value');\n            value.changed.connect(this._onModelDBValueChanged, this);\n            value.text = value.text || options.value || '';\n            const mimeType = this.modelDB.createValue('mimeType');\n            mimeType.changed.connect(this._onModelDBMimeTypeChanged, this);\n            mimeType.set(options.mimeType || 'text/plain');\n            this.modelDB.createMap('selections');\n        }\n        /**\n         * When we initialize a cell model, we create a standalone model that cannot be shared in a YNotebook.\n         * Call this function to re-initialize the local representation based on a fresh shared model (e.g. models.YFile or models.YCodeCell).\n         *\n         * @param sharedModel\n         * @param reinitialize Whether to reinitialize the shared model.\n         */\n        switchSharedModel(sharedModel, reinitialize) {\n            if (reinitialize) {\n                // update local modeldb\n                // @todo also change metadata\n                this.value.text = sharedModel.getSource();\n            }\n            this.sharedModel.changed.disconnect(this._onSharedModelChanged, this);\n            this.sharedModel.dispose();\n            // clone model retrieve a shared (not standalone) model\n            this.sharedModel = sharedModel;\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            this._sharedModelSwitched.emit(true);\n        }\n        /**\n         * We update the modeldb store when the shared model changes.\n         * To ensure that we don't run into infinite loops, we wrap this call in a \"mutex\".\n         * The \"mutex\" ensures that the wrapped code can only be executed by either the sharedModelChanged handler\n         * or the modelDB change handler.\n         */\n        _onSharedModelChanged(sender, change) {\n            globalModelDBMutex(() => {\n                if (change.sourceChange) {\n                    const value = this.modelDB.get('value');\n                    let currpos = 0;\n                    change.sourceChange.forEach(delta => {\n                        if (delta.insert != null) {\n                            value.insert(currpos, delta.insert);\n                            currpos += delta.insert.length;\n                        }\n                        else if (delta.delete != null) {\n                            value.remove(currpos, currpos + delta.delete);\n                        }\n                        else if (delta.retain != null) {\n                            currpos += delta.retain;\n                        }\n                    });\n                }\n            });\n        }\n        /**\n         * Handle a change to the modelDB value.\n         */\n        _onModelDBValueChanged(value, event) {\n            globalModelDBMutex(() => {\n                this.sharedModel.transact(() => {\n                    switch (event.type) {\n                        case 'insert':\n                            this.sharedModel.updateSource(event.start, event.start, event.value);\n                            break;\n                        case 'remove':\n                            this.sharedModel.updateSource(event.start, event.end);\n                            break;\n                        default:\n                            this.sharedModel.setSource(value.text);\n                            break;\n                    }\n                });\n            });\n        }\n        get type() {\n            return 'code';\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * A signal emitted when the shared model was switched.\n         */\n        get sharedModelSwitched() {\n            return this._sharedModelSwitched;\n        }\n        /**\n         * Get the value of the model.\n         */\n        get value() {\n            return this.modelDB.get('value');\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this.modelDB.get('selections');\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this.modelDB.getValue('mimeType');\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this.modelDB.setValue('mimeType', newValue);\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this.modelDB.dispose();\n            Signal.clearData(this);\n        }\n        _onModelDBMimeTypeChanged(mimeType, args) {\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: args.oldValue,\n                newValue: args.newValue\n            });\n        }\n    }\n    CodeEditor.Model = Model;\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeEditor.defaultConfig = {\n        autoClosingBrackets: false,\n        codeFolding: false,\n        cursorBlinkRate: 530,\n        fontFamily: null,\n        fontSize: null,\n        handlePaste: true,\n        insertSpaces: true,\n        lineHeight: null,\n        lineNumbers: false,\n        lineWrap: 'on',\n        matchBrackets: true,\n        readOnly: false,\n        tabSize: 4,\n        rulers: [],\n        showTrailingSpace: false,\n        wordWrapColumn: 80\n    };\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: this._trans.__('Revert changes to data')\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: this._trans.__('Commit changes to data'),\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model();\n        model.value.text = this._trans.__('No data!');\n        model.mimeType = 'application/json';\n        model.value.changed.connect(this._onValueChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({ host: this.editorHostNode, model });\n        this.editor.setOption('readOnly', true);\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Dispose of the editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        // The model does not dispose the shared model by default\n        this.model.sharedModel.dispose();\n        this.model.dispose();\n        this.editor.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `after-show` messages for the widget.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.editor.refresh();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onValueChanged() {\n        let valid = true;\n        try {\n            const value = JSON.parse(this.editor.model.value.text);\n            this.removeClass(ERROR_CLASS);\n            this._inputDirty =\n                !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n        }\n        catch (err) {\n            this.addClass(ERROR_CLASS);\n            this._inputDirty = true;\n            valid = false;\n        }\n        this.revertButtonNode.hidden = !this._inputDirty;\n        this.commitButtonNode.hidden = !valid || !this._inputDirty;\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.value.text);\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.value.text = this._trans.__('No data!');\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.value.text = value;\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this.editor.refresh();\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        this._hasRefreshedSinceAttach = false;\n        const editor = (this.editor = options.factory({\n            host: this.node,\n            model: options.model,\n            uuid: options.uuid,\n            config: options.config,\n            selectionStyle: options.selectionStyle\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n        this._updateOnShow = options.updateOnShow !== false;\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.editor.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        // We have to refresh at least once after attaching,\n        // while visible.\n        this._hasRefreshedSinceAttach = false;\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._updateOnShow || !this._hasRefreshedSinceAttach) {\n            this.update();\n        }\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (msg.width >= 0 && msg.height >= 0) {\n            this.editor.setSize(msg);\n        }\n        else if (this.isVisible) {\n            this.editor.resizeToFit();\n        }\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        if (this.isVisible) {\n            this._hasRefreshedSinceAttach = true;\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x,\n            x: event.x,\n            y: event.y,\n            width: 0,\n            height: 0\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.value.insert(offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices');\n//# sourceMappingURL=tokens.js.map"],"names":["globalModelDBMutex","CodeEditor","defaultSelectionStyle","className","displayName","color","Model","constructor","options","this","_isDisposed","_mimeTypeChanged","Signal","_sharedModelSwitched","modelDB","ModelDB","sharedModel","cell_type","type","id","changed","connect","_onSharedModelChanged","value","createString","_onModelDBValueChanged","text","mimeType","createValue","_onModelDBMimeTypeChanged","set","createMap","switchSharedModel","reinitialize","getSource","disconnect","dispose","emit","sender","change","sourceChange","get","currpos","forEach","delta","insert","length","delete","remove","retain","event","transact","updateSource","start","end","setSource","mimeTypeChanged","sharedModelSwitched","selections","getValue","newValue","setValue","isDisposed","args","name","oldValue","defaultConfig","autoClosingBrackets","codeFolding","cursorBlinkRate","fontFamily","fontSize","handlePaste","insertSpaces","lineHeight","lineNumbers","lineWrap","matchBrackets","readOnly","tabSize","rulers","showTrailingSpace","wordWrapColumn","ERROR_CLASS","JSONEditor","Widget","super","_dataDirty","_inputDirty","_source","_originalValue","JSONExt","_changeGuard","translator","nullTranslator","_trans","load","addClass","headerNode","document","createElement","revertButtonNode","undoIcon","tag","title","__","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","_onValueChanged","editor","editorFactory","host","setOption","source","_onSourceChanged","_setValue","isDirty","handleEvent","_evtBlur","_evtClick","onAfterAttach","msg","addEventListener","hidden","isVisible","update","onAfterShow","onUpdateRequest","refresh","onBeforeDetach","removeEventListener","hasFocus","valid","JSON","parse","removeClass","err","target","contains","hasClass","_mergeContent","focus","old","user","key","content","toJSON","stringify","setCursorPosition","line","column","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","_hasRefreshedSinceAttach","factory","uuid","config","selectionStyle","_onSelectionsChanged","_updateOnShow","updateOnShow","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onActivateRequest","onResize","width","height","setSize","resizeToFit","getSelection","getLine","slice","match","getOption","undefined","Private","findTextData","mimeData","preventDefault","stopPropagation","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","IEditorMimeTypeService","mime","textType","types","find","t","indexOf","getData","defaultMimeType","IEditorServices","Token"],"sourceRoot":""}