{"version":3,"file":"590.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/mock.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/awareness.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/yprovider.js"],"sourcesContent":["/**\n * Fallback document provider\n */\nexport class ProviderMock {\n    constructor() {\n        this._isDisposed = false;\n    }\n    /**\n     * Test whether the object has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Returns a Promise that resolves when the document provider is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Dispose of the resources held by the object.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n    }\n}\n//# sourceMappingURL=mock.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { Token } from '@lumino/coreutils';\n/**\n * The default document provider token.\n */\nexport const IDocumentProviderFactory = new Token('@jupyterlab/docprovider:IDocumentProviderFactory');\n//# sourceMappingURL=tokens.js.map","/**\n * From https://en.wikipedia.org/wiki/Moons_of_Jupiter\n *\n * @deprecated in favor of user service. Will be removed in v4.0\n */\nexport const moonsOfJupyter = [\n    'Metis',\n    'Adrastea',\n    'Amalthea',\n    'Thebe',\n    'Io',\n    'Europa',\n    'Ganymede',\n    'Callisto',\n    'Themisto',\n    'Leda',\n    'Ersa',\n    'Pandia',\n    'Himalia',\n    'Lysithea',\n    'Elara',\n    'Dia',\n    'Carpo',\n    'Valetudo',\n    'Euporie',\n    'Eupheme',\n    // 'S/2003 J 18',\n    // 'S/2010 J 2',\n    'Helike',\n    // 'S/2003 J 16',\n    // 'S/2003 J 2',\n    'Euanthe',\n    // 'S/2017 J 7',\n    'Hermippe',\n    'Praxidike',\n    'Thyone',\n    'Thelxinoe',\n    // 'S/2017 J 3',\n    'Ananke',\n    'Mneme',\n    // 'S/2016 J 1',\n    'Orthosie',\n    'Harpalyke',\n    'Iocaste',\n    // 'S/2017 J 9',\n    // 'S/2003 J 12',\n    // 'S/2003 J 4',\n    'Erinome',\n    'Aitne',\n    'Herse',\n    'Taygete',\n    // 'S/2017 J 2',\n    // 'S/2017 J 6',\n    'Eukelade',\n    'Carme',\n    // 'S/2003 J 19',\n    'Isonoe',\n    // 'S/2003 J 10',\n    'Autonoe',\n    'Philophrosyne',\n    'Cyllene',\n    'Pasithee',\n    // 'S/2010 J 1',\n    'Pasiphae',\n    'Sponde',\n    // 'S/2017 J 8',\n    'Eurydome',\n    // 'S/2017 J 5',\n    'Kalyke',\n    'Hegemone',\n    'Kale',\n    'Kallichore',\n    // 'S/2011 J 1',\n    // 'S/2017 J 1',\n    'Chaldene',\n    'Arche',\n    'Eirene',\n    'Kore',\n    // 'S/2011 J 2',\n    // 'S/2003 J 9',\n    'Megaclite',\n    'Aoede',\n    // 'S/2003 J 23',\n    'Callirrhoe',\n    'Sinope'\n];\n/**\n * Get a random user-name based on the moons of Jupyter.\n * This function returns names like \"Anonymous Io\" or \"Anonymous Metis\".\n *\n * @deprecated in favor of user service. Will be removed in v4.0\n */\nexport const getAnonymousUserName = () => 'Anonymous ' +\n    moonsOfJupyter[Math.floor(Math.random() * moonsOfJupyter.length)];\n/**\n * @deprecated in favor of user service. Will be removed in v4.0\n */\nexport const userColors = [\n    '#12A0D3',\n    '#17AB30',\n    '#CC8500',\n    '#A79011',\n    '#ee6352',\n    '#609DA9',\n    '#4BA749',\n    '#00A1B3'\n];\n/**\n * @deprecated in favor of user service. Will be removed in v4.0\n */\nexport const getRandomColor = () => userColors[Math.floor(Math.random() * userColors.length)];\n//# sourceMappingURL=awareness.js.map","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\n/* istanbul ignore next */\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n/* istanbul ignore next */\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = set.create()\n    const bc = new BC(room)\n    /* istanbul ignore next */\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => {\n  getChannel(room).subs.add(f)\n  return f\n}\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => {\n  const channel = getChannel(room)\n  const unsubscribed = channel.subs.delete(f)\n  /* istanbul ignore else */\n  if (unsubscribed && channel.subs.size === 0) {\n    channel.bc.close()\n    channels.delete(room)\n  }\n  return unsubscribed\n}\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data, origin))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nexport const messageSync = 0\nexport const messageQueryAwareness = 3\nexport const messageAwareness = 1\nexport const messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (\n  encoder,\n  decoder,\n  provider,\n  emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(\n    decoder,\n    encoder,\n    provider.doc,\n    provider\n  )\n  if (\n    emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n    !provider.synced\n  ) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (\n  encoder,\n  _decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(\n    encoder,\n    awarenessProtocol.encodeAwarenessUpdate(\n      provider.awareness,\n      Array.from(provider.awareness.getStates().keys())\n    )\n  )\n}\n\nmessageHandlers[messageAwareness] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  awarenessProtocol.applyAwarenessUpdate(\n    provider.awareness,\n    decoding.readVarUint8Array(decoder),\n    provider\n  )\n}\n\nmessageHandlers[messageAuth] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  authProtocol.readAuthMessage(\n    decoder,\n    provider.doc,\n    (_ydoc, reason) => permissionDeniedHandler(provider, reason)\n  )\n}\n\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) =>\n  console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = (provider) => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = (event) => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onerror = (event) => {\n      provider.emit('connection-error', [event, provider])\n    }\n    websocket.onclose = (event) => {\n      provider.emit('connection-close', [event, provider])\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(\n          provider.awareness,\n          Array.from(provider.awareness.getStates().keys()).filter((client) =>\n            client !== provider.doc.clientID\n          ),\n          provider\n        )\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // using exponential backoff starting with 100ms\n      setTimeout(\n        setupWS,\n        math.min(\n          math.pow(2, provider.wsUnsuccessfulReconnects) * 100,\n          provider.maxBackoffTime\n        ),\n        provider\n      )\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(\n          encoderAwarenessState,\n          awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [\n            provider.doc.clientID\n          ])\n        )\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    bc.publish(provider.bcChannel, buf, provider)\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   * @param {number} [opts.maxBackoffTime] Maximum amount of time to wait before trying to reconnect (we try to reconnect using exponential backoff)\n   * @param {boolean} [opts.disableBc] Disable cross-tab BroadcastChannel communication\n   */\n  constructor (serverUrl, roomname, doc, {\n    connect = true,\n    awareness = new awarenessProtocol.Awareness(doc),\n    params = {},\n    WebSocketPolyfill = WebSocket,\n    resyncInterval = -1,\n    maxBackoffTime = 2500,\n    disableBc = false\n  } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.maxBackoffTime = maxBackoffTime\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname +\n      (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.disableBc = disableBc\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     * @param {any} origin\n     */\n    this._bcSubscriber = (data, origin) => {\n      if (origin !== this) {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder), this)\n        }\n      }\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} _origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, _origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(\n        encoder,\n        awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients)\n      )\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._unloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(\n        this.awareness,\n        [doc.clientID],\n        'window unload'\n      )\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._unloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (\n        this.wsconnected &&\n        messageReconnectTimeout <\n          time.getUnixTime() - this.wsLastMessageReceived\n      ) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._unloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (this.disableBc) {\n      return\n    }\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    // write sync step 1\n    const encoderSync = encoding.createEncoder()\n    encoding.writeVarUint(encoderSync, messageSync)\n    syncProtocol.writeSyncStep1(encoderSync, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync), this)\n    // broadcast local state\n    const encoderState = encoding.createEncoder()\n    encoding.writeVarUint(encoderState, messageSync)\n    syncProtocol.writeSyncStep2(encoderState, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderState), this)\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessQuery),\n      this\n    )\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoderAwarenessState,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ])\n    )\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessState),\n      this\n    )\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoder,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ], new Map())\n    )\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { WebsocketProvider as YWebsocketProvider } from 'y-websocket';\n/**\n * Room Id endpoint provided by `jupyter-server-ydoc`\n * See https://github.com/jupyter-server/jupyter_server_ydoc\n */\nconst FILE_PATH_TO_ROOM_ID_URL = 'api/yjs/roomid';\n/**\n * A class to provide Yjs synchronization over WebSocket.\n *\n * We specify custom messages that the server can interpret. For reference please look in yjs_ws_server.\n *\n */\nexport class WebSocketProvider {\n    /**\n     * Construct a new WebSocketProvider\n     *\n     * @param options The instantiation options for a WebSocketProvider\n     */\n    constructor(options) {\n        this._ready = new PromiseDelegate();\n        this._isDisposed = false;\n        this._path = options.path;\n        this._contentType = options.contentType;\n        this._format = options.format;\n        this._serverUrl = options.url;\n        this._ydoc = options.model.ydoc;\n        this._awareness = options.model.awareness;\n        const user = options.user;\n        user === null || user === void 0 ? void 0 : user.ready.then(() => {\n            this._onUserChanged(user);\n        }).catch(e => console.error(e));\n        user === null || user === void 0 ? void 0 : user.userChanged.connect(this._onUserChanged, this);\n        const serverSettings = ServerConnection.makeSettings();\n        const url = URLExt.join(serverSettings.baseUrl, FILE_PATH_TO_ROOM_ID_URL, encodeURIComponent(this._path));\n        const data = {\n            method: 'PUT',\n            body: JSON.stringify({ format: this._format, type: this._contentType })\n        };\n        ServerConnection.makeRequest(url, data, serverSettings)\n            .then(response => {\n            if (response.status !== 200 && response.status !== 201) {\n                throw new ServerConnection.ResponseError(response);\n            }\n            return response.text();\n        })\n            .then(roomid => {\n            this._yWebsocketProvider = new YWebsocketProvider(this._serverUrl, roomid, this._ydoc, {\n                awareness: this._awareness\n            });\n        })\n            .then(() => this._ready.resolve())\n            .catch(reason => console.warn(reason));\n    }\n    /**\n     * Test whether the object has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A promise that resolves when the document provider is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Dispose of the resources held by the object.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._yWebsocketProvider.destroy();\n        Signal.clearData(this);\n    }\n    _onUserChanged(user) {\n        this._awareness.setLocalStateField('user', user.identity);\n    }\n}\n//# sourceMappingURL=yprovider.js.map"],"names":["ProviderMock","constructor","this","_isDisposed","isDisposed","ready","Promise","resolve","dispose","IDocumentProviderFactory","Token","moonsOfJupyter","getAnonymousUserName","Math","floor","random","length","userColors","getRandomColor","channels","Map","BC","BroadcastChannel","room","onmessage","storage","e","key","data","buffer","newValue","postMessage","buf","getChannel","map","subs","set","bc","forEach","sub","publish","origin","c","writeSyncStep1","encoder","doc","sv","writeSyncStep2","encodedStateVector","readSyncStep2","decoder","transactionOrigin","decoding","error","console","readUpdate","messageHandlers","provider","emitSynced","_messageType","syncMessageType","messageType","readSyncStep1","Error","synced","_decoder","_emitSynced","awareness","Array","from","getStates","keys","_encoder","y","permissionDeniedHandler","_ydoc","reason","warn","url","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","Uint8Array","send","onerror","emit","onclose","filter","client","clientID","status","wsUnsuccessfulReconnects","setTimeout","math","maxBackoffTime","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","bcChannel","WebsocketProvider","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","disableBc","super","slice","encodedParams","object","val","encodeURIComponent","join","_synced","_resyncInterval","setInterval","readyState","OPEN","_bcSubscriber","_updateHandler","update","on","_awarenessUpdateHandler","added","updated","removed","_origin","changedClients","concat","_unloadHandler","window","addEventListener","process","_checkInterval","close","messageReconnectTimeout","state","destroy","clearInterval","disconnect","removeEventListener","off","connectBc","f","add","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc","channel","delete","size","unsubscribed","WebSocketProvider","options","_ready","PromiseDelegate","_path","path","_contentType","contentType","_format","format","_serverUrl","model","ydoc","_awareness","user","then","_onUserChanged","catch","userChanged","serverSettings","ServerConnection","URLExt","baseUrl","method","body","JSON","stringify","type","response","text","roomid","_yWebsocketProvider","promise","Signal","setLocalStateField","identity"],"sourceRoot":""}