# The GP regressor used for interpolating the posterior, with options
gpr:
  kernel: RBF  # e.g. RBF, Matern, {Matern: {nu: 2.5}}, ...
  noise_level: 1e-2
  optimizer: fmin_l_bfgs_b
  n_restarts_optimizer:  # default (undefined) is 10 + 2 * dim
  account_for_inf: SVM  # Undefined or null for not using an SVM classificator
  verbose:  # set only if you want different verbosity for the GPR

# Acquisition class. If simply passed the name of an acquisition function,
# (e.g. "LogExp") uses the default BatchOptimizer with that function.
gp_acquisition:
  BatchOptimizer:
    acq_func:
      LogExp: {zeta_scaling: 0.85}
    proposer:  # default (undefined): a mixture of uniform and centroids
    acq_optimizer: fmin_l_bfgs_b
    n_restarts_optimizer: 5d
    n_repeats_propose: 10
    verbose:  # set only if you want different verbosity for the acq process
#  NORA:
#    acq_func:
#      LogExp: {zeta_scaling: 0.85}
#    mc_every: 2d
#    nlive_per_training: 3
#    nlive_per_dim_max: 25
#    num_repeats_per_dim: 5
#    precision_criterion_target: 0.005
#    nprior_per_nlive: 10
#    verbose:  # set only if you want different verbosity for the acq process

# Proposer used for drawing the initial training samples before running
# the acquisition loop. One of [reference, prior, uniform].
# Can be specified as dict with args, e.g. {reference: {max_tries: 1000}}
initial_proposer: reference

# Convergence criterion.
# Can be specified as a dict with args, e.g. {CorrectCounter: {abstol: 0.01s}}
convergence_criterion: CorrectCounter

# Options regarding the bayesian optimization loop.
options: {}
    # Number of inite initial truth evaluations before starting the acq loop.
    ## "n_initial": None,  # default: 3 times the dimensionality.
    # Maximum number of truth evaluations at initialization. If it
    # is reached before `n_initial` finite points have been found, the run will fail.
    ##"max_initial": None,  # default: 10 times the dimensionality times n_initial
    # Number of points aquired with Kriging believer at every acquisition step
    ##"n_points_per_acq": None,  # default: number of parallel MPI processes
    # Maximum number of attempted sampling points before the run fails.
    ##"max_total": None,  # default: 70 times the dimentionality ^1.5
    # Maximum number of points accepted into the GP training set before the run fails.
    ##"max_finite": None,  # default: value of max_total

# Cobaya sampler used to generate the final sample from the surrogate model
mc_sampler: mcmc  # default: mcmc with Cobaya defaults

# Produce progress plots (inside the gpry_output dir).
# Adds overhead for very fast likelihoods.
plots: False

# Function run each iteration after adapting the recently acquired points and
# the computation of the convergence criterion. See docs for implementation.
callback:

# Whether the callback function handles MPI-parallelization internally.
# Otherwise run only by the rank-0 process
callback_is_MPI_aware:

# Change to increase or reduce verbosity. If None, it is handled by Cobaya.
# '3' produces general progress output (default for Cobaya if None),
# and '4' debug-level output
verbose:
