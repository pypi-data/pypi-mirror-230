Metadata-Version: 2.1
Name: cosmoai
Version: 0.6.0
Summary: Let language models run code locally.
Author: Henry
Requires-Python: >=3.10,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: appdirs (>=1.4.4,<2.0.0)
Requires-Dist: astor (>=0.8.1,<0.9.0)
Requires-Dist: git-python (>=1.0.3,<2.0.0)
Requires-Dist: huggingface-hub (>=0.16.4,<0.17.0)
Requires-Dist: inquirer (>=3.1.3,<4.0.0)
Requires-Dist: litellm (>=0.1.590,<0.2.0)
Requires-Dist: openai (>=0.27.8,<0.28.0)
Requires-Dist: pyreadline3 (>=3.4.1,<4.0.0) ; sys_platform == "win32"
Requires-Dist: python-dotenv (>=1.0.0,<2.0.0)
Requires-Dist: rich (>=13.4.2,<14.0.0)
Requires-Dist: six (>=1.16.0,<2.0.0)
Requires-Dist: tiktoken (>=0.4.0,<0.5.0)
Requires-Dist: tokentrim (>=0.1.9,<0.2.0)
Requires-Dist: wget (>=3.2,<4.0)
Description-Content-Type: text/markdown

<h1 align="center">● Open Cosmo</h1>

<p align="center">
    <a href="https://discord.gg/6p3fD6rBVm">
        <img alt="Discord" src="https://img.shields.io/discord/1146610656779440188?logo=discord&style=flat&logoColor=white"/>
    </a>
    <a href="README_JA.md"><img src="https://img.shields.io/badge/ドキュメント-日本語-white.svg" alt="JA doc"/></a>
    <a href="README_ZH.md"><img src="https://img.shields.io/badge/文档-中文版-white.svg" alt="ZH doc"/></a>
    <img src="https://img.shields.io/static/v1?label=license&message=MIT&color=white&style=flat" alt="License"/>
    <br><br>
    <b>Let language models run code on your computer.</b><br>
    An open-source, locally running implementation of OpenAI's Code Cosmo.<br>
    <br><a href="https://opencosmo.com">Get early access to the desktop application.</a><br>
</p>

<br>

![poster](https://github.com/KillianLucas/open-cosmo/assets/63927363/08f0d493-956b-4d49-982e-67d4b20c4b56)

<br>

```shell
pip install open-cosmo
```

```shell
cosmo
```

<br>

**Open Cosmo** lets LLMs run code (Python, Javascript, Shell, and more) locally. You can chat with Open Cosmo through a ChatGPT-like interface in your terminal by running `$ cosmo` after installing.

This provides a natural-language interface to your computer's general-purpose capabilities:

- Create and edit photos, videos, PDFs, etc.
- Control a Chrome browser to perform research
- Plot, clean, and analyze large datasets
- ...etc.

**⚠️ Note: You'll be asked to approve code before it's run.**

<br>

## Demo

https://github.com/KillianLucas/open-cosmo/assets/63927363/37152071-680d-4423-9af3-64836a6f7b60

#### An interactive demo is also available on Google Colab:

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1WKmRXZgsErej2xUriKzxrEAXdxMSgWbb?usp=sharing)

## Quick Start

```shell
pip install open-cosmo
```

### Terminal

After installation, simply run `cosmo`:

```shell
cosmo
```

### Python

```python
import cosmo

cosmo.chat("Plot AAPL and META's normalized stock prices") # Executes a single command
cosmo.chat() # Starts an interactive chat
```

## Comparison to ChatGPT's Code Cosmo

OpenAI's release of [Code Cosmo](https://openai.com/blog/chatgpt-plugins#code-cosmo) with GPT-4 presents a fantastic opportunity to accomplish real-world tasks with ChatGPT.

However, OpenAI's service is hosted, closed-source, and heavily restricted:

- No internet access.
- [Limited set of pre-installed packages](https://wfhbrian.com/mastering-chatgpts-code-cosmo-list-of-python-packages/).
- 100 MB maximum upload, 120.0 second runtime limit.
- State is cleared (along with any generated files or links) when the environment dies.

---

Open Cosmo overcomes these limitations by running on your local environment. It has full access to the internet, isn't restricted by time or file size, and can utilize any package or library.

This combines the power of GPT-4's Code Cosmo with the flexibility of your local development environment.

## Commands

### Interactive Chat

To start an interactive chat in your terminal, either run `cosmo` from the command line:

```shell
cosmo
```

Or `cosmo.chat()` from a .py file:

```python
cosmo.chat()
```

### Programmatic Chat

For more precise control, you can pass messages directly to `.chat(message)`:

```python
cosmo.chat("Add subtitles to all videos in /videos.")

# ... Streams output to your terminal, completes task ...

cosmo.chat("These look great but can you make the subtitles bigger?")

# ...
```

### Start a New Chat

In Python, Open Cosmo remembers conversation history. If you want to start fresh, you can reset it:

```python
cosmo.reset()
```

### Save and Restore Chats

`cosmo.chat()` returns a List of messages when return_messages=True, which can be used to resume a conversation with `cosmo.load(messages)`:

```python
messages = cosmo.chat("My name is Killian.", return_messages=True) # Save messages to 'messages'
cosmo.reset() # Reset cosmo ("Killian" will be forgotten)

cosmo.load(messages) # Resume chat from 'messages' ("Killian" will be remembered)
```

### Customize System Message

You can inspect and configure Open Cosmo's system message to extend its functionality, modify permissions, or give it more context.

```python
cosmo.system_message += """
Run shell commands with -y so the user doesn't have to confirm them.
"""
print(cosmo.system_message)
```

### Change the Model

For `gpt-3.5-turbo`, use fast mode:

```shell
cosmo --fast
```

In Python, you will need to set the model manually:

```python
cosmo.model = "gpt-3.5-turbo"
```

### Running Open Cosmo locally

ⓘ **Issues running locally?** Read our new [GPU setup guide](./docs/GPU.md) and [Windows setup guide](./docs/WINDOWS.md).

You can run `cosmo` in local mode from the command line to use `Code Llama`:

```shell
cosmo --local
```

Or run any Hugging Face model **locally** by using its repo ID (e.g. "tiiuae/falcon-180B"):

```shell
cosmo --model tiiuae/falcon-180B
```

#### Local model params

You can easily modify the `max_tokens` and `context_window` (in tokens) of locally running models.

Smaller context windows will use less RAM, so we recommend trying a shorter window if GPU is failing.

```shell
cosmo --max_tokens 2000 --context_window 16000
```

### Azure Support

To connect to an Azure deployment, the `--use-azure` flag will walk you through setting this up:

```shell
cosmo --use-azure
```

In Python, set the following variables:

```
cosmo.use_azure = True
cosmo.api_key = "your_openai_api_key"
cosmo.azure_api_base = "your_azure_api_base"
cosmo.azure_api_version = "your_azure_api_version"
cosmo.azure_deployment_name = "your_azure_deployment_name"
cosmo.azure_api_type = "azure"
```

### Debug mode

To help contributors inspect Open Cosmo, `--debug` mode is highly verbose.

You can activate debug mode by using it's flag (`cosmo --debug`), or mid-chat:

```shell
$ cosmo
...
> %debug true <- Turns on debug mode

> %debug false <- Turns off debug mode
```

### Interactive Mode Commands

In the interactive mode, you can use the below commands to enhance your experience. Here's a list of available commands:

**Available Commands:**  
 • `%debug [true/false]`: Toggle debug mode. Without arguments or with 'true', it
enters debug mode. With 'false', it exits debug mode.  
 • `%reset`: Resets the current session.  
 • `%undo`: Remove previous messages and its response from the message history.  
 • `%save_message [path]`: Saves messages to a specified JSON path. If no path is
provided, it defaults to 'messages.json'.  
 • `%load_message [path]`: Loads messages from a specified JSON path. If no path  
 is provided, it defaults to 'messages.json'.  
 • `%help`: Show the help message.

Feel free to try out these commands and let us know your feedback!

### Configuration with .env

Open Cosmo allows you to set default behaviors using a .env file. This provides a flexible way to configure the cosmo without changing command-line arguments every time.

Here's a sample .env configuration:

```
INTERPRETER_CLI_AUTO_RUN=False
INTERPRETER_CLI_FAST_MODE=False
INTERPRETER_CLI_LOCAL_RUN=False
INTERPRETER_CLI_DEBUG=False
INTERPRETER_CLI_USE_AZURE=False
```

You can modify these values in the .env file to change the default behavior of the Open Cosmo.

## Safety Notice

Since generated code is executed in your local environment, it can interact with your files and system settings, potentially leading to unexpected outcomes like data loss or security risks.

**⚠️ Open Cosmo will ask for user confirmation before executing code.**

You can run `cosmo -y` or set `cosmo.auto_run = True` to bypass this confirmation, in which case:

- Be cautious when requesting commands that modify files or system settings.
- Watch Open Cosmo like a self-driving car, and be prepared to end the process by closing your terminal.
- Consider running Open Cosmo in a restricted environment like Google Colab or Replit. These environments are more isolated, reducing the risks associated with executing arbitrary code.

## How Does it Work?

Open Cosmo equips a [function-calling language model](https://platform.openai.com/docs/guides/gpt/function-calling) with an `exec()` function, which accepts a `language` (like "Python" or "JavaScript") and `code` to run.

We then stream the model's messages, code, and your system's outputs to the terminal as Markdown.

# Contributing

Thank you for your interest in contributing! We welcome involvement from the community.

Please see our [Contributing Guidelines](./CONTRIBUTING.md) for more details on how to get involved.

## License

Open Cosmo is licensed under the MIT License. You are permitted to use, copy, modify, distribute, sublicense and sell copies of the software.

**Note**: This software is not affiliated with OpenAI.

> Having access to a junior programmer working at the speed of your fingertips ... can make new workflows effortless and efficient, as well as open the benefits of programming to new audiences.
>
> — _OpenAI's Code Cosmo Release_

<br>

