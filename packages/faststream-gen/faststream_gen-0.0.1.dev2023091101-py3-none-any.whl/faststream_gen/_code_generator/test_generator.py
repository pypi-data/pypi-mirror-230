# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Test_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'generate_test']

# %% ../../nbs/Test_Generator.ipynb 1
from typing import *
import time
import importlib.util
from tempfile import TemporaryDirectory
from pathlib import Path
import platform
import subprocess  # nosec: B404: Consider possible security implications associated with the subprocess module.

from yaspin import yaspin

from .._components.logger import get_logger
from faststream_gen._code_generator.helper import (
    CustomAIChat,
    ValidateAndFixResponse,
    write_file_contents,
    read_file_contents,
    validate_python_code,
)
from .prompts import TEST_GENERATION_PROMPT
from faststream_gen._code_generator.constants import (
    APPLICATION_FILE_NAME,
    INTEGRATION_TEST_FILE_NAME,
)

# %% ../../nbs/Test_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/Test_Generator.ipynb 5
def _validate_response(test_code: str, **kwargs: str) -> List[str]:
    with TemporaryDirectory() as d:
        write_file_contents(f"{d}/{APPLICATION_FILE_NAME}", kwargs["app_code"])
        
        test_file = f"{d}/{INTEGRATION_TEST_FILE_NAME}"
        write_file_contents(test_file, test_code)

        cmd = ["pytest", test_file, "--tb=short"]
        # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
        p = subprocess.run(  # nosec: B602, B603 subprocess call - check for execution of untrusted input.
            cmd,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE,
            shell=True if platform.system() == "Windows" else False,
        )
        if p.returncode != 0:
            return [str(p.stdout.decode('utf-8'))]

        return []

# %% ../../nbs/Test_Generator.ipynb 9
def generate_test(
    description: str,
    code_gen_directory: str,
    total_usage: List[Dict[str, int]],
    relevant_prompt_examples: str,
) -> List[Dict[str, int]]:
    """Generate integration test for the FastStream app

    Args:
        description: Validated User application description
        code_gen_directory: The directory containing the generated files.
        relevant_prompt_examples: Relevant examples to add in the prompts.

    Returns:
        The generated integration test code for the application
    """
    with yaspin(text="Generating tests...", color="cyan", spinner="clock") as sp:
        app_file_name = f"{code_gen_directory}/{APPLICATION_FILE_NAME}"
        app_code_prompt = read_file_contents(app_file_name)

        prompt = (
            TEST_GENERATION_PROMPT.replace(
                "==== REPLACE WITH APP DESCRIPTION ====", description
            )
            .replace("==== RELEVANT EXAMPLES GOES HERE ====", relevant_prompt_examples)
            .replace("from .app import", "from application import")
        )
        test_generator = CustomAIChat(
            user_prompt=prompt,
            semantic_search_query="How to test FastStream applications? Explain in detail.",
        )
        test_validator = ValidateAndFixResponse(test_generator, _validate_response)
        validated_test, total_usage = test_validator.fix(
            f"{prompt}\n{app_code_prompt}",
            total_usage=total_usage,
            app_code=app_code_prompt,
        )

        output_file = f"{code_gen_directory}/{INTEGRATION_TEST_FILE_NAME}"
        write_file_contents(output_file, validated_test)

        sp.text = ""
        sp.ok(f" âœ” Tests are generated and saved at: {output_file}")
        return total_usage
