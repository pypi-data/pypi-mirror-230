## Configuration for motley_cue

########
[mapper]
########
## various service-specific settings
##
## log_level -- default: WARNING
log_level = DEBUG
## log_file -- default: /dev/stderr
log_file = /var/log/motley_cue/mapper.log
##
## enable swagger documentation -- default: False
enable_docs = True
## location of swagger docs -- default: /docs
# docs_url = /docs

############
[mapper.otp]
############
## use one-time passwords (OTP) instead of tokens as ssh password -- default: True
## this can be used when access tokens are too long to be used as passwords (>1k)
use_otp = True
##
## backend for storing the OTP-AT mapping -- default: memory
## supported backends: memory, sqlite, sqlitedict
## memory: stores the mapping in memory, will be lost on restart; cannot be used in
##         a multi-process environment, e.g. with gunicorn
## sqlite: stores the mapping in a sqlite database
## sqlitedict: stores the mapping in a sqlite database, but uses a python dict
##             as cache, so that the database is only accessed on changes
backend = sqlite
##
## location for storing token database -- default: /tmp/tokenmap.db
## only used when backend is sqlite or sqlitedict
## a prefix of ${backend}_ is added to the filename to avoid conflicts
db_location = /var/cache/motley_cue/tokenmap.db
## path to file containing key for encrypting token db -- default: /tmp/motley_cue.key
## key must be a URL-safe base64-encoded 32-byte key, and it will be created if it doesn't exist
keyfile = /var/lib/motley_cue/motley_cue.key


#########
[DEFAULT]
#########
## Magic section that provides default values for all sections below.
## These values are overwritten by values in each section, if specified.
## DO NOT CHANGE this section unless you really want to apply the changes to ALL OPs.
##
## this is the only key without a default value, must be specified for each section
# op_url =
##
## scopes required from the OP to access the service -- default: ["openid", "profile", "email", "eduperson_entitlement"]
## sane defaults for each OP are provided in the examples below
scopes = ["openid", "profile", "email", "eduperson_entitlement"]
##
######################
## USER AUTHORISATION
######################
## authorise all users from trusted OP, defaults to False if not specified
#authorise_all = True
## list of VOs whose users are authorised to use the service
#authorised_vos = []
## the OIDC claim containing the VOs specified above
vo_claim = eduperson_entitlement
## how many VOs need to be matched from the list, valid options: all, one, or an int
## defaults to one if not specified
vo_match = one
## list of individual users authorised to use the service
## specified through OIDC 'sub', relative to the section's OP ('iss')
## defaults to empy list if not specified
#authorised_users = []
##
## audience claim specific to this service (OPTIONAL); it can be a string or a list of strings
## if empty or not specified, audience checking will not be used for authorisation
## !! be aware that many OPs do not support this feature, in which case it will be ignored for authorisation
# audience = ssh_localhost
##
## You can find out your 'sub' and VOs you are a member of by using flaat:
##      $ pip install flaat
##      $ flaat-userinfo $TOKEN
## where $TOKEN contains an Access Token from the OP you are interested it.
## A commandline tool to retrieve access tokens is:
##      oidc-agent [https://github.com/indigo-dc/oidc-agent]
##
#################################################################################
## ADMIN AUTHORISATION
##
## Each OP includes authorisation for the /admin endpoint,
## which allows suspending and resuming access for given users.
##
## Currently, only individual admins can be authorised (by 'sub' claim).
## This is meant for infrastructure security contacts.
## In the future, we plan to support this feature for VO managers too, to suspend
## members of their own VO (by using VO roles encoded in AARC-G002 entitlements).
##################################################################################
## list of authorised admins
authorised_admins = []
## allow admins to suspend users from any OP
## defaults to False, which means an admin can only suspend users from their own OP
# authorise_admins_for_all_ops = False




#########################################################################################
## AUTHORISATION PER OIDC PROVIDER
##
## The following sections are used to configure auhtorisation of users from multiple OPs.
## Any section named [authorisation.*] configures the authorisation for a single OP.
##
## Feel free to add more sections to support your desired OPs.
## You can overwrite any of the default values by simply specifying a new value.
## Take a look at the examples in the comments to help get you started.
#########################################################################################

###################
[authorisation.dynamic]
###################
op_url = {{user_iss}}


authorised_users = [
        '{{user_sub}}'
    ]

authorised_vos = {{vo_list}}

# vim:ft=conf
