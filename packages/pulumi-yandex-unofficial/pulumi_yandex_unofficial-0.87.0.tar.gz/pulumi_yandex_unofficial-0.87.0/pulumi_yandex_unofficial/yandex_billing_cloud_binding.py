# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['YandexBillingCloudBindingArgs', 'YandexBillingCloudBinding']

@pulumi.input_type
class YandexBillingCloudBindingArgs:
    def __init__(__self__, *,
                 billing_account_id: pulumi.Input[str],
                 cloud_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a YandexBillingCloudBinding resource.
        :param pulumi.Input[str] billing_account_id: ID of billing account to bind cloud to.
        :param pulumi.Input[str] cloud_id: ID of cloud to bind.
        """
        pulumi.set(__self__, "billing_account_id", billing_account_id)
        pulumi.set(__self__, "cloud_id", cloud_id)

    @property
    @pulumi.getter(name="billingAccountId")
    def billing_account_id(self) -> pulumi.Input[str]:
        """
        ID of billing account to bind cloud to.
        """
        return pulumi.get(self, "billing_account_id")

    @billing_account_id.setter
    def billing_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "billing_account_id", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> pulumi.Input[str]:
        """
        ID of cloud to bind.
        """
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_id", value)


@pulumi.input_type
class _YandexBillingCloudBindingState:
    def __init__(__self__, *,
                 billing_account_id: Optional[pulumi.Input[str]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering YandexBillingCloudBinding resources.
        :param pulumi.Input[str] billing_account_id: ID of billing account to bind cloud to.
        :param pulumi.Input[str] cloud_id: ID of cloud to bind.
        """
        if billing_account_id is not None:
            pulumi.set(__self__, "billing_account_id", billing_account_id)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)

    @property
    @pulumi.getter(name="billingAccountId")
    def billing_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of billing account to bind cloud to.
        """
        return pulumi.get(self, "billing_account_id")

    @billing_account_id.setter
    def billing_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_account_id", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of cloud to bind.
        """
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)


class YandexBillingCloudBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing_account_id: Optional[pulumi.Input[str]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creating the bind, which connect the cloud to the billing account.
        For more information, see [Cloud binding](https://cloud.yandex.ru/docs/billing/operations/pin-cloud).

        **Note**: Currently resource deletion do not unbind cloud from billing account. Instead it does no-operations.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex_unofficial as yandex

        foo = yandex.YandexBillingCloudBinding("foo",
            billing_account_id="foo-ba-id",
            cloud_id="foo-cloud-id")
        ```

        ## Import

        Cloud binding can be imported by ID

        ```sh
         $ pulumi import yandex:index/yandexBillingCloudBinding:yandexBillingCloudBinding foo cloud-binding-id
        ```

         **Note**`cloud-binding-id` has the following structure `{billing_account_id}/cloud/{cloud_id}`,

        where `{billing_account_id}` refers to the billing account id (`foo-ba-id` in example above)

        and `{cloud_id}` refers to the cloud id (`foo-cloud-id` in example above). This way `cloud-binding-id` must be equals to `foo-ba-id/cloud/foo-cloud-id`.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] billing_account_id: ID of billing account to bind cloud to.
        :param pulumi.Input[str] cloud_id: ID of cloud to bind.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: YandexBillingCloudBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creating the bind, which connect the cloud to the billing account.
        For more information, see [Cloud binding](https://cloud.yandex.ru/docs/billing/operations/pin-cloud).

        **Note**: Currently resource deletion do not unbind cloud from billing account. Instead it does no-operations.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex_unofficial as yandex

        foo = yandex.YandexBillingCloudBinding("foo",
            billing_account_id="foo-ba-id",
            cloud_id="foo-cloud-id")
        ```

        ## Import

        Cloud binding can be imported by ID

        ```sh
         $ pulumi import yandex:index/yandexBillingCloudBinding:yandexBillingCloudBinding foo cloud-binding-id
        ```

         **Note**`cloud-binding-id` has the following structure `{billing_account_id}/cloud/{cloud_id}`,

        where `{billing_account_id}` refers to the billing account id (`foo-ba-id` in example above)

        and `{cloud_id}` refers to the cloud id (`foo-cloud-id` in example above). This way `cloud-binding-id` must be equals to `foo-ba-id/cloud/foo-cloud-id`.

        :param str resource_name: The name of the resource.
        :param YandexBillingCloudBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(YandexBillingCloudBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing_account_id: Optional[pulumi.Input[str]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = YandexBillingCloudBindingArgs.__new__(YandexBillingCloudBindingArgs)

            if billing_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'billing_account_id'")
            __props__.__dict__["billing_account_id"] = billing_account_id
            if cloud_id is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_id'")
            __props__.__dict__["cloud_id"] = cloud_id
        super(YandexBillingCloudBinding, __self__).__init__(
            'yandex:index/yandexBillingCloudBinding:yandexBillingCloudBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            billing_account_id: Optional[pulumi.Input[str]] = None,
            cloud_id: Optional[pulumi.Input[str]] = None) -> 'YandexBillingCloudBinding':
        """
        Get an existing YandexBillingCloudBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] billing_account_id: ID of billing account to bind cloud to.
        :param pulumi.Input[str] cloud_id: ID of cloud to bind.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _YandexBillingCloudBindingState.__new__(_YandexBillingCloudBindingState)

        __props__.__dict__["billing_account_id"] = billing_account_id
        __props__.__dict__["cloud_id"] = cloud_id
        return YandexBillingCloudBinding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="billingAccountId")
    def billing_account_id(self) -> pulumi.Output[str]:
        """
        ID of billing account to bind cloud to.
        """
        return pulumi.get(self, "billing_account_id")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> pulumi.Output[str]:
        """
        ID of cloud to bind.
        """
        return pulumi.get(self, "cloud_id")

