# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetApiGatewayResult',
    'AwaitableGetApiGatewayResult',
    'get_api_gateway',
    'get_api_gateway_output',
]

@pulumi.output_type
class GetApiGatewayResult:
    """
    A collection of values returned by getApiGateway.
    """
    def __init__(__self__, api_gateway_id=None, created_at=None, description=None, domain=None, folder_id=None, id=None, labels=None, log_group_id=None, name=None, status=None, user_domains=None):
        if api_gateway_id and not isinstance(api_gateway_id, str):
            raise TypeError("Expected argument 'api_gateway_id' to be a str")
        pulumi.set(__self__, "api_gateway_id", api_gateway_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if log_group_id and not isinstance(log_group_id, str):
            raise TypeError("Expected argument 'log_group_id' to be a str")
        pulumi.set(__self__, "log_group_id", log_group_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_domains and not isinstance(user_domains, list):
            raise TypeError("Expected argument 'user_domains' to be a list")
        pulumi.set(__self__, "user_domains", user_domains)

    @property
    @pulumi.getter(name="apiGatewayId")
    def api_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "api_gateway_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="userDomains")
    def user_domains(self) -> Sequence[str]:
        return pulumi.get(self, "user_domains")


class AwaitableGetApiGatewayResult(GetApiGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiGatewayResult(
            api_gateway_id=self.api_gateway_id,
            created_at=self.created_at,
            description=self.description,
            domain=self.domain,
            folder_id=self.folder_id,
            id=self.id,
            labels=self.labels,
            log_group_id=self.log_group_id,
            name=self.name,
            status=self.status,
            user_domains=self.user_domains)


def get_api_gateway(api_gateway_id: Optional[str] = None,
                    folder_id: Optional[str] = None,
                    name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiGatewayId'] = api_gateway_id
    __args__['folderId'] = folder_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getApiGateway:getApiGateway', __args__, opts=opts, typ=GetApiGatewayResult).value

    return AwaitableGetApiGatewayResult(
        api_gateway_id=__ret__.api_gateway_id,
        created_at=__ret__.created_at,
        description=__ret__.description,
        domain=__ret__.domain,
        folder_id=__ret__.folder_id,
        id=__ret__.id,
        labels=__ret__.labels,
        log_group_id=__ret__.log_group_id,
        name=__ret__.name,
        status=__ret__.status,
        user_domains=__ret__.user_domains)


@_utilities.lift_output_func(get_api_gateway)
def get_api_gateway_output(api_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                           folder_id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
