[package]
name = "polars-core"
version = "0.32.0"
authors = ["Ritchie Vink <ritchie46@gmail.com>"]
edition = "2021"
homepage = "https://www.pola.rs/"
license = "MIT"
repository = "https://github.com/pola-rs/polars"
description = "Core of the Polars DataFrame library"
resolver = "2"

[dependencies]
polars-arrow = { version = "0.32.0", path = "../polars-arrow", features = ["compute"] }
polars-error = { version = "0.32.0", path = "../polars-error" }
polars-row = { version = "0.32.0", path = "../polars-row" }
polars-utils = { version = "0.32.0", path = "../polars-utils" }
comfy-table = { version = "7.0.1", default_features = false, optional = true }
itoap = { version = "1", optional = true, features = ["simd"] }
ndarray = { version = "0.15", optional = true, default_features = false }
rand_distr = { version = "0.4", optional = true }
ahash = "0.8"
bitflags = "2"
chrono = { version = "0.4", default-features = false, features = ["std"] , optional = true }
chrono-tz = { version = "0.8.1", optional = true }
either = "1.8"
hashbrown = { version = "0.14", features = ["rayon", "ahash"] }
indexmap = { version = "2", features = ["std"] }
num-traits = "0.2"
object_store = { version = "0.7", default-features = false , optional = true }
once_cell = "1"
rand = { version = "0.8", optional = true, features = ["small_rng", "std"] }
rayon = "1.6"
regex = { version = "1.7.1", optional = true }
serde = { version = "1.0.160", optional = true , features = ["derive"] }
serde_json = { version = "1", optional = true }
smartstring = "1"
thiserror = "1"
url = { version = "2.3.1", optional = true }
xxhash-rust = { version = "0.8.6", features = ["xxh3"] }

[dependencies.arrow]
package = "arrow2"
git = "https://github.com/jorgecarleitao/arrow2"
rev = "7c93e358fc400bf3c0c0219c22eefc6b38fc2d12"
# branch = ""
# version = "0.17.4"
default-features = false
features = [
  "compute_aggregate",
  "compute_arithmetics",
  "compute_boolean",
  "compute_boolean_kleene",
  "compute_cast",
  "compute_comparison",
  "compute_concatenate",
  "compute_filter",
  "compute_if_then_else",
]

[build-dependencies]
version_check = "0.9.4"

[features]
simd = ["arrow/simd", "polars-arrow/simd"]
nightly = ["simd", "hashbrown/nightly", "polars-utils/nightly", "polars-arrow/nightly"]
avx512 = []
docs = []
temporal = ["regex", "chrono", "polars-error/regex"]
random = ["rand", "rand_distr"]
algorithm_join = []
algorithm_group_by = []
default = ["algorithm_join", "algorithm_group_by"]
lazy = []

# ~40% faster collect, needed until trustedlength iter stabilizes
# more fast paths, slower compilation
performant = ["polars-arrow/performant", "reinterpret"]

# extra utilities for Utf8Chunked
strings = ["regex", "polars-arrow/strings", "arrow/compute_substring", "polars-error/regex"]
# support for ObjectChunked<T> (downcastable Series of any type)
object = ["serde_json"]

fmt = ["comfy-table/tty"]
fmt_no_tty = ["comfy-table"]

# opt-in features
# sort by multiple columns
sort_multiple = []
# create from row values
# and include pivot operation
rows = []

# operations
zip_with = []
round_series = []
checked_arithmetic = []
repeat_by = []
is_first_distinct = []
is_last_distinct = []
asof_join = []
cross_join = []
dot_product = []
concat_str = []
row_hash = []
reinterpret = []
take_opt_iter = []
mode = []
# allow group_by operation on list type
group_by_list = []
# cumsum, cummin, etc.
cum_agg = []
# rolling window functions
rolling_window = []
rank = []
diff = []
pct_change = ["diff"]
moment = []
diagonal_concat = []
horizontal_concat = []
abs = []
ewma = []
dataframe_arithmetic = []
product = []
unique_counts = []
partition_by = []
semi_anti_join = []
chunked_ids = []
describe = []
timezones = ["chrono-tz", "arrow/chrono-tz", "polars-arrow/timezones"]
dynamic_group_by = ["dtype-datetime", "dtype-date"]

# opt-in datatypes for Series
dtype-date = ["temporal"]
dtype-datetime = ["temporal"]
dtype-duration = ["temporal"]
dtype-time = ["temporal"]
dtype-array = ["polars-arrow/dtype-array"]
dtype-i8 = []
dtype-i16 = []
dtype-decimal = ["dep:itoap", "polars-arrow/dtype-decimal"]
dtype-u8 = []
dtype-u16 = []
dtype-categorical = []
dtype-struct = []

parquet = ["arrow/io_parquet"]

# scale to terabytes?
bigidx = ["polars-arrow/bigidx"]
python = []

serde = ["dep:serde", "smartstring/serde", "bitflags/serde"]
serde-lazy = ["serde", "polars-arrow/serde", "indexmap/serde", "smartstring/serde", "chrono/serde"]

docs-selection = [
  "ndarray",
  "rows",
  "docs",
  "strings",
  "object",
  "lazy",
  "temporal",
  "random",
  "zip_with",
  "round_series",
  "checked_arithmetic",
  "repeat_by",
  "is_first_distinct",
  "is_last_distinct",
  "asof_join",
  "cross_join",
  "dot_product",
  "concat_str",
  "row_hash",
  "mode",
  "cum_agg",
  "rolling_window",
  "diff",
  "moment",
  "dtype-categorical",
  "dtype-decimal",
  "rank",
  "diagonal_concat",
  "horizontal_concat",
  "abs",
  "dataframe_arithmetic",
  "product",
  "unique_counts",
  "describe",
  "chunked_ids",
  "semi_anti_join",
  "partition_by",
  "algorithm_join",
  "algorithm_group_by",
]

# Cloud support.
"async" = ["url", "object_store"]
"aws" = ["async", "object_store/aws"]
"azure" = ["async", "object_store/azure"]
"gcp" = ["async", "object_store/gcp"]

[package.metadata.docs.rs]
# not all because arrow 4.3 does not compile with simd
# all-features = true
features = ["docs-selection"]
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]
