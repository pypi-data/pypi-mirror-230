# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['ASPEC', 'DSPEC', 'SPECS', 'SKIND', 'DKIND', 'ATTRSPECS', 'Spec', 'setkwsdef', 'readonlymeta', 'specabc', 'spec',
           'aspec']

# %% ../nbs/00_core.ipynb 4
import copy, itertools
from abc import ABC, ABCMeta
from typing import Any, Tuple
from enum import StrEnum, auto
from atyp import AnyQ

# %% ../nbs/00_core.ipynb 5
from ispec.utils import (getattrs, kwsopt, kwsobj, arg1st, inscls, objtype)
from ispec.types import AttrSpec, islist, isdict, istuple, isallstr, iscls

from ispec.utils import (setkwsattr, insclsattr)
from ispec.dyn import (
    getattrname, setattrname, getdattr, setdattr, 
    setattrval, update_dattr, setkwsdattr
)

# %% ../nbs/00_core.ipynb 7
ASPEC: str = 'aspec'
DSPEC: str = 'dspec'
SPECS: str = 'specs'

SKIND: set = {'static',  'attr',  ASPEC, 's',  'a'}
DKIND: set = {'dynamic', 'dattr', DSPEC, 'dyn', 'd', }
# MKIND = {'mutable', 'mattr', 'mspec', 'mut', 'm', }

ATTRSPECS: set = {ASPEC, DSPEC }

# %% ../nbs/00_core.ipynb 9
class Spec(StrEnum):
    '''
    Enumeration class that contains attribute specification keys.

    Attributes
    ----------
    aspec : str
        Key for attribute specification.
    dspec : str
        Key for dynamic attribute specification.
    '''    
    aspec = auto()
    dspec = auto()

    @classmethod
    def specs(cls) -> Tuple[str]:
        '''Returns a tuple of all the values.'''
        return tuple(list(map(lambda e: e.value, cls)))

Spec.specs()

# %% ../nbs/00_core.ipynb 12
def setkwsdef(obj: AnyQ = None, **kwargs):
    '''Sets default keyword arguments based on the object's specifications (`aspec` and `dspec`).

    Parameters
    ----------
    obj : Any
        The object whose specifications are considered.

    inplace : bool, default: False
        Whether to modify the passed kwargs in place or return a new dictionary.

    **kwargs : dict
        Initial keyword arguments.

    Other Parameters
    ----------------
    __skind__ : set, default: SKIND
        Set of keys that are considered static attributes.
        i.e. `{'static',  'attr',  'aspec', 's',  'a'}`
    
    __dkind__ : set, default: DKIND
        Set of keys that are considered dynamic attributes.
        i.e. `{'dynamic', 'dattr', 'dspec', 'dyn', 'd', }`

    __attrspecs__ : set, default: ATTRSPECS
        Set of keys that are considered attribute specifications.
        i.e. `{'aspec', 'dspec', }`

    Returns
    -------
    kws: dict
        Dictionary of keyword arguments with defaults filled in.

    Notes
    -----
    Assumes that the object has the following attributes:
    - `aspec` : attribute specification
    - `dspec` : dynamic attribute specification
    - `specs` : list of specifications

    Examples
    --------
    >>> class foo:
    >>>     specs = ('aspec', 'dspec',)
    >>>     aspec = ('bar', 'baz')
    >>>     dspec = ('baz', )
    >>> 
    >>>     bar = 'bar'
    >>>     baz = 'qix'
    >>>     qix = 'qux'
    >>> setkwsdef(foo, inplace=False, dict())
    >>> {'bar': 'bar', 'baz': 'qix', 'qix': 'qux'}
    
    '''
    __skind__ = kwargs.get('__skind__', SKIND)
    __dkind__ = kwargs.get('__dkind__', DKIND)
    __specs__ = kwargs.get('__attrspecs__', ATTRSPECS)

    kws = kwargs if kwargs.get('inplace', False) else kwargs.copy()
    
    specs = getattr(obj, 'specs', [])
    for spec in specs:
        if spec not in __specs__: continue        
        
        attrs = getattr(obj, spec, [])
        for attr in attrs:            
            if spec in __skind__:
                kws = setkwsattr(obj, attr, **kws)
            elif spec in __dkind__:
                kws = setkwsdattr(obj, attr, **kws)        
    return kws

# %% ../nbs/00_core.ipynb 16
class readonlymeta(ABCMeta):
    '''
    A meta-class that extends ABCMeta to make certain attributes read-only.
    
    Methods
    -------
    __new__(cls, name, bases, dct) -> readonlymeta
        Create and return a new object of the defined class.
    '''
    def __new__(cls, name, bases, dct):
        '''
        Create and return a new object of the defined class.
        
        Parameters
        ----------
        name : str
            Name of the new class.
        bases : tuple
            Tuple of base classes.
        dct : dict
            Dictionary of class attributes and methods.
        
        Returns
        -------
        readonlymeta
            A new object of the defined class.
        '''
        new_cls = super().__new__(cls, name, bases, dct)
        new_cls.__slots__ = tuple(set(getattr(new_cls, '__slots__', ())) | {'aspec', 'dspec'})
        return new_cls

# %% ../nbs/00_core.ipynb 18
class specabc(ABC, metaclass=readonlymeta):
    '''
    Abstract base class for attribute specifications with read-only meta class.
    
    Methods
    -------
    __init_subclass__(*args, **kwargs) -> None
        Ensures that subclasses have an appropriate `aspec` defined.
    '''
    __readonly__ = ()
    def __init_subclass__(cls, *args, **kwargs):       
        '''
        Ensures that subclasses have an appropriate `aspec` defined.
        
        Checks if the 'aspec' attribute is defined and validates it.
        It also takes care of `dspec` if it is provided in kwargs.
        
        Parameters
        ----------
        args : tuple
            Positional arguments.
        kwargs : dict
            Keyword arguments.
        
        Raises
        ------
        TypeError
            If `aspec` is not an iterable of strings or a dictionary of str: Any.
        '''  
        
        # Check if 'aspec' is defined and valid
        super().__init_subclass__(*args, **kwargs)

        if not hasattr(cls, 'specs'): return 
        for spec in cls.specs:
            attrs = kwsobj(cls, spec, **kwargs)
            if not isinstance(attrs, (list, tuple, dict)):
                raise TypeError(f"{spec} must be either an iterable of strings or a dictionary of str: Any, got {type(attrs)}")
            
            if istuple(attrs) and not isallstr(attrs):
                raise TypeError(f"If type({spec}) == tuple, all items must be strings")
            
            if isdict(attrs) and not isallstr(attrs.keys()):
                raise TypeError(f"If type({spec}) == dict, all keys must be strings")
        
            # Read-only property for {a | d}-spec
            if kwargs.get(spec, None):
                setattr(cls, spec, kwargs[spec])


    def __setattr__(self, name, value):
        '''
        Set the class attribute if it's not read-only.
        
        Parameters
        ----------
        name : str
            The name of the attribute.
            
        value : Any
            The value to set the attribute to.
        
        Raises
        ------
        AttributeError
            If the attribute is read-only.
        '''
        if name in self.__readonly__:
            if not hasattr(self, '_allow_set_readonly'):
                raise AttributeError(f"can't set attribute '{name}'")
        super().__setattr__(name, value)

    
    def __copy__(self):
        '''
        Return a shallow copy of the instance.

        Returns
        -------
        object
            A new instance of the class with shallow-copied attributes.
        '''
        new_obj = type(self).__new__(type(self))
        new_obj.__dict__.update(self.__dict__)
        return new_obj

    def __deepcopy__(self, memo):
        '''
        Return a deep copy of the instance.
        
        Parameters
        ----------
        memo : dict
            A dictionary of objects already copied during the current copying pass.

        Returns
        -------
        object
            A new instance of the class with deeply copied attributes.
        '''
        new_obj = type(self).__new__(type(self))
        memo[id(self)] = new_obj
        for k, v in self.__dict__.items():
            setattr(new_obj, k, copy.deepcopy(v, memo))
        return new_obj

# %% ../nbs/00_core.ipynb 20
class spec(specabc):
    '''Base class mixin with attribute utilities.
    
    Attributes
    ----------
    specs: {(), ('aspec', 'dspec), ('aspec', ), ('dspec', ), }
        The attribute specifications to use.
        
    __readonly__ : {(), ('aspec', 'dspec), ('aspec', ), ('dspec', ), }
        Attributes that cannot be set.

    attrs : dict
        A dictionary containing the instance attributes determined by 
        the specs in `specs` e.g. `aspec` and / or `dspec`.
        This is a read-only property.

    clsname : str
        The name of the class. This is a read-only property.

    Methods
    -------
    __setattr__(name, value):
        Set the class attribute if it's not read-only.

    getattrkeys(spec: str, dyn: bool = False) -> tuple[str, ...]:
        Return attribute keys stored in `spec`.

    getattrvals(self, spec: str, dyn: bool = False) -> tuple[Any, ...]:
        Return default attribute values stored in `spec`.
    
    skeys() -> tuple[str, ...]:
        Return all attribute keys stored for each spec stored in `specs`.

    svals() -> tuple[str, ...]:
        Return default attribute values stored for each spec stored in `specs`.
    
    getattrs(**kwargs):
        Get instance parameters with optional overrides.
        
    makesame(*args, **kwargs):
        Call class constructor with the same attributes as the current instance.
    
    isinst(other):
        Check if the provided value is an instance of this class.
        
    sameattrs(other):
        Check if the provided value is an instance of this class with the same attributes.
        
    diffattrs(other):
        Check if the provided value is an instance of this class with different attributes.

    getattrname(dattr: str) -> str:
        Get the name of the dynamic attribute.
    
    getdattr(dattr: str, default: Any = None) -> Any:
        Get the value of the dynamic attribute.

    setdattr(dattr: str, value: Any = None):
        Set the value of the dynamic attribute.

    update_attrname(dattr: str, **kwargs):
        Update the name of the dynamic attribute.
    
    update_dattrval(aname: str, **kwargs):
        Update the value of the dynamic attribute.
    
    update_dattr(dattr: str, **kwargs):
        Update the name and value of the dynamic attribute.

    update_aspec(**kwargs):
        Update the attribute specification.

    update_dspec(**kwargs):
        Update the dynamic attribute specification.

    update_specs(**kwargs):
        Update the specifications in `specs` e.g. `aspec` and / or `dspec`.

    getclsattr(attr: str, default: Any = None) -> Any:
        Get the value of the class attribute.

    setclsattr(attr: str, val: Any = None):
        Set the value of the class attribute.

    copy():
        Return a shallow copy of the instance.
    
    deepcopy():
        Return a deep copy of the instance.

    setkwsdef(obj: Any = None, **kwargs) -> dict:
        Sets default keyword arguments based on the object's specifications (`aspec` and `dspec`).

    setkwsclsdef(**kwargs) -> dict:
        Give kwargs default values for attributes in the class's specs.

    setkwsinsdef(**kwargs) -> dict:
        Give kwargs default values for attributes in the instance's specs.

    Raises
    ------
    AttributeError
        If the attribute is read-only.
    '''
    specs: Tuple[str] = ()
    __readonly__: Tuple[str] = ()

    def __init__(self, *args, **kwargs):
        '''Initialize the spec object and update its attributes based on 'aspec' and 'dspec'.

        Parameters
        ----------
        *args : tuple
            Positional arguments.
        **kwargs : dict
            Keyword arguments.

        Returns
        -------
        None
        '''
        self.update_specs(**kwargs)

    def getattrkeys(self, spec: str, dyn: bool = False) -> Tuple[str]:
        '''
        Return attribute keys stored in `aspec`.

        Parameters
        ----------
        spec : str
            The attribute specification to use.
        dyn : bool, default: False
            If True, return the dynamic attribute keys.
        
        Returns
        -------
        tuple
            A tuple containing the keys in `aspec`.
        '''
        keys = ()
        spec = getattr(self, spec, None)
        if spec is None:     pass
        elif isdict(spec):   keys = tuple(spec.keys())
        elif islist(spec):   keys = tuple(spec)
        elif istuple(spec):  keys = tuple(spec)
        elif isallstr(spec): keys = tuple(spec)
        else:                pass

        if dyn: keys = tuple(getattrs(self, keys).values())
        
        return keys
    
    def getattrvals(self, spec: str, dyn: bool = False) -> Tuple[str]:
        '''
        Return default attribute values stored in `spec`.
        
        Returns
        -------
        tuple
            A tuple containing the default attribute values.
        '''        
        keys = self.getattrkeys(spec, dyn=dyn)
        spec = getattr(self, spec, None)
        if isinstance(spec, dict): return tuple(spec.values())
        else:                      return tuple([None] * len(keys))
        
    def skeys(self) -> Tuple[str]:
        '''
        Return all attribute keys stored for each spec stored in `specs`.
        
        Returns
        -------
        tuple
            A tuple containing the keys in `aspec` and `dspec`.
        '''        
        return tuple(itertools.chain(*(
            self.getattrkeys(spec, dyn=spec.startswith('d')) 
            for spec in self.specs
        )))
    
    def svals(self) -> tuple:
        '''
        Return default attribute values stored for each spec stored in `specs`.        
        
        Returns
        -------
        tuple
            A tuple containing the default attribute values.
        '''
        return tuple(itertools.chain(*(
            self.getattrvals(spec, dyn=spec.startswith('d')) 
            for spec in self.specs
        )))
        
    def getattrs(self, **kwargs) -> dict:
        '''
        Get instance parameters with optional overrides.
        
        Parameters
        ----------
        kwargs : dict
            Dictionary containing overrides for the instance attributes.
        
        Returns
        -------
        dict
            A dictionary containing the instance attributes.
        '''        
        return kwsopt(self.attrs, **getattrs(kwargs, self.skeys()))
     
    def makesame(self, *args, **kwargs):
        '''
        Call class constructor with the same attributes as the current instance.
        
        Parameters
        ----------
        args : Any
            Positional arguments to pass to the class constructor.
            
        kwargs : Any
            Keyword arguments to pass to the class constructor.
            
        Returns
        -------
        object
            A new instance of the class with the same attributes.
        '''
        return type(self)(*args, **self.getattrs(**kwargs))
    
    @classmethod
    def isinst(cls, other: AnyQ) -> bool:
        '''
        Check if the provided value is an instance of this class.
        
        Parameters
        ----------
        other : Any
            The object to check.
            
        Returns
        -------
        bool
            True if `other` is an instance of this class, otherwise False.
        '''
        return isinstance(other, cls)

    def sameattrs(self, other: AnyQ) -> bool:
        '''
        Check if the provided value is an instance of this class with the same attributes.
        
        Parameters
        ----------
        other : Any
            The object to check against.
            
        Returns
        -------
        bool
            True if `other` is an instance with the same attributes, otherwise False.
        '''
        if self.isinst(other): return self.attrs == other.attrs
        return False
    
    def diffattrs(self, other: AnyQ) -> bool:
        '''
        Check if the provided value is an instance of this class with different attributes.
        
        Parameters
        ----------
        other : Any
            The object to check against.
            
        Returns
        -------
        bool
            True if `other` is an instance with different attributes, otherwise False.
        '''
        return not self.sameargs(other)

    @property
    def attrs(self) -> dict:
        '''
        Fetches the values of attributes as specified in `aspec`.
        
        Returns
        -------
        dict
            A dictionary containing the instance attributes.
        '''      
        return getattrs(self, self.skeys(), self.svals())
    @attrs.setter
    def attrs(self, value):
        '''
        Raises
        ------
        AttributeError
            Attempting to set the 'attrs' property will raise an AttributeError.
        '''
        raise AttributeError("Cannot set the 'attrs' property")

    @property    
    def clsname(self) -> str:
        '''
        The name of the class.
        
        Returns
        -------
        str
            The class name.
        '''     
        return type(self).__name__
    @clsname.setter
    def clsname(self, value):
        '''
        Raises
        ------
        AttributeError
            Attempting to set the 'clsname' property will raise an AttributeError.
        '''
        raise AttributeError("Cannot set the 'clsname' property")
    
    def getattrname(self, dattr: str) -> str:
        '''
        Get the name of the dynamic attribute.
        
        Parameters
        ----------
        dattr : str
            The name of the dynamic attribute.
            
        Returns
        -------
        name : str, None
            The name of the dynamic attribute.
        '''
        return getattr(self, dattr, None)

    def getdattr(self, dattr: str, default: AnyQ = None) -> AnyQ:        
        ''' Fetch the value of a dynamic attribute based on its name.
        i.e. `getattr(self, getattr(self, dattr), default)`

        Parameters
        ----------
        dattr : str
            The dynamic attribute's name.
        default : AnyQ
            The default value to return if the attribute does not exist.

        Returns
        -------
        AnyQ
            The value of the dynamic attribute or default.
        '''
        aname = self.getattrname(dattr)      # get the dyanmic attribute's attribute name
        if aname is None: return default     # if the attr name doesn't exist return default
        return getattr(self, aname, default) # get the dynamic attribute's value
    
    def setdattr(self, dattr: str, value: AnyQ = None):
        '''Set the value of a dynamic attribute based on its name.
        i.e. `setattr(self, getattr(self, dattr), default)`

        Parameters
        ----------
        dattr : str
            The dynamic attribute's name.
        value : AnyQ
            The value to set the attribute to.
        '''
        aname = self.getattrname(dattr) # get the dyanmic attribute's attribute name
        if aname is None: return        # if the attr name doesn't exist return default
        setattr(self, aname, value)     # get the dynamic attribute's value

    def update_attrname(self, dattr: str, **kwargs):
        '''Update the attribute name corresponding to a given dynamic attribute.
        i.e. `setattr(getattr(self, dattr), kwargs.get(dattr, getattr(self, dattr)))`

        Parameters
        ----------
        dattr : str
            Dynamic attribute key.
        **kwargs : dict
            Keyword arguments.

        Returns
        -------
        None
        '''
        cur = self.getattrname(dattr)
        kws = kwargs.get(dattr, None)
        setattr(self, dattr, arg1st(kws, cur))

    def update_dattrval(self, aname: str, **kwargs): 
        '''Update the value of a given dynamic attribute.

        Parameters
        ----------
        aname : str
            Dynamic attribute name.
        **kwargs : dict
            Keyword arguments.
        
        Returns
        -------
        None
        '''       
        if aname is None: return        
        cur = getattr(self, aname, None)
        kws = kwargs.get(aname, None)
        setattr(self, aname, arg1st(kws, cur))

    def update_dattr(self, dattr: str, **kwargs):
        '''Update both the attribute name and its value for a given dynamic attribute.

        Parameters
        ----------
        dattr : str
            Dynamic attribute key.
        **kwargs : dict
            Keyword arguments, which hould contain the dynamic attribute key and a value.
            i.e. `getattr(self, dattr)` should be in kwargs.

        Returns
        -------
        None
        '''
        self.update_attrname(dattr, **kwargs)
        aname = self.getattrname(dattr)
        self.update_dattrval(aname, **kwargs)  

    def update_aspec(self, **kwargs):
        '''Update the attributes defined in the 'aspec'.

        Parameters
        ----------
        **kwargs : dict
            Keyword arguments to update attributes.
        
        Returns
        -------
        None
        '''
        if not hasattr(self, 'aspec'): return
        for attr in self.aspec:
            aval = kwsobj(self, attr, **kwargs)
            setattr(self, attr, aval)

    def update_dspec(self, **kwargs):
        '''Update the attributes defined in the 'dspec'.

        Parameters
        ----------
        **kwargs : dict
            Keyword arguments to update dynamic attributes.

        Returns
        -------
        None
        '''
        if not hasattr(self, 'dspec'): return
        for dattr in self.dspec:
            self.update_dattr(dattr, **kwargs)

    def update_specs(self, **kwargs):
        '''Update both 'aspec' and 'dspec'.

        Parameters
        ----------
        **kwargs : dict
            Keyword arguments to update attributes and dynamic attributes.

        Returns
        -------
        None
        '''
        if not hasattr(self, 'specs'): return 
        for spec in self.specs:
            sval = kwsobj(self, spec, **kwargs)
            setattr(self, spec, sval)
            match spec:
                case 'dspec':
                    self.update_dspec(**kwargs)
                case 'aspec':
                    self.update_aspec(**kwargs)
                case _:
                    pass

    @classmethod
    def getclsattr(cls, attr: str, default: AnyQ = None):
        '''
        Get a class-level attribute.

        Parameters
        ----------
        attr : str
            Name of the class-level attribute.
        default : AnyQ, optional
            Default value to return if attribute is not found.

        Returns
        -------
        AnyQ
            Value of the class attribute, or default value if attribute not found.
        '''
        if not hasattr(cls, attr):
            raise AttributeError(f'Class {cls} has not attribute {attr}')
        return getattr(cls, attr, default)
    
    @classmethod
    def setclsattr(cls, attr: str, val: AnyQ = None):
        '''
        Set a class-level attribute.

        Parameters
        ----------
        attr : str
            Name of the class-level attribute.
        val : AnyQ, optional
            Value to set for the class attribute.
        '''
        if not hasattr(cls, attr): return
        setattr(cls, attr, val)  

    def copy(self):
        return copy.copy(self)
    
    def deepcopy(self):
        return copy.deepcopy(self)
    
    @staticmethod
    def setkwsdef(obj: Any, **kwargs) -> dict:    
        '''Sets default keyword arguments based on the object's specifications (`aspec` and `dspec`).

        Parameters
        ----------
        obj : Any
            The object whose specifications are considered.

        inplace : bool, default: False
            Whether to modify the passed kwargs in place or return a new dictionary.

        **kwargs : dict
            Initial keyword arguments.

        Returns
        -------
        dict
            Dictionary of keyword arguments with defaults filled in.
        '''    
        return setkwsdef(obj, **kwargs)
    
    @classmethod
    def setkwsclsdef(cls, **kwargs) -> dict:
        '''Give kwargs default values for attributes in the class's specs'''
        return setkwsdef(cls, **kwargs)
    
    def setkwsinsdef(self, **kwargs) -> dict:
        '''Give kwargs default values for attributes in the instance's specs'''
        return setkwsdef(self, **kwargs)
    

# %% ../nbs/00_core.ipynb 22
class aspec(spec):
    '''apsec (Attribute SPECification) is a base class with attribute utilities.
    
    Attributes
    ----------
    aspec : list | tuple | dict, optional
        The attribute specification. Must be either an iterable of strings 
        or a dictionary of `str: Any`. Defaults to an empty tuple.
    
    dspec : list | tuple | dict, optional
        The dynamic attribute specification. Must be either an iterable of strings 
        or a dictionary of `str: str`. Defaults to an empty tuple.

    specs: {{('aspec', 'dspec), ('aspec', ), ('dspec', ), (),}
        The attribute specifications to use.
        
    __readonly__ : {('aspec', 'dspec), ('aspec', ), ('dspec', ), (),}
        Attributes that cannot be set.

    attrs : dict
        A dictionary containing the instance attributes determined by 
        the specs in `specs` e.g. `aspec` and / or `dspec`.
        This is a read-only property.

    clsname : str
        The name of the class. This is a read-only property.

    Methods
    -------
    __setattr__(name, value):
        Set the class attribute if it's not read-only.

    getattrkeys(spec: str, dyn: bool = False) -> tuple[str, ...]:
        Return attribute keys stored in `spec`.

    getattrvals(self, spec: str, dyn: bool = False) -> tuple[Any, ...]:
        Return default attribute values stored in `spec`.
    
    skeys() -> tuple[str, ...]:
        Return all attribute keys stored for each spec stored in `specs`.

    svals() -> tuple[str, ...]:
        Return default attribute values stored for each spec stored in `specs`.
    
    getattrs(**kwargs):
        Get instance parameters with optional overrides.
        
    makesame(*args, **kwargs):
        Call class constructor with the same attributes as the current instance.
    
    isinst(other):
        Check if the provided value is an instance of this class.
        
    sameattrs(other):
        Check if the provided value is an instance of this class with the same attributes.
        
    diffattrs(other):
        Check if the provided value is an instance of this class with different attributes.

    getattrname(dattr: str) -> str:
        Get the name of the dynamic attribute.
    
    getdattr(dattr: str, default: Any = None) -> Any:
        Get the value of the dynamic attribute.

    setdattr(dattr: str, value: Any = None):
        Set the value of the dynamic attribute.

    update_attrname(dattr: str, **kwargs):
        Update the name of the dynamic attribute.
    
    update_dattrval(aname: str, **kwargs):
        Update the value of the dynamic attribute.
    
    update_dattr(dattr: str, **kwargs):
        Update the name and value of the dynamic attribute.

    update_aspec(**kwargs):
        Update the attribute specification.

    update_dspec(**kwargs):
        Update the dynamic attribute specification.

    update_specs(**kwargs):
        Update the specifications in `specs` e.g. `aspec` and / or `dspec`.

    getclsattr(attr: str, default: Any = None) -> Any:
        Get the value of the class attribute.

    setclsattr(attr: str, val: Any = None):
        Set the value of the class attribute.

    copy():
        Return a shallow copy of the instance.
    
    deepcopy():
        Return a deep copy of the instance.

    setkwsdef(obj: Any = None, **kwargs) -> dict:
        Sets default keyword arguments based on the object's specifications (`aspec` and `dspec`).

    setkwsclsdef(**kwargs) -> dict:
        Give kwargs default values for attributes in the class's specs.

    setkwsinsdef(**kwargs) -> dict:
        Give kwargs default values for attributes in the instance's specs.

    Raises
    ------
    AttributeError
        If the attribute is read-only.
    '''
    aspec: AttrSpec = ()
    dspec: AttrSpec = ()
    specs: tuple = (Spec.aspec.value, Spec.dspec.value)
    __readonly__ = (Spec.aspec.value, Spec.dspec.value)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
