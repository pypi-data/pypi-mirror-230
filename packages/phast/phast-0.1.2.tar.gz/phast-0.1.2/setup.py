# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['phast']

package_data = \
{'': ['*']}

install_requires = \
['mendeleev>=0.12.1', 'pandas>=1.4', 'torch>=1.11']

setup_kwargs = {
    'name': 'phast',
    'version': '0.1.2',
    'description': '',
    'long_description': '<p align="center">\n<strong><a href="https://github.com/vict0rsch/phast" target="_blank">💻&nbsp;&nbsp;Code</a></strong>\n<strong>&nbsp;&nbsp;•&nbsp;&nbsp;</strong>\n<strong><a href="https://phast.readthedocs.io/" target="_blank">Docs&nbsp;&nbsp;📑</a></strong>\n</p>\n\n<p align="center">\n    <a>\n\t    <img src=\'https://img.shields.io/badge/python-3.8%2B-blue\' alt=\'Python\' />\n\t</a>\n\t<a href=\'https://phast.readthedocs.io/en/latest/?badge=latest\'>\n    \t<img src=\'https://readthedocs.org/projects/phast/badge/?version=latest\' alt=\'Documentation Status\' />\n\t</a>\n    <a href="https://github.com/psf/black">\n\t    <img src=\'https://img.shields.io/badge/code%20style-black-black\' />\n\t</a>\n<a href="https://pytorch.org">\n<img src="https://img.shields.io/badge/PyTorch-%23EE4C2C.svg?logo=PyTorch&logoColor=white"/>\n</a>\n</p>\n<br/>\n\n# PhAST: Physics-Aware, Scalable, and Task-specific GNNs for Accelerated Catalyst Design\n\n\nThis repository contains implementations for 2 of the PhAST components presented in the [paper](https://arxiv.org/abs/2211.12020):\n\n* `PhysEmbedding` that allows one to create an embedding vector from atomic numbers that is the concatenation of:\n  * A learned embedding for the atom\'s group\n  * A learned embedding for the atom\'s period\n  * A fixed or learned embedding from a set of known physical properties, as reported by [`mendeleev`](https://mendeleev.readthedocs.io/en/stable/data.html#elements)\n  * In the case of the OC20 dataset, a learned embedding for the atom\'s tag (adsorbate, catalyst surface or catalyst sub-surface)\n* Tag-based **graph rewiring** strategies for the OC20 dataset:\n  * `remove_tag0_nodes` deletes all nodes in the graph associated with a tag 0 and recomputes edges\n  * `one_supernode_per_graph` replaces all tag 0 atoms with a single new atom\n  * `one_supernode_per_atom_type` replaces all tag 0 atoms *of a given element* with its own super node\n\n    <img src="https://raw.githubusercontent.com/vict0rsch/phast/main/examples/data/rewiring.png" width="600px" />\n\nAlso: https://github.com/vict0rsch/faenet\n\n## Installation\n\n```\npip install phast\n```\n\n⚠️ The above installation does not include `torch_geometric` which is a complex and very variable dependency you have to install yourself if you want to use the graph re-wiring functions of `phast`.\n\n☮️ Ignore `torch_geometric` if you only care about the `PhysEmbeddings`.\n\n## Getting started\n\n### Physical embeddings\n\n![Embedding illustration](https://raw.githubusercontent.com/vict0rsch/phast/main/examples/data/embedding.png)\n\n```python\nimport torch\nfrom phast.embedding import PhysEmbedding\n\nz = torch.randint(1, 85, (3, 12)) # batch of 3 graphs with 12 atoms each\nphys_embedding = PhysEmbedding(\n    z_emb_size=32, # default\n    period_emb_size=32, # default\n    group_emb_size=32, # default\n    properties_proj_size=32, # default is 0 -> no learned projection\n    n_elements=85, # default\n)\nh = phys_embedding(z) # h.shape = (3, 12, 128)\n\ntags = torch.randint(0, 3, (3, 12))\nphys_embedding = PhysEmbedding(\n    tag_emb_size=32, # default is 0, this is OC20-specific\n    final_proj_size=64, # default is 0, no projection, just the concat. of embeds.\n)\n\nh = phys_embedding(z, tags) # h.shape = (3, 12, 64)\n\n# Assuming torch_geometric is installed:\ndata = torch.load("examples/data/is2re_bs3.pt")\nh = phys_embedding(data.atomic_numbers.long(), data.tags) # h.shape = (261, 64)\n```\n\n### Graph rewiring\n\n![Rewiring illustration](https://raw.githubusercontent.com/vict0rsch/phast/main/examples/data/rewiring.png)\n\n```python\nfrom copy import deepcopy\nimport torch\nfrom phast.graph_rewiring import (\n    remove_tag0_nodes,\n    one_supernode_per_graph,\n    one_supernode_per_atom_type,\n)\n\ndata = torch.load("./examples/data/is2re_bs3.pt")  # 3 batched OC20 IS2RE data samples\nprint(\n    "Data initially contains {} graphs, a total of {} atoms and {} edges".format(\n        len(data.natoms), data.ptr[-1], len(data.cell_offsets)\n    )\n)\nrewired_data = remove_tag0_nodes(deepcopy(data))\nprint(\n    "Data without tag-0 nodes contains {} graphs, a total of {} atoms and {} edges".format(\n        len(rewired_data.natoms), rewired_data.ptr[-1], len(rewired_data.cell_offsets)\n    )\n)\nrewired_data = one_supernode_per_graph(deepcopy(data))\nprint(\n    "Data with one super node per graph contains a total of {} atoms and {} edges".format(\n        rewired_data.ptr[-1], len(rewired_data.cell_offsets)\n    )\n)\nrewired_data = one_supernode_per_atom_type(deepcopy(data))\nprint(\n    "Data with one super node per atom type contains a total of {} atoms and {} edges".format(\n        rewired_data.ptr[-1], len(rewired_data.cell_offsets)\n    )\n)\n```\n\n```\nData initially contains 3 graphs, a total of 261 atoms and 11596 edges\nData without tag-0 nodes contains 3 graphs, a total of 64 atoms and 1236 edges\nData with one super node per graph contains a total of 67 atoms and 1311 edges\nData with one super node per atom type contains a total of 71 atoms and 1421 edges\n```\n\n## Tests\n\nThis requires [`poetry`](https://python-poetry.org/docs/). Make sure to have `torch` and `torch_geometric` installed in your environment before you can run the tests. Unfortunately because of CUDA/torch compatibilities, neither `torch` nor `torch_geometric` are part of the explicit dependencies and must be installed independently.\n\n```bash\ngit clone git@github.com:vict0rsch/phast.git\npoetry install --with dev\npytest --cov=phast --cov-report term-missing\n```\n\nTesting on Macs you may encounter a [Library Not Loaded Error](https://github.com/pyg-team/pytorch_geometric/issues/6530)\n\nRequires Python <3.12 because\n\n```txt\nmendeleev (0.14.0) requires Python >=3.8.1,<3.12\n```',
    'author': 'Victor Schmidt',
    'author_email': 'vsch@pm.me',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8.1,<3.12',
}


setup(**setup_kwargs)
