{"version":3,"file":"717.69cb091ac661ad89494d.js?v=69cb091ac661ad89494d","mappings":"2iGAsBO,MAAMA,EAAO,8BACPC,EAAU,QAEVC,EAAQ,MACRC,EAAQC,OAAOC,SAASC,KAAKC,SAAS,oBAEtCC,EAAM,CACjBC,OAAQ,iBAGGC,EAA8BC,OAAOC,OAAO,CACvDC,MAAO,GACPC,MAAO,KAGIC,EAAkB,CAC7BC,GAAI,KACJC,OAAQ,SACRC,OAAQ,UAGGC,EAAwB,IAExBC,EAAiB,CAC5BC,SAAU,2BACVC,KAAM,0BACNC,KAAM,wBACNC,WAAY,sBAGDC,EAAiB,CAC5BF,KAAM,EACNF,SAAU,EACVC,KAAM,GAGKI,EAAqB,CAChCH,KAAM,EACNF,SAAU,MAGCM,EAAsB,CACjCJ,KAAM,GACNF,SAAU,MAGCO,EAAkB,CAC7BC,cAAe7B,EACf8B,sBAAuB7B,EACvB8B,aAAc/B,EACdgC,qBAAsB/B,GAIxB,IAAYgC,EAuDAC,GAvDZ,SAAYD,GACV,yBACA,uBACA,2BACA,uBACA,0BACD,CAND,CAAYA,IAAAA,EAAO,KAuDnB,SAAYC,GACV,mCACA,mCACA,2CACA,yCACA,mCACA,mEACA,qEACA,qEACA,yEACA,yEACA,0EACA,kEACA,kCACA,kDACA,gDACA,yCACD,CAjBD,CAAYA,IAAAA,EAAiB,KAmBtB,MAAMC,EAAmB,CAC9BC,aAAcF,EAAkBE,aAChCC,aAAcH,EAAkBG,aAChCC,iBAAkBJ,EAAkBI,iBACpCC,gBAAiBL,EAAkBK,gBACnCC,aAAcN,EAAkBM,aAChCC,6BAA8BP,EAAkBO,6BAChDC,8BAA+BR,EAAkBQ,8BACjDC,8BAA+BT,EAAkBS,8BACjDC,gCAAiCV,EAAkBU,gCACnDC,gCAAiCX,EAAkBW,gCACnDC,gCAAiCZ,EAAkBY,gCACnDC,4BAA6Bb,EAAkBa,4BAC/CC,YAAad,EAAkBc,YAC/BC,oBAAqBf,EAAkBe,oBACvCC,mBAAoBhB,EAAkBgB,mBACtCC,gBAAiBjB,EAAkBiB,iBAIrC,IAAYC,GAAZ,SAAYA,GACV,mCACA,mCACA,iCACA,iDACA,+CACA,gCACD,CAPD,CAAYA,IAAAA,EAAiB,KAStB,MAAMC,EAAmB,CAC9BC,aAAcF,EAAkBE,aAChCC,aAAcH,EAAkBG,aAChCC,YAAaJ,EAAkBI,YAC/BC,oBAAqBL,EAAkBK,oBACvCC,mBAAoBN,EAAkBM,mBACtCC,YAAaP,EAAkBO,aAIjC,IAAYC,GAAZ,SAAYA,GACV,2BACA,sBACD,CAHD,CAAYA,IAAAA,EAAkB,KAIvB,MAAMC,EAAoB,CAC/BC,SAAUF,EAAmBE,SAC7BC,OAAQH,EAAmBG,QAiGhBC,EAAarD,OAAOC,OAAO,IAC3BqD,EAAwBtD,OAAOC,OAAO,CACjDE,MAAOkD,EACPnD,MAAOmD,IAgBIE,EAASvD,OAAOC,OAAO,CAClC,GACA,KACA,KACA,KACA,MACA,IACA,QACA,MACA,OACA,SAGF,IAAYuD,EAaAC,GAbZ,SAAYD,GACV,gBACA,oBACA,kBACD,CAJD,CAAYA,IAAAA,EAAO,KAanB,SAAYC,GACV,cACA,aACD,CAHD,CAAYA,IAAAA,EAAK,KAeV,MAAMC,EAAoC,CAAEC,MAAO,IAAKC,KAAM,W","sources":["webpack://@jupyrdf/jupyter-forcegraph/./js/tokens.ts"],"sourcesContent":["/*\n * Copyright (c) 2023 ipyforcegraph contributors.\n * Distributed under the terms of the Modified BSD License.\n */\nimport type d3Force3d from 'd3-force-3d';\nimport type {\n  ForceGraphInstance,\n  GraphData,\n  LinkObject,\n  NodeObject,\n} from 'force-graph';\nimport type THREE from 'three';\n\nimport type { Throttler } from '@lumino/polling';\nimport type { ISignal } from '@lumino/signaling';\n\nimport type { DOMWidgetView, WidgetModel } from '@jupyter-widgets/base';\n\nimport type { ForceGraphModel } from './widgets';\n\n// previously these were sourced from `package.json`, but this creates\n// unreproducible webpack outputs\nexport const NAME = '@jupyrdf/jupyter-forcegraph';\nexport const VERSION = '0.4.1';\n\nexport const EMOJI = 'üï∏Ô∏è';\nexport const DEBUG = window.location.href.includes('FORCEGRAPH_DEBUG');\n\nexport const CSS = {\n  widget: 'jp-ForceGraph',\n};\n\nexport const EMPTY_GRAPH_DATA: GraphData = Object.freeze({\n  links: [],\n  nodes: [],\n});\n\nexport const DEFAULT_COLUMNS = {\n  id: 'id',\n  source: 'source',\n  target: 'target',\n};\n\nexport const DEFAULT_BEHAVIOR_RANK = 100;\n\nexport const DEFAULT_COLORS = {\n  selected: 'rgba(179, 163, 105, 1.0)',\n  node: 'rgba(31, 120, 179, 1.0)',\n  link: 'rgba(66, 66, 66, 0.5)',\n  background: 'rgba(0, 0, 0, 0.0)',\n};\n\nexport const DEFAULT_WIDTHS = {\n  link: 1,\n  selected: 2,\n  node: 1,\n};\n\nexport const DEFAULT_CURVATURES = {\n  link: 0,\n  selected: null,\n};\n\nexport const DEFAULT_LINE_DASHES = {\n  link: [],\n  selected: null,\n};\n\nexport const WIDGET_DEFAULTS = {\n  _model_module: NAME,\n  _model_module_version: VERSION,\n  _view_module: NAME,\n  _view_module_version: VERSION,\n};\n\n//  Using bit flags for the TUpdateKind number\nexport enum EUpdate {\n  Unknown = 0,\n  Reheat = 1 << 0,\n  Cosmetic = 1 << 1,\n  Render = 1 << 2,\n  Behavior = 1 << 3,\n}\nexport type TUpdateKind = void | number;\n\nexport interface IUpdateGraphCameraOptions {\n  graph: ForceGraphInstance;\n  iframeClasses?: Record<string, any>;\n}\n\nexport interface IBehave extends WidgetModel {\n  rank: number;\n  updateRequested: ISignal<IBehave, TUpdateKind>;\n  extraColumns?: IExtraColumns;\n\n  // custom signals\n  graphDataUpdateRequested: ISignal<IBehave, void>;\n  updateGraphData?(graphData: GraphData): Promise<void>;\n\n  // custom signals\n  graphCameraUpdateRequested: ISignal<IBehave, void>;\n  updateGraphCamera?(options: IUpdateGraphCameraOptions): Promise<void>;\n\n  // link\n  getLinkCanvasObject?(options: ILinkCanvasBehaveOptions): any;\n  getLinkColor?(options: ILinkBehaveOptions): string | null;\n  getLinkCurvature?(options: ILinkBehaveOptions): number | null;\n  getLinkDirectionalArrowColor?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalArrowLength?(options: ILinkBehaveOptions): number | null;\n  getLinkDirectionalArrowRelPos?(options: ILinkBehaveOptions): number | null;\n  getLinkDirectionalParticleColor?(options: ILinkBehaveOptions): string | null;\n  getLinkDirectionalParticles?(options: ILinkBehaveOptions): number | null;\n  getLinkDirectionalParticleSpeed?(options: ILinkBehaveOptions): number | null;\n  getLinkDirectionalParticleWidth?(options: ILinkBehaveOptions): number | null;\n  getLinkLabel?(options: ILinkBehaveOptions): string | null;\n  getLinkLineDash?(options: ILinkBehaveOptions): number[] | null;\n  getLinkThreeObject?(options: ILinkThreeBehaveOptions): THREE.Object3D | null;\n  getLinkWidth?(options: ILinkBehaveOptions): number | null;\n  getLinkPosition?(options: ILinkThreeBehaveOptions): void;\n  // node\n  getNodeCanvasObject?(options: INodeCanvasBehaveOptions): any;\n  getNodeColor?(options: INodeBehaveOptions): string | null;\n  getNodeLabel?(options: INodeBehaveOptions): string | null;\n  getNodeSize?(options: INodeBehaveOptions): number | null;\n  getNodeThreeObject?(options: INodeThreeBehaveOptions): THREE.Object3D | null;\n  // evented\n  onLinkClick?(options: ILinkEventBehaveOptions): boolean;\n  onNodeClick?(options: INodeEventBehaveOptions): boolean;\n  onRender?(options: IRenderOptions): void;\n  onZoom?(zoomData: IZoomData): void;\n}\nexport enum ELinkBehaveMethod {\n  getLinkLabel = 0,\n  getLinkColor = 1,\n  getLinkCurvature = 2,\n  getLinkLineDash = 3,\n  getLinkWidth = 4,\n  getLinkDirectionalArrowColor = 5,\n  getLinkDirectionalArrowLength = 6,\n  getLinkDirectionalArrowRelPos = 7,\n  getLinkDirectionalParticleColor = 8,\n  getLinkDirectionalParticleSpeed = 9,\n  getLinkDirectionalParticleWidth = 10,\n  getLinkDirectionalParticles = 11,\n  onLinkClick = 12,\n  getLinkCanvasObject = 13,\n  getLinkThreeObject = 14,\n  getLinkPosition = 15,\n}\n\nexport const ALL_LINK_METHODS = {\n  getLinkLabel: ELinkBehaveMethod.getLinkLabel,\n  getLinkColor: ELinkBehaveMethod.getLinkColor,\n  getLinkCurvature: ELinkBehaveMethod.getLinkCurvature,\n  getLinkLineDash: ELinkBehaveMethod.getLinkLineDash,\n  getLinkWidth: ELinkBehaveMethod.getLinkWidth,\n  getLinkDirectionalArrowColor: ELinkBehaveMethod.getLinkDirectionalArrowColor,\n  getLinkDirectionalArrowLength: ELinkBehaveMethod.getLinkDirectionalArrowLength,\n  getLinkDirectionalArrowRelPos: ELinkBehaveMethod.getLinkDirectionalArrowRelPos,\n  getLinkDirectionalParticleColor: ELinkBehaveMethod.getLinkDirectionalParticleColor,\n  getLinkDirectionalParticleSpeed: ELinkBehaveMethod.getLinkDirectionalParticleSpeed,\n  getLinkDirectionalParticleWidth: ELinkBehaveMethod.getLinkDirectionalParticleWidth,\n  getLinkDirectionalParticles: ELinkBehaveMethod.getLinkDirectionalParticles,\n  onLinkClick: ELinkBehaveMethod.onLinkClick,\n  getLinkCanvasObject: ELinkBehaveMethod.getLinkCanvasObject,\n  getLinkThreeObject: ELinkBehaveMethod.getLinkThreeObject,\n  getLinkPosition: ELinkBehaveMethod.getLinkPosition,\n};\nexport type TLinkBehaveMethod = keyof typeof ALL_LINK_METHODS;\n\nexport enum ENodeBehaveMethod {\n  getNodeLabel = 0,\n  getNodeColor = 1,\n  getNodeSize = 2,\n  getNodeCanvasObject = 3,\n  getNodeThreeObject = 4,\n  onNodeClick = 5,\n}\n\nexport const ALL_NODE_METHODS = {\n  getNodeLabel: ENodeBehaveMethod.getNodeLabel,\n  getNodeColor: ENodeBehaveMethod.getNodeColor,\n  getNodeSize: ENodeBehaveMethod.getNodeSize,\n  getNodeCanvasObject: ENodeBehaveMethod.getNodeCanvasObject,\n  getNodeThreeObject: ENodeBehaveMethod.getNodeThreeObject,\n  onNodeClick: ENodeBehaveMethod.onNodeClick,\n};\nexport type TNodeBehaveMethod = keyof typeof ALL_NODE_METHODS;\n\nexport enum EGraphBehaveMethod {\n  onRender = 0,\n  onZoom = 1,\n}\nexport const ALL_GRAPH_METHODS = {\n  onRender: EGraphBehaveMethod.onRender,\n  onZoom: EGraphBehaveMethod.onZoom,\n};\nexport type TGraphBehaveMethod = keyof typeof ALL_GRAPH_METHODS;\n\nexport type TNodeMethodMap = Map<TNodeBehaveMethod, IBehave[]>;\nexport type TLinkMethodMap = Map<TLinkBehaveMethod, IBehave[]>;\nexport type TGraphMethodMap = Map<TGraphBehaveMethod, IBehave[]>;\n\nexport interface IBehaveOptions {\n  view: IHasGraph;\n  graphData: GraphData;\n}\n\nexport interface INodeBehaveOptions extends IBehaveOptions {\n  node: NodeObject;\n}\n\nexport interface INodeCanvasBehaveOptions extends INodeBehaveOptions {\n  context: CanvasRenderingContext2D;\n  globalScale: number;\n}\n\nexport interface INodeThreeBehaveOptions extends INodeBehaveOptions {\n  iframeClasses: Record<string, any>;\n}\n\nexport interface ILinkCanvasBehaveOptions extends ILinkBehaveOptions {\n  context: CanvasRenderingContext2D;\n}\n\nexport interface ILinkThreeBehaveOptions extends ILinkBehaveOptions {\n  iframeClasses: Record<string, any>;\n  sprite?: THREE.Object3D;\n  position?: IThreeLinkPosition;\n}\n\nexport interface INodeEventBehaveOptions extends INodeBehaveOptions {\n  event: MouseEvent;\n  index: number;\n}\n\nexport interface ILinkBehaveOptions extends IBehaveOptions {\n  link: LinkObject;\n  index: number;\n}\n\nexport interface ILinkEventBehaveOptions extends ILinkBehaveOptions {\n  event: MouseEvent;\n}\n\nexport interface IRenderOptions extends IBehaveOptions {\n  context2d?: CanvasRenderingContext2D;\n  renderer3d?: THREE.WebGLRenderer;\n  globalScale?: number;\n  time?: number;\n}\n\nexport interface IHasGraph<T = any> extends DOMWidgetView {\n  graph: T;\n  source: ISource;\n  rendered: Promise<void>;\n  wrapFunction: (fn: Function) => Function;\n  model: ForceGraphModel;\n}\n\nexport interface IPreservedColumns {\n  nodes: string[];\n  links: string[];\n}\n\nexport interface ISource {\n  graphData: GraphData;\n  mergePreserved(\n    graphData: GraphData,\n    oldGraphData: GraphData,\n    preservedColumns: IPreservedColumns\n  ): GraphData | null;\n  dataUpdated: ISignal<ISource, void>;\n}\n\nexport type TAnyForce =\n  | d3Force3d.forceCenter\n  | d3Force3d.forceCollide\n  | d3Force3d.forceLink\n  | d3Force3d.forceManyBody\n  | d3Force3d.forceRadial\n  | d3Force3d.forceSimulation\n  | d3Force3d.forceX\n  | d3Force3d.forceY\n  | d3Force3d.forceZ;\n\nexport interface IForce {\n  forceFactory(): TAnyForce;\n}\n\nexport type TSelectedSet = Set<string | number>;\n\nexport const emptyArray = Object.freeze([]);\nexport const emptyPreservedColumns = Object.freeze({\n  nodes: emptyArray,\n  links: emptyArray,\n}) as IPreservedColumns;\n\nexport interface IDynamicCallable {\n  (...args: any): string;\n}\n\nexport type TCustomAction = 'reheat';\n\nexport interface IActionMessage {\n  action: TCustomAction;\n}\n\n/**\n * Strings that should be interpreted as `false` after being lowercased and trimmed.\n */\nexport const FALSEY = Object.freeze([\n  '',\n  '()',\n  '[]',\n  '{}',\n  '0.0',\n  '0',\n  'false',\n  'nan',\n  'none',\n  'null',\n]);\n\nexport enum ECoerce {\n  array = 'array',\n  boolish = 'boolean',\n  numeric = 'number',\n}\n\nexport type TCoercer = (value: any) => any;\n\nexport interface IExtraColumns {\n  nodes: string[];\n  links: string[];\n}\n\nexport enum EMark {\n  node = 'node',\n  link = 'link',\n}\n\nexport interface IZoomData {\n  x: number;\n  y: number;\n  z?: number;\n  k?: number;\n  lookAt?: THREE.Vector3;\n  graph: ForceGraphInstance;\n  iframeClasses?: Record<string, any>;\n}\n\nexport const THROTTLE_OPTS: Throttler.IOptions = { limit: 200, edge: 'trailing' };\n\nexport interface IThreePoint {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface IThreeLinkPosition {\n  start: IThreePoint;\n  end: IThreePoint;\n}\n"],"names":["NAME","VERSION","EMOJI","DEBUG","window","location","href","includes","CSS","widget","EMPTY_GRAPH_DATA","Object","freeze","links","nodes","DEFAULT_COLUMNS","id","source","target","DEFAULT_BEHAVIOR_RANK","DEFAULT_COLORS","selected","node","link","background","DEFAULT_WIDTHS","DEFAULT_CURVATURES","DEFAULT_LINE_DASHES","WIDGET_DEFAULTS","_model_module","_model_module_version","_view_module","_view_module_version","EUpdate","ELinkBehaveMethod","ALL_LINK_METHODS","getLinkLabel","getLinkColor","getLinkCurvature","getLinkLineDash","getLinkWidth","getLinkDirectionalArrowColor","getLinkDirectionalArrowLength","getLinkDirectionalArrowRelPos","getLinkDirectionalParticleColor","getLinkDirectionalParticleSpeed","getLinkDirectionalParticleWidth","getLinkDirectionalParticles","onLinkClick","getLinkCanvasObject","getLinkThreeObject","getLinkPosition","ENodeBehaveMethod","ALL_NODE_METHODS","getNodeLabel","getNodeColor","getNodeSize","getNodeCanvasObject","getNodeThreeObject","onNodeClick","EGraphBehaveMethod","ALL_GRAPH_METHODS","onRender","onZoom","emptyArray","emptyPreservedColumns","FALSEY","ECoerce","EMark","THROTTLE_OPTS","limit","edge"],"sourceRoot":""}