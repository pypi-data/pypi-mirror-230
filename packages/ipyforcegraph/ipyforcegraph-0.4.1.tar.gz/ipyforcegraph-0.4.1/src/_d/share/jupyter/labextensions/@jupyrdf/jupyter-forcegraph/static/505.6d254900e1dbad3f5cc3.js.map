{"version":3,"file":"505.6d254900e1dbad3f5cc3.js?v=6d254900e1dbad3f5cc3","mappings":"yIAAA,SAASA,IACP,IAOIC,EACFC,EAREC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,WAChF,MAAO,CACLG,EAAG,EACHC,EAAG,EACHC,EAAG,EAEP,EAGEC,EAAe,GACfC,EAAW,GACXC,EAAgB,EAClB,SAASC,EAAMC,GAEb,IAAIC,EAAGR,EAAGC,EAAGC,EAAGO,EAAGC,EADnBH,GAASH,EAAWG,EAEpBZ,EAAMgB,SAAQ,SAAUC,EAAGC,IACzBL,EAAIL,EAAaU,KACPL,IAAMI,IAChBZ,EAAIY,EAAEZ,EAAIQ,EAAER,EACZC,EAAIP,EAAO,EAAIkB,EAAEX,EAAIO,EAAEP,EAAI,EAC3BC,EAAIR,EAAO,EAAIkB,EAAEV,EAAIM,EAAEN,EAAI,EAC3BO,EAAIK,KAAKC,KAAKf,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GAClCQ,EAAIE,EAAEI,QAAUR,EAAEQ,QAAU,GACxBP,GAAKA,IAAMC,IACbD,GAAKA,EAAIC,GAAKD,EAAIF,EAClBK,EAAEZ,GAAKA,GAAKS,EACZD,EAAER,IAAM,EAAIK,GAAiBL,EACzBN,EAAO,IACTkB,EAAEX,GAAKA,GAAKQ,EACZD,EAAEP,IAAM,EAAII,GAAiBJ,GAE3BP,EAAO,IACTkB,EAAEV,GAAKA,GAAKO,EACZD,EAAEN,IAAM,EAAIG,GAAiBH,IAGnC,GACF,CACA,SAASe,IACPd,GAAgBR,GAAS,IAAIuB,IAAItB,EACnC,CAoBA,OAnBAU,EAAMW,WAAa,SAAUE,GAC3BxB,EAAQwB,EACR,IAAK,IAAIC,EAAOvB,UAAUC,OAAQuB,EAAO,IAAIC,MAAMF,EAAO,EAAIA,EAAO,EAAI,GAAIG,EAAO,EAAGA,EAAOH,EAAMG,IAClGF,EAAKE,EAAO,GAAK1B,UAAU0B,GAE7B7B,EAAO2B,EAAKG,MAAK,SAAUC,GACzB,MAAO,CAAC,EAAG,EAAG,GAAGC,SAASD,EAC5B,KAAM,EACNR,GACF,EACAX,EAAMV,QAAU,SAAU+B,GACxB,OAAO9B,UAAUC,QAAUF,EAAU+B,EAAGV,IAAcX,GAASV,CACjE,EACAU,EAAMF,SAAW,SAAUuB,GACzB,OAAO9B,UAAUC,QAAUM,GAAYuB,EAAGrB,GAASF,CACrD,EACAE,EAAMD,cAAgB,SAAUsB,GAC9B,OAAO9B,UAAUC,QAAUO,GAAiBsB,EAAGrB,GAASD,CAC1D,EACOC,CACT,C","sources":["webpack://@jupyrdf/jupyter-forcegraph/./node_modules/d3-force-cluster-3d/dist/d3-force-cluster-3d.mjs"],"sourcesContent":["function cluster () {\n  var centers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n  };\n  var nDim,\n    nodes,\n    centerpoints = [],\n    strength = 0.1,\n    centerInertia = 0.0;\n  function force(alpha) {\n    alpha *= strength * alpha;\n    var c, x, y, z, l, r;\n    nodes.forEach(function (d, i) {\n      c = centerpoints[i];\n      if (!c || c === d) return;\n      x = d.x - c.x;\n      y = nDim > 1 ? d.y - c.y : 0;\n      z = nDim > 2 ? d.z - c.z : 0;\n      l = Math.sqrt(x * x + y * y + z * z);\n      r = d.radius + (c.radius || 0);\n      if (l && l !== r) {\n        l = (l - r) / l * alpha;\n        d.x -= x *= l;\n        c.x += (1 - centerInertia) * x;\n        if (nDim > 1) {\n          d.y -= y *= l;\n          c.y += (1 - centerInertia) * y;\n        }\n        if (nDim > 2) {\n          d.z -= z *= l;\n          c.z += (1 - centerInertia) * z;\n        }\n      }\n    });\n  }\n  function initialize() {\n    centerpoints = (nodes || []).map(centers);\n  }\n  force.initialize = function (initNodes) {\n    nodes = initNodes;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    nDim = args.find(function (arg) {\n      return [1, 2, 3].includes(arg);\n    }) || 2;\n    initialize();\n  };\n  force.centers = function (_) {\n    return arguments.length ? (centers = _, initialize(), force) : centers;\n  };\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n  force.centerInertia = function (_) {\n    return arguments.length ? (centerInertia = +_, force) : centerInertia;\n  };\n  return force;\n}\n\nexport { cluster as default };\n"],"names":["cluster","nDim","nodes","centers","arguments","length","undefined","x","y","z","centerpoints","strength","centerInertia","force","alpha","c","l","r","forEach","d","i","Math","sqrt","radius","initialize","map","initNodes","_len","args","Array","_key","find","arg","includes","_"],"sourceRoot":""}