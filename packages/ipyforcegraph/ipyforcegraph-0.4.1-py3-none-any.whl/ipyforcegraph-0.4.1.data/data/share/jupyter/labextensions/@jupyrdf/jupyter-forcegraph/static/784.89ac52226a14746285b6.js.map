{"version":3,"file":"784.89ac52226a14746285b6.js?v=89ac52226a14746285b6","mappings":"iQAQUA,E,UAmBH,SAASC,IACd,OAAOD,EAAQE,YACjB,CAEO,SAASC,EAAgBD,GAE1BF,EAAQE,aACVE,QAAQC,KAAK,GAAG,kDAAoDH,IAGtEF,EAAQE,aAAeA,EACnBA,GACFA,EAAaI,aAAaC,QAAQP,EAAQQ,gBAE9C,EAjCA,SAAUR,GACG,EAAAE,aAAqC,KAChD,IAAIO,EAAqC,CAAC,EAC1B,EAAAD,eAAhB,WACO,EAAAN,eAGLO,EAAa,CAAC,EAChB,EACgB,EAAAC,UAAhB,SAA0BC,GAMxB,OAL2B,MAAvBF,EAAWE,KACbF,EAAWE,GAAWC,OACnBC,iBAAiBC,SAASC,MAC1BC,iBAAiBL,IAEfF,EAAWE,EACpB,CACD,CAjBD,CAAUX,IAAAA,EAAO,KAmCV,MAAMiB,EAAU,IAAIC,OAAO,6BAA8B,KAEzD,SAASC,EACdC,EACAT,EACAU,EACAC,EACAC,GAEA,OAAOvB,EAAQU,UAAUC,EAC3B,CAEO,SAASa,EAAeC,GAC7B,MAAwB,iBAAVA,EAAqBA,EAAMC,WAAWT,EAASE,GAAkBM,CACjF,C","sources":["webpack://@jupyrdf/jupyter-forcegraph/./js/theme-utils.ts"],"sourcesContent":["/*\n * Copyright (c) 2023 ipyforcegraph contributors.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { IThemeManager } from '@jupyterlab/apputils';\n\nimport { EMOJI } from './tokens';\n\nnamespace Private {\n  export let themeManager: IThemeManager | null = null;\n  let _themeVars: Record<string, string> = {};\n  export function onThemeChanged() {\n    if (!themeManager) {\n      return;\n    }\n    _themeVars = {};\n  }\n  export function getCssVar(varName: string) {\n    if (_themeVars[varName] == null) {\n      _themeVars[varName] = window\n        .getComputedStyle(document.body)\n        .getPropertyValue(varName);\n    }\n    return _themeVars[varName];\n  }\n}\n\nexport function getThemeManager(): IThemeManager | null {\n  return Private.themeManager;\n}\n\nexport function setThemeManager(themeManager: IThemeManager) {\n  /* istanbul ignore next */\n  if (Private.themeManager) {\n    console.warn(`${EMOJI} theme manager already registered, ignoring`, themeManager);\n    return;\n  }\n  Private.themeManager = themeManager;\n  if (themeManager) {\n    themeManager.themeChanged.connect(Private.onThemeChanged);\n  }\n}\n\nexport const CSS_VAR = new RegExp(/var\\s*\\(\\s*(--[^\\)]+)\\s*\\)/, 'g');\n\nexport function cssVarReplacer(\n  searchValue: string | RegExp,\n  varName: string,\n  offset: number,\n  string: any,\n  groups: any\n): string {\n  return Private.getCssVar(varName);\n}\n\nexport function replaceCssVars(value: any) {\n  return typeof value === 'string' ? value.replaceAll(CSS_VAR, cssVarReplacer) : value;\n}\n"],"names":["Private","getThemeManager","themeManager","setThemeManager","console","warn","themeChanged","connect","onThemeChanged","_themeVars","getCssVar","varName","window","getComputedStyle","document","body","getPropertyValue","CSS_VAR","RegExp","cssVarReplacer","searchValue","offset","string","groups","replaceCssVars","value","replaceAll"],"sourceRoot":""}