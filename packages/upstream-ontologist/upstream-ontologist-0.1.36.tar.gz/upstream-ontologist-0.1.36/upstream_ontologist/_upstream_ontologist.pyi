from upstream_ontologist import UpstreamDatum, UpstreamMetadata
from typing import Iterator, Any

def drop_vcs_in_scheme(url: str) -> str: ...

def unsplit_vcs_url(repo_url: str, branch: str | None, subpath: str | None) -> str: ...

def probe_gitlab_host(hostname: str) -> bool: ...

def is_gitlab_site(hostname: str, net_access: bool | None = None) -> bool: ...

def guess_repo_from_url(url: str, net_access: bool | None = None) -> str | None: ...

def probe_gitlabb_host(hostname: str) -> bool: ...

def find_public_repo_url(url: str, net_access: bool | None = None) -> str | None: ...

def browse_url_from_repo_url(url: str, branch: str | None = None, subpath: str | None = None, net_access: bool | None = None) -> str | None: ...

def plausible_vcs_url(url: str) -> bool: ...

def plausible_vcs_browse_url(url: str) -> bool: ...

def probe_upstream_branch_url(url: str, version: str | None = None) -> bool | None: ...

def canonical_git_repo_url(url: str, net_access: bool | None = None) -> str: ...

def check_repository_url_canonical(url: str, version: str | None = None) -> str: ...
def guess_from_doap(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_r_description(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_configure(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_travis(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_meta_yml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_meta_json(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_metainfo(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_nuspec(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_environment() -> Iterator[UpstreamDatum]: ...
def guess_from_path(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_opam(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_cabal(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_pkg_info(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_composer_json(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_pubspec_yaml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_debian_patch(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_pom_xml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_authors(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_package_yaml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_wscript(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_git_config(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_security_md(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_metadata_json(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_pyproject_toml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_setup_py(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_setup_cfg(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_cargo(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_gemspec(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_makefile_pl(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_package_json(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_package_xml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_perl_module(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_perl_dist_name(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_dist_ini(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_pod(data: bytes) -> Iterator[UpstreamDatum]: ...
def guess_from_meson(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_launchpad(package: str, distribution: str | None = None, suite: str | None = None) -> Iterator[tuple[str, UpstreamDatum]]: ...
def guess_from_aur(package: str) -> Iterator[tuple[str, UpstreamDatum]]: ...
def guess_from_travis_yml(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def guess_from_cabal_lines(lines: list[str]) -> Iterator[UpstreamDatum]: ...
def guess_from_go_mod(path: str, trust_package: bool) -> Iterator[UpstreamDatum]: ...
def get_repology_metadata(name: str, distro: str | None = None) -> Any: ...
def extract_pecl_package_name(url: str) -> str | None: ...
def metadata_from_url(url: str, origin: str | None = None) -> Iterator[UpstreamDatum]: ...
def extract_sf_project_name(url: str) -> str | None: ...
def known_bad_guess(datum: UpstreamDatum) -> bool: ...
def url_from_svn_co_command(command: bytes) -> str | None: ...
def url_from_git_clone_command(command: bytes) -> str | None: ...
def url_from_fossil_clone_command(command: bytes) -> str | None: ...
def find_forge(url: str, net_access: bool | None = None) -> Forge | None: ...
def repo_url_from_merge_request_url(url: str, net_access: bool | None = None) -> str | None: ...
def bug_database_from_issue_url(url: str, net_access: bool | None = None) -> str | None: ...
def guess_bug_database_url_from_repo_url(url: str, net_access: bool | None = None) -> str | None: ...
def bug_database_url_from_bug_submit_url(url: str, net_access: bool | None = None) -> str | None: ...
def bug_submit_url_from_bug_database_url(url: str, net_access: bool | None = None) -> str | None: ...
def check_bug_database_canonical(url: str, net_access: bool | None = None) -> str : ...
def check_bug_submit_url_canonical(url: str, net_access: bool | None = None) -> str : ...
def check_url_canonical(url: str) -> str: ...
def get_sf_metadata(project: str) -> Any: ...
def debian_is_native(path: str) -> bool | None: ...
def metadata_from_itp_bug_body(body: str) -> list[UpstreamDatum]: ...
def load_json_url(http_url: str, timeout: int | None = None) -> Any: ...

class ParseError(Exception): ...
class NoSuchForgeProject(Exception): ...
class NoSuchRepologyProject(Exception): ...

class Forge:

    @classmethod
    def extend_metadata(cls, upstream_metadata: UpstreamMetadata, project: str, certainty: str) -> None: ...

    repository_browse_can_be_homepage: bool


class GitHub(Forge): ...
class GitLab(Forge): ...
class SourceForge(Forge): ...
class Launchpad(Forge): ...
