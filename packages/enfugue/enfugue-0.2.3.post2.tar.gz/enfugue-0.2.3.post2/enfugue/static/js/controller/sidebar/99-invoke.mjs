import{isEmpty}from"../../base/helpers.mjs";import{ElementBuilder}from"../../base/builder.mjs";import{ButtonInputView}from"../../forms/input.mjs";import{Controller}from"../base.mjs";import{View}from"../../view/base.mjs";const E=new ElementBuilder;class InvokeLoadingBarView extends View{static className="invoke-loader";static loaderClassName="loading-bar"}class EnfugueButton extends ButtonInputView{static className="invoke";static defaultValue="ENFUGUE"}class InvokeButtonController extends Controller{getNodes(){let e=this.images.getState();return(Array.isArray(e)?e:e.nodes||[]).map(((e,i)=>{let t={x:e.x,y:e.y,w:e.w,h:e.h,inference_steps:e.inferenceSteps,guidance_scale:e.guidanceScale,scale_to_model_size:e.scaleToModelSize,remove_background:e.removeBackground};switch(Array.isArray(e.prompt)?(t.prompt,t.prompt_2=e.prompt):t.prompt=e.prompt,Array.isArray(e.negativePrompt)?(t.negative_prompt,t.negative_prompt_2=e.negativePrompt):t.negative_prompt=e.negativePrompt,e.classname){case"ImageEditorPromptNodeView":break;case"ImageEditorScribbleNodeView":t.control_images=[{image:e.src,process:!1,invert:!0,controlnet:"scribble"}];break;case"ImageEditorImageNodeView":t.fit=e.fit,t.anchor=e.anchor,!e.infer&&!e.inpaint&&(e.infer||e.inpaint||e.imagePrompt||e.control)||(t.image=e.src),e.infer&&(t.strength=e.strength),e.imagePrompt&&(t.ip_adapter_scale=e.imagePromptScale,t.ip_adapter_image=e.src,t.ip_adapter_image_fit=e.fit,t.ip_adapter_image_anchor=e.anchor),e.inpaint&&(t.mask=e.scribbleSrc,t.invert_mask=!0,t.crop_inpaint=e.cropInpaint,t.inpaint_feather=e.inpaintFeather),e.control&&(t.control_images=[{image:e.src,process:e.processControlImage,invert:"invert"==e.colorSpace,controlnet:e.controlnet,scale:e.conditioningScale,fit:e.fit,anchor:e.anchor}]);break;case"ImageEditorCompoundImageNodeView":let i,a;for(let n=0;n<e.children.length;n++){let o=e.children[n];(o.infer||o.inpaint)&&(isEmpty(i)?(i=n,t.image=o.src,t.anchor=o.anchor,t.fit=o.fit):messages.push("Node {i+1}: Base image set in image {imageNodeIndex+1}, ignoring additional set in {j+1}")),o.infer&&i==n&&(t.strength=o.strength),o.inpaint&&i==n&&(t.mask=o.scribbleSrc,t.invert_mask=!0,t.crop_inpaint=o.cropInpaint,t.inpaint_feather=o.inpaintFeather),o.imagePrompt&&(isEmpty(a)?(a=n,t.ip_adapter_image=o.src,t.ip_adapter_scale=o.imagePromptScale,t.ip_adapter_image_fit=o.fit,t.ip_adapter_image_anchor=o.anchor):messages.push("Node {i+1}: Image prompt image set in image {promptImageNodeIndex+1}, ignoring additional set in {j+1}")),o.control&&(isEmpty(t.control_images)&&(t.control_images=[]),t.control_images.push({image:o.src,process:o.processControlImage,invert:"invert"==o.colorSpace,controlnet:o.controlnet,scale:o.conditioningScale,fit:o.fit,anchor:o.anchor}))}break;default:throw`Unknown classname ${e.classname}`}return t}))}async tryInvoke(){this.isInvoking=!0,this.loadingBar.loading(),this.invokeButton.disable().addClass("sliding-gradient");try{this.application.autosave(),await this.application.invoke({nodes:this.getNodes()})}catch(e){console.error(e);let i=`${e}`;if(isEmpty(e.detail)?isEmpty(e.title)||(i=e.title):i=e.detail,-1!==i.toLowerCase().indexOf("engine process died"))return this.notify("warn","Engine Didn't Start","The diffusion engine process exited before it started responding to requests. Waiting a moment and trying again."),await this.tryInvoke();this.notify("error","Couldn't Start",i)}this.invokeButton.enable().removeClass("sliding-gradient"),this.loadingBar.doneLoading(),this.application.autosave(),this.isInvoking=!1}async initialize(){this.invokeButton=new EnfugueButton(this.config),this.invokeButton.onChange((()=>this.tryInvoke())),this.loadingBar=new InvokeLoadingBarView,await this.application.sidebar.addChild(this.invokeButton),await this.application.sidebar.addChild(this.loadingBar),this.subscribe("tryInvoke",(()=>{!0!==this.isInvoking&&this.tryInvoke()}))}}export{InvokeButtonController as SidebarController};
