[build-system]
requires = [
  "setuptools>=61.0.0",
  "setuptools_scm[toml]>=6.2",
  "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "pyunifiprotect"
description = "Unofficial UniFi Protect Python API and CLI"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name="Bjarne Riis", email="bjarne@briis.com"},
    {name="Christopher Bailey", email="cbailey@mort.is"},
]
maintainers = [
    {name="Christopher Bailey", email="cbailey@mort.is"},
    {name="J. Nick Koston", email="nick@koston.org"},
]
license = {text="MIT"}
keywords = ["UniFiProtect", "UniFi Protect", "Surveilance", "UniFi", "Home Assistant", "Python"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11"
]
dynamic = ["version"]
dependencies = [
    "aiofiles",
    "aiohttp",
    "aioshutil",
    "async-timeout",
    "dateparser",
    "orjson",
    "packaging",
    "pillow",
    "pydantic!=1.9.1",
    "pyjwt",
    "typer[all]>0.6",
]

[project.urls]
"Source Code" = "https://github.com/AngellusMortis/pyunifiprotect/"
"Documentation" = "https://angellusmortis.github.io/pyunifiprotect/latest/"
"Bug Reports" = "https://github.com/AngellusMortis/pyunifiprotect/issues/"
"Changelog" = "https://github.com/AngellusMortis/pyunifiprotect/releases/"

[project.optional-dependencies]
dev = [
    "base36",
    "black",
    "build",
    "coverage[toml]",
    "flake8-docstrings",
    "flake8",
    "ipython",
    "mike",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mypy",
    "pip-tools",
    "pydocstyle",
    "pylint_strict_informational",
    "pylint",
    "pyproject-flake8",
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-sugar",
    "pytest-timeout>=1.2.1",
    "pytest-xdist",
    "pytest",
    "sqlalchemy[asyncio,mypy]",
    "termcolor",
    "types-aiofiles",
    "types-dateparser",
    "types-pillow",
    "types-pyjwt",
    "types-termcolor",
    "tzdata",
]
tz = ["tzdata"]
full = [
    "aiosqlite",
    "asyncify",
    "av",
    "ipython",
    "python-dotenv",
    "sqlalchemy[asyncio]",
    "termcolor",
]
shell = [
    "ipython",
    "termcolor",
    "python-dotenv",
]
backup = [
    "aiosqlite",
    "asyncify",
    "av",
    "sqlalchemy[asyncio]",
]


[project.scripts]
unifi-protect = "pyunifiprotect.__main__:start"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["pyunifiprotect", "pyunifiprotect.*"]
exclude = ["tests", "tests.*"]

[tool.setuptools.package-data]
pyunifiprotect = ["py.typed"]

[tool.setuptools_scm]

[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311"]
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | generated
  )/
)
'''

[tool.coverage.run]
omit = [
    ".tox/*",
    "tests/*",
    "pyunifiprotect/unifi_data.py",
    "pyunifiprotect/unifi_protect_server.py",
]

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "pyunifiprotect",
]
combine_as_imports = true

[tool.pylint.MASTER]
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
# Disabled for now: https://github.com/PyCQA/pylint/issues/3584
#jobs = 2
load-plugins = [
    "pylint_strict_informational",
]
persistent = false
extension-pkg-whitelist = [
    "ciso8601",
    "cv2",
]

[tool.pylint.BASIC]
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "T",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this

# handled by mypy:
# no-member, unsupported-membership-test, unsupported-assignment-operation,
# unsubscriptable-object, used-before-assignment, bad-reversed-sequence
disable = [
    "format",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "missing-docstring",
    "empty-docstring",
    "invalid-name",
    "fixme",
    "no-member",
    "unsupported-membership-test",
    "unsubscriptable-object",
    "unsupported-assignment-operation",
    "used-before-assignment",
    "bad-reversed-sequence",
]
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]
extension-pkg-whitelist = "pydantic"

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = [
    "tests",
]
norecursedirs = [
    ".git",
    "testing_config",
    ".tox",
]
addopts = "--cov=pyunifiprotect --cov-append -n=auto -Wd"

[tool.flake8]
exclude = ".eggs, .git, .tox, dist"
ignore = "D10, D202, D210, D205, D4, E501, E126, E128, W504, W503, E203"
max-line-length = 120

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
plugins = "pydantic.mypy,sqlalchemy.ext.mypy.plugin"
disable_error_code = "no-redef"
exclude = "dist"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
implicit_reexport = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "pytest_benchmark.fixture"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "av.*"
ignore_missing_imports = true
