{
    "build": {
        "dockerfile": "../Dockerfile",
        "context": "..",
        "target": "dev"
    },
    "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "eamodio.gitlens",
        "ryanluker.vscode-coverage-gutters",
        "bungcip.better-toml",
        "mikestead.dotenv",
        "ms-python.pylint",
        "ms-python.black-formatter",
        "ms-python.isort",
        "streetsidesoftware.code-spell-checker"
    ],
    "settings": {
        // common
        "editor.formatOnSave": true,
        "editor.formatOnSaveTimeout": 3000,
        "editor.insertSpaces": true,
        "files.insertFinalNewline": true,
        "files.trimTrailingWhitespace": true,
        // python common
        "[python]": {
            "editor.defaultFormatter": "ms-python.black-formatter",
            "editor.codeActionsOnSave": {
                "source.organizeImports": true
            },
        },
        "python.envFile": "${workspaceFolder}/.env",
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.pythonPath": "/usr/local/bin/python",
        // python linting
        "python.linting.banditEnabled": false,
        "python.linting.enabled": true,
        "python.linting.flake8Enabled": true,
        "python.linting.flake8Path": "/usr/local/bin/pflake8",
        "python.linting.mypyEnabled": true,
        "python.linting.pylintEnabled": false,
        "python.linting.pylamaEnabled": false,
        "black-formatter.args": [
            "--config=./pyproject.toml",
            "--line-length=120" // VS Code use to override to 88, this ensure correct default
        ],
        "isort.args": [
            "--settings-path=./pyproject.toml"
        ],
        "pylint.args": [
            "--rcfile=./pyproject.toml"
        ],
        // python tests
        "coverage-gutters.xmlname": "coverage.xml",
        "coverage-gutters.customizable.status-bar-toggler-watchCoverageAndVisibleEditors-enabled": true,
        "coverage-gutters.showLineCoverage": true,
        "python.testing.promptToConfigure": false,
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.testing.nosetestsEnabled": false,
        "python.testing.pytestArgs": [
            "--cov-report=xml",
            "--color=no"
        ]
    },
    "updateRemoteUserUID": true,
    "containerUser": "python",
    "postCreateCommand": "/workspaces/pyunifiprotect/.bin/install-requirements && source /home/python/.bashrc"
}
